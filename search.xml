<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[HTTP 入门体检]]></title>
      <url>https://lucius0.github.io/2019/06/30/archivers/http-introduction/</url>
      <content type="html"><![CDATA[<p>无论是大系统还是小项目，无论是移动端还是PC端，无论是大数据还是云计算，从整体到个人，网络协议一直都是绕不过去的坎，它在我们职业生涯中有着举足轻重的地位。技术浪潮一浪接一浪，很多时候我们盲目追求新技术却忘记了新技术的出现都是要依赖于繁琐复杂且难啃的基层技术，新技术只是为了更好更快更稳的开发，针对业务需求相对进行了封装罢了，一层一层剥下来，它还是原来的它。我们先来入门一下 HTTP，OSI模型的应用层。</p>
<h2 id="网络协议层"><a href="#网络协议层" class="headerlink" title="网络协议层"></a>网络协议层</h2><p>网络有七层协议层：应用层、表示层、会话层、(安全层 - SSL/TLS)、传输层、网络层、数据链路层、物理层。由于表示层跟会话层没有独立实现过，而是跟应用层一起实现的</p>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层决定了向用户提供应用服务时通信的活动。(DNS、HTTP、HTTPS、RTMP、FTP)；</p>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。(TCP、UDP)。</p>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>网络层用来处理在网络上流动的数据包。数据包是网络传输额最小单位。(IP)</p>
<h3 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h3><p>链路层是用来连接网络的硬件部分。包括控制操作系统、驱动、网卡等。</p>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>物理层主要是定义物理设备如何传输数据。</p>
<h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><p>当我们购物时，会先去 DNS 或 HTTPDNS 查找 IP 地址。<strong>知道目标 IP 地址，浏览器就会打包请求，如果使用 HTTPS ，则采取加密传输。</strong></p>
<p>1、应用层：浏览器通过 socket 编程，将其打包传输给下一层传输层；<br>2、传输层：这里采用TCP协议(PS:它有两个端口，一个是浏览器监听端口，一个是服务器监听端口，操作系统往往通过端口来判断数据包应该往哪个进程走)。TCP将应用层收到的数据包进行~分割~，并在报文上打上标记序号及端口号转发给网络层；<br>3、网络层：接收到传输层的数据包，在该层有 本地IP地址 以及 目标IP地址，将<strong>IP地址</strong>封装后转发给链路层；<br>4、链路层：通过<strong>ARP协议</strong>，获取本地<strong>MAC地址</strong>，发送给<strong>网关物理层(默认IP：192.168.1.1)</strong>。<br>5：物理层：由于有<strong>MAC地址</strong>，IP 数据包能达到网关。如路由器，会根据路由表，来判断目标 IP 怎么走。</p>
<p><img src="/images/http/http-01.png" alt=""></p>
<p><strong>注</strong></p>
<blockquote>
<p>IP 地址：指明了节点被分配到的地址，可变。<br>MAC 地址：指网卡所属的固定地址，基本不变。<br>IP 间的通信依赖 MAC 地址。</p>
<p>ARP 协议：解析地址的协议，根据 IP地址 反查出对应的 MAC地址。</p>
</blockquote>
<h2 id="HTTP-协议请求报文-amp-响应报文"><a href="#HTTP-协议请求报文-amp-响应报文" class="headerlink" title="HTTP 协议请求报文&amp;响应报文"></a>HTTP 协议请求报文&amp;响应报文</h2><p><img src="/images/http/http-02.png" alt=""></p>
<h3 id="常见的方法"><a href="#常见的方法" class="headerlink" title="常见的方法"></a>常见的方法</h3><table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">GET</td>
<td>获取指定资源，一般来说 GET 请求只用于资源数据的请求。</td>
</tr>
<tr>
<td style="text-align:center">POST</td>
<td>传输实体主体，向指定资源提交数据，如表单提交、资源创建等。</td>
</tr>
<tr>
<td style="text-align:center">PUT</td>
<td>传输资源，向指定资源位置上传最新内容，如资源更新等。</td>
</tr>
<tr>
<td style="text-align:center">DELETE</td>
<td>请求服务器删除置顶的 URI 所标识的资源，简单来说就是删除资源。</td>
</tr>
<tr>
<td style="text-align:center">PATCH</td>
<td>跟 PUT 方法有些类似，都是更新资源。但是 PATCH 主要是更新部分资源， 而 PUT 则是整体更新；当资源不存在时，PATCH 会创建新资源，而 PUT只会 在已有的资源进行更新。</td>
</tr>
<tr>
<td style="text-align:center">HEAD</td>
<td>同 GET 方法，但 HEAD 常用于获取报文首部，查看服务器性能。</td>
</tr>
<tr>
<td style="text-align:center">OPTIONS</td>
<td>该方法同 HEAD，但是 OPTIONS 用来询问服务器返回该资源所支持的方法。</td>
</tr>
</tbody>
</table>
<h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><table>
<thead>
<tr>
<th style="text-align:center">状态码大类</th>
<th style="text-align:center">状态码小类</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1xx</td>
<td style="text-align:center"></td>
<td style="text-align:left">信息性状态码，接收到请求并且继续处理。</td>
</tr>
<tr>
<td style="text-align:center">2xx</td>
<td style="text-align:center"></td>
<td style="text-align:left">成功状态码。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">200</td>
<td style="text-align:left">服务器已成功处理了请求。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">201</td>
<td style="text-align:left">服务器已接收请求，但尚未处理，客户端可以通过该状态码进行轮询。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">203</td>
<td style="text-align:left">服务器已成功处理了请求，但可能未授权。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">204</td>
<td style="text-align:left">服务器成功处理了请求，但没有返回任何内容，如删除成功。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">206</td>
<td style="text-align:left">服务器成功处理了部分 GET 请求，如媒体多端请求。</td>
</tr>
<tr>
<td style="text-align:center">3xx</td>
<td style="text-align:center"></td>
<td style="text-align:left">重定向状态码。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">301</td>
<td style="text-align:left">永久性重定向。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">302</td>
<td style="text-align:left">临时性重定向。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">303</td>
<td style="text-align:left">同302，但多了一个标准，就是明确要求客户端采用 GET 方法。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left">注：301、302、303 响应后，浏览器都会把 POST 改为 GET，并删除请求主体，等到再次请求时才发送。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">304</td>
<td style="text-align:left">资源没有发生变化，该状态码跟重定向没有什么关系。</td>
</tr>
<tr>
<td style="text-align:center">4xx</td>
<td style="text-align:center"></td>
<td style="text-align:left">客户端错误状态码。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">400</td>
<td style="text-align:left">请求错误，服务器不理解请求的语法，简单来说就是错误的传参导致的报错。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">401</td>
<td style="text-align:left">请求不通过身份验证，如未登录或令牌错误。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">403</td>
<td style="text-align:left">请求通过身份验证，但是未授权，如权限管理越级访问。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">404</td>
<td style="text-align:left">请求服务器不存在的资源。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">405</td>
<td style="text-align:left">请求方法不通过，如该用 POST 方法的请求用了 PUT。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">406</td>
<td style="text-align:left">请求的资源格式不正确，如请求 JSON 格式数据，服务器只有 XML 格式数据。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">409</td>
<td style="text-align:left">请求发生冲突，常见于修改内容在服务器上是唯一的，如身份证ID。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">410</td>
<td style="text-align:left">请求的资源曾经存在过，如下架的视频。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">413</td>
<td style="text-align:left">请求体超过服务器的限制，如上传资源 10M，服务器限制 5M。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">414</td>
<td style="text-align:left">请求 URI 过长。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">415</td>
<td style="text-align:left">不支持媒体类型，如上传 PNG 文件，而服务器规定 JPG。</td>
</tr>
<tr>
<td style="text-align:center">5xx</td>
<td style="text-align:center"></td>
<td style="text-align:left">服务端错误状态码。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">500</td>
<td style="text-align:left">服务器发生错误，但原因未明。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">502</td>
<td style="text-align:left">网关错误，如请求需转发到B服务器，而B服务器报错时就会报网关错误。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">503</td>
<td style="text-align:left">服务不可用，服务器重启或维护之类不在状态。</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center">504</td>
<td style="text-align:left">网关超时，同502，只是B服务器久久不回应。</td>
</tr>
</tbody>
</table>
<h2 id="HTTP-首部"><a href="#HTTP-首部" class="headerlink" title="HTTP 首部"></a>HTTP 首部</h2><p><strong>q</strong>，表示权重值，默认值1.0，区间在0～1。如 <code>Accept-Language:zh-CN,en-US;q=0.8,en;q=0.6</code>，表示浏览器优先支持 zh-CN 。</p>
<h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><p>通用首部字段指的是请求报文以及响应报文都会使用到的首部。</p>
<ul>
<li>Cache-Control：通过如下指令，来操作缓存的工作机制。<strong>未完待续，篇幅太多，不在这里赘述，之后给实例。</strong></li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">常见缓存请求指令</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">no-cache</td>
<td style="text-align:center">强制向服务器再次验证</td>
</tr>
<tr>
<td style="text-align:center">no-store</td>
<td style="text-align:center">不缓存请求或响应的任何内容</td>
</tr>
<tr>
<td style="text-align:center">max-age=(秒)</td>
<td style="text-align:center">响应的最大 Age 值</td>
</tr>
<tr>
<td style="text-align:center">max-stale=[秒]</td>
<td style="text-align:center">接收已过期的响应</td>
</tr>
<tr>
<td style="text-align:center">min-fresh=(秒)</td>
<td style="text-align:center">期望在指定时间内的响应仍有效</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">常见缓存响应指令</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">public</td>
<td style="text-align:center">可向任意方提供响应的缓存</td>
</tr>
<tr>
<td style="text-align:center">private</td>
<td style="text-align:center">仅向特定用户返回响应</td>
</tr>
<tr>
<td style="text-align:center">no-cache</td>
<td style="text-align:center">缓存前必须先确认其有效性</td>
</tr>
<tr>
<td style="text-align:center">no-store</td>
<td style="text-align:center">不缓存请求或响应的任何内容</td>
</tr>
<tr>
<td style="text-align:center">max-age=(秒)</td>
<td style="text-align:center">响应的最大 Age 值</td>
</tr>
<tr>
<td style="text-align:center">s-maxage=(秒)</td>
<td style="text-align:center">公共缓存服务器响应的最大 Age 值</td>
</tr>
<tr>
<td style="text-align:center">must-revalidate</td>
<td style="text-align:center">可缓存但必须再向源服务器进行确认</td>
</tr>
</tbody>
</table>
<ul>
<li>Connection：Connection 本身只与当前连接有关，当客户端与服务器之间存在代理，那么从客户端的请求报文会逐段发给服务器，服务器也会逐段返回客户端，通常就算有层层代理请求头以及响应头都会<strong>保持原封不动。</strong>但是刚才提到，Connection 只与当前连接有关，那么在报文转给下个节点之前删除，否则就会出现不可预期的问题。其他不传递的 Header 可以看<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Connection" target="_blank" rel="noopener">Connection 的 hop-by-hop</a><ul>
<li><code>Connection: Close</code>：断开时将 Connection 设置为Close；</li>
<li><code>Connection: Keep-Alive</code>：连接保持持久化；</li>
</ul>
</li>
<li>Date：创建报文的日期时间；</li>
<li>Pragma：no-cache。指令唯一，为<strong>兼容</strong> HTTP/1.1 之前的版本；</li>
<li>Trailer：简单来说，该字段主要是说明<strong>报文末尾</strong>记录了哪些字段；</li>
<li>Transfer-Encoding：传输编码方式，如 chunk；</li>
<li>Upgrade：升级为其他的协议；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Upgrade: TLS/<span class="number">1.0</span></span><br><span class="line">Connection: Upgrade (必须指定为Upgrade)</span><br></pre></td></tr></table></figure>
<h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><ul>
<li>Accept：客户端能处理的媒体类型，如<code>text/html</code>、<code>image/jpeg</code>；</li>
<li>Accept-Charset：内容支持的字符集，如<code>ios-8895-5,utf-8;q=0.8</code>；</li>
<li>Accept-Encoding：内容支持的编码，如<code>gzip,deflate</code>；</li>
<li>Accept-Language：内容支持的语言，如<code>zh-cn,zh;q=0.7</code>；</li>
<li>Authorization：认证信息，用来认证用户的身份；</li>
<li>Host：请求资源的服务器，如<code>www.baidu.com</code>；</li>
<li>If-Match / If-Modified-Since / If-None-Match：参考缓存机制；</li>
<li>If-Range：资源未更新时发送实体 Byte 的范围请求，如 If-Range 字段值若是跟 ETag 值或更新日期时间匹配一致，那么就作为<strong>范围请求</strong>处理，若不一致，则返回全部资源；</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request body</span></span><br><span class="line">GET /index.html</span><br><span class="line">If-Range: <span class="string">"123456"</span></span><br><span class="line">Range: bytes=<span class="number">5001</span><span class="number">-10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// response body(匹配情况下)</span></span><br><span class="line"><span class="number">206</span> Partial Content</span><br><span class="line">Content-Range: bytes <span class="number">5001</span><span class="number">-10000</span>/<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// response body(不匹配情况下)</span></span><br><span class="line"><span class="number">200</span> OK</span><br><span class="line">ETag: <span class="string">"45678"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Range：获取部分范围资源请求，服务器接收后会返回 206 状态码；</li>
<li>Referer：告知服务器请求的原始资源的 URI；</li>
<li>User-Agent：将创建请求的浏览器和用户代理名称等信息传送给服务器。</li>
<li>Via：用来追踪客户端与服务器之间的请求和响应报文的传输路径；</li>
<li>Warning：错误通知；</li>
</ul>
<h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><ul>
<li>Accept-Ranges：bytes 和 none。bytes 是用来告知客户端，服务器是否能处理范围请求；</li>
<li>Age：告知客户端，服务器在多久前创建了响应，单位为秒。<strong>若响应的为缓存服务器，Age 是指缓存后的响应再次发起认证到认证完成的时间</strong>；</li>
<li>ETag：资源的唯一标志，当资源更新，资源的标志也会随之更新；<ul>
<li>强ETag：实体发生多么细微的变化都会改变值；</li>
<li>弱ETag：只有资源发生根本变化，产生差异才会改变，这时会在开始附加 <code>W/</code>，如:<code>ETag: W/&quot;xxx-1234&quot;</code>；</li>
</ul>
</li>
<li>Location：将客户端重定向至指定 URI；</li>
<li>Retry-After：对再次发起请求的时机要求，单位秒，常配合状态码 503 或 3xx 重定向，如<code>Retry-After: 120</code>；</li>
<li>Server：当前服务器上的HTTP服务器应用程序信息，如<code>Server: Apache/xxxx (Unix)</code>；</li>
<li>Vary：可对缓存进行控制，源服务器会向代理服务器传达关于本地缓存使用方法的命令，简单来说，就是指定不可缓存的请求头列表。</li>
</ul>
<h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><p>实体首部字段是包含在请求报文和响应报文中的实体部分所使用的首部，用于<strong>补充内容的更新时间等与实体相关的信息，这里主要列举下响应报文补充字段</strong>。</p>
<ul>
<li>Allow：用于通知客户端能够支持 <strong>Request-URI 指定资源</strong> 的所有 HTTP 方法，当服务器收不到不支持的 HTTP 方法时，会以 405 状态码返回。与此同时，还会把所有支持的 HTTP 方法写入首部字段 Allow 后返回。</li>
<li>Content-Encoding：告知客户端服务器对实体内容的编码方式，有gzip、compress、deflate、identity；</li>
<li>Content-Language：告知客户端实体内容使用的自然语言，如 <code>zh-cn</code>；</li>
<li>Content-Length：实体内容的大小(单位字节)；</li>
<li>Content-Location：返回资源对应的 URI，如访问 <code>https://www.baidu.com/</code>，返回资源 <code>https://www.baidu.com/index.html</code>；</li>
<li>Content-Range：范围请求，如 <code>Content-Range: bytes 5001-10000/10000</code>，单位字节；</li>
<li>Content-Type：同 <code>Accept</code>；</li>
<li>Expires：资源的实效日期，但是假如首部字段 <code>Cache-Control</code> 有指定 <code>max-age</code> 指令时，会优先处理 <code>max-age</code>；</li>
<li>Last-Modified：资源最后的修改时间；</li>
</ul>
<h3 id="其他常用响应首部字段-X"><a href="#其他常用响应首部字段-X" class="headerlink" title="其他常用响应首部字段 X-"></a>其他常用响应首部字段 X-</h3><ul>
<li>X-Frame-Options：控制网站内容在其他 Web 网站的 Frame 标签内的显示问题。<code>DENY</code>为拒绝；<code>SAMEORIGIN</code>：尽在同源域名下匹配时许可；</li>
<li>X-XSS-Protection：针对跨站脚本攻击的一种对策，<code>0</code> 为将XSS过滤设置成无效状态，<code>1</code> 则相反；</li>
<li>Content-Security-Policy,<em>X-Content-Security-Policy</em>：内容安全策略，为了防御XSS、CSRF等代码注入攻击，阻止恶意内容在源网页中执行；</li>
<li>X-UA-Compatible：推荐指定的渲染引擎来展示网站内容；</li>
</ul>
<h3 id="其他常用请求首部字段-X"><a href="#其他常用请求首部字段-X" class="headerlink" title="其他常用请求首部字段 X-"></a>其他常用请求首部字段 X-</h3><ul>
<li>X-Requested-With：主要用于标识 Ajax 请求。大部分的JavaScript框架会发送这个字段，如 <code>X-Requested-With: XMLHttpRequest</code>；</li>
<li>DNT：同 <code>X-Do-Not-Track</code>，请求某个网页应用程序停止跟踪某个用户。<code>0</code> 表示 <code>DNT</code> 被禁用，<code>1</code> 则相反；</li>
<li>X-Csrf-Token：用于防止 CSRF 攻击，如 <code>X-Csrf-Token:i8XNjC4b8KVok4uw5RftR38Wgp2BFwql</code>；</li>
</ul>
<h2 id="HTTP-协议通信"><a href="#HTTP-协议通信" class="headerlink" title="HTTP 协议通信"></a>HTTP 协议通信</h2><p>在 HTTP 1.1 之前，每个 HTTP 请求都要求打开一次 TCP 连接，并且使用一次之后就断开这个 TCP 连接，每次这样都会造成资源的浪费。</p>
<h3 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h3><p><code>HTTP/1.1 keep-alive</code>：只要任意一端没有明确提出断开连接，则保持 <strong>TCP 连接状态</strong>，即在一次 TCP 连接中可以持续发送多份数据而不会断开连接，这样就可以减少 TCP 连接建立的次数，意味着可以减少 TIME_WAIT 状态连接。<strong>但是，长时间的 TCP 连接容易导致系统资源无效占用，所以正确地设置 keep-alive timeout 时间非常重要。</strong></p>
<p>为什么需要持久连接？为什么 TCP 的建立耗费时间？这里就需要说到 TCP 的三次握手跟四次挥手了。</p>
<h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><p>在客户端和服务器建立 HTTP 请求的发送和返回的过程中，在这过程中是需要创建 TCP Connection，因为 HTTP 只有请求和响应这个概念，而 TCP 起到了传输数据包的作用。在 HTTP 1.0 版本，TCP 传输完毕之后就关闭了，而在 HTTP 1.1 版本，则 TCP 上面是可以有多个 HTTP 请求的。</p>
<p><img src="/images/http/http-03.png" alt=""></p>
<p><strong>seq(Sequence Number)</strong>：序列号；<br><strong>ack(Acknowledgement Number)</strong>：确认序号</p>
<ol>
<li><code>SYN=1, seq=X</code>：客户端发送一个 TCP 的 SYN 标志位为1的包，指明客户端准备连接服务器的端口。而 seq，为初始序列号X，X是随机的，这样为了网络安全。发送完毕之后客户端就进入 <code>SYN_SEND</code> 状态；</li>
<li><code>SYN=1, ACK=1, seq=y, ack=x+1</code>：服务器返回确认包(SYN=1, ACK=1)，同时服务器随机生成 seq 序列号，并将确认序号 ack 设置为客户请求序号加1，即 ack=x+1。完毕之后，服务器进入 <code>SYN_RCVD</code> 状态；</li>
<li><code>ACK=1, ack=y+1, seq=x+1</code>：客户端收到服务器的数据后，会检查 ack 是否等于 x+1，ACK标志位为1。如果正确则会再次发送确认包(ACK=1)，并且把服务器发来的 ack 序号在 seq 的基础上加1，即 <code>ack=y+1</code>，然后再设置 <code>seq=x+1</code>。发送完毕后，客户端和服务器都进入了 <code>ESTABLISHED</code> 状态，TCP握手结束。</li>
</ol>
<h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><p>关闭TCP连接，无论是客户端还是服务器，只要执行 <code>close</code> 操作，就可以发起挥手行为。之所以有4次，是因为 TCP 连接的拆除需要发送4个包。我们在以下视图默认为客户端向服务器发起 <code>close</code> 操作。其中<code>seq</code>/<code>ack</code>同上。</p>
<p><img src="/images/http/http-04.png" alt=""></p>
<ol>
<li><code>FIN=1, seq=x</code>：客户端发送 FIN 包，表示客户端已经没有数据可以发送了，但是仍然可以接收数据，这时候客户端进入 <code>FIN+WAIT_1</code> 状态；</li>
<li><code>ACK=1, ack=X+1</code>：服务器收到客户端的 FIN 包，随后反手就是一个确认包，表示服务器已经收到客户端关闭连接的请求，但是还没做到真正的关闭；</li>
<li><code>FIN=1, seq=y</code>：服务器准备关闭连接时，再次向客户端发送结束连接的响应。发送完毕之后，服务器进入 <code>LAST_ACK</code> 状态，等待客户端最后的确认包<code>ACK</code>；</li>
<li><code>ACK=1, ack=y+1</code>：客户端收到服务器的结束响应，然后客户端就发送最后的确认包 <code>ACK</code>，服务器收到后就开始关闭连接，进入 <code>CLOSED</code> 状态；客户端等待 <strong>2MSL(MSL(Maximum Segment Lifetime): 报文段最大生存时间)</strong>后，再也没有收到服务器的 <code>ACK</code>，认为服务器已经正常关闭了，随后客户端也关闭连接，进入<code>CLOSED</code> 状态。</li>
</ol>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>不仅仅 HTTP，任何未加密的协议都存在以下的不足：</p>
<ul>
<li>通信使用不加密明文，内容可能会被窃听；</li>
<li>不验证通信方的身份，有可能遭遇伪装；</li>
<li>无法证明报文的完整性，所以有可能已遭篡改；</li>
</ul>
<p><strong>-&gt; HTTP 加密处理 + 认证 + 完整性保护 = HTTPS</strong><br>在上面提到网络协议层的时候，有一层是安全层，该层就是 SSL协议/TLS协议。HTTP 是直接与TCP通信，而HTTPS，则演变成了先和 SSL 通信，再由 SSL 和 TCP 通信了。</p>
<p><strong>注</strong></p>
<blockquote>
<p>SSL 还可以配合其他应用层协议，如SMTP，Telnet；</p>
</blockquote>
<h3 id="HTTPS-加密方式"><a href="#HTTPS-加密方式" class="headerlink" title="HTTPS 加密方式"></a>HTTPS 加密方式</h3><p>加密和解密共用一个密钥称为<strong>对称加密</strong>，而使用公开密钥+私有密钥则为<strong>非对称加密</strong>。</p>
<p>HTTPS 则采用对称加密和非对称加密两者并用的<strong>混合加密机制</strong>。因为无论是对称加密还是非对称加密，都是无法直接保证通信的安全性，如无法证明公开密钥就是货真价实的。因此需要<strong>数字证书认证机构</strong>。</p>
<h3 id="证书申请流程"><a href="#证书申请流程" class="headerlink" title="证书申请流程"></a>证书申请流程</h3><ol>
<li>服务器运营人员向数字证书认证机构提出<strong>公开密钥申请</strong>；</li>
<li>机构判明申请者的身份后，对<strong>公开密钥做数字签名</strong>，然后将其跟公钥证书绑定在一起；</li>
<li>服务器将该公钥证书发给客户端，以进行加密通信；</li>
<li>客户端对证书上的数字签名进行验证，验证其有效且信赖</li>
</ol>
<p><strong>注</strong></p>
<blockquote>
<p>多数浏览器开发商发布版本会事先植入常用认证机关的公开密钥。</p>
</blockquote>
<h3 id="通信机制"><a href="#通信机制" class="headerlink" title="通信机制"></a>通信机制</h3><p><img src="/images/http/http-05.png" alt=""></p>
<ol>
<li>Client Hello 报文：包含SSL指定版本、加密组件(Cipher Suite)、列表(密钥长度、加密算法等)；</li>
<li>Server Hello 报文：同 Client Hello 报文，在报文中包含 SSL 版本以及加密组件(筛选自 Client Hello 报文)；</li>
<li>Certificate 报文：包含公开密钥证书；</li>
<li>Client Key Exchange 报文：步骤3的公开密钥已对该报文进行加密，并含有 <code>Pre-master secret</code> 的随机字符串；</li>
<li>Change Cipher Spec 报文：该报文会提示服务器，此报文后的通信采用 <code>Pre-master secret</code>密钥加密；</li>
<li>Finished 报文：包含连接至今为止的所有校验值；</li>
<li>到这一步说明 Finished 报文交换完毕，SSL 连接建立完成，开始 HTTP 通信；</li>
</ol>
<p><strong>注</strong></p>
<blockquote>
<p>在应用层发送数据时会附加 MAC(Message Authentication Code)的报文摘要来检查报文是否遭到篡改，从而保护报文的完整性。</p>
</blockquote>
<p>安全性在网络通信得到了保证，但是HTTPS也存在<strong>HTTPS 处理速度慢(SSL 通信慢，而且消耗CUP和内存资源)</strong>以及<strong>证书认证贵</strong> 的缺点。</p>
<h2 id="HTTP-1-1-与-HTTP-2"><a href="#HTTP-1-1-与-HTTP-2" class="headerlink" title="HTTP 1.1 与 HTTP 2"></a>HTTP 1.1 与 HTTP 2</h2><p>在这里简单的说下，相比之下，HTTP 1.1 和 HTTP 2有什么优化。</p>
<h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h3><ol>
<li>持久连接：由于创建 HTTP 连接需要<strong>三次握手</strong>，并且在每一次请求时需要在客户端和服务器之间创建 TCP 连接， 在服务器返回完内容后，该 TCP 连接就关闭，这样就会导致资源的浪费。因此 HTTP 1.1 的持久连接，就会再每一次请求建立完 HTTP 连接后不关闭；</li>
<li>pipeline：可以在同一个连接发送多个请求。虽然说是可以发送多个，但是服务器接收处理的逻辑，依旧是并行的，所以返回的数据依旧是需要等待服务器处理完毕再进行下一个的；</li>
<li>增加了首部字段和方法：如Host首部字段、OPTION请求方法；</li>
</ol>
<p><strong>注</strong></p>
<blockquote>
<p>HTTP 是一种不保存状态，即无状态协议，它不会对请求和响应做持久化处理。因此才会有了Cookie、Session技术的引进。</p>
<p>Session的实现对Cookie有依赖关系，前者是保存在服务器，因为会占用服务器CPU和内存资源，但是相对安全；相反的后者是保存在客户端的，在响应报文内携带Set-Cookie首部字段，告知客户端保存，而且安全性较弱。</p>
</blockquote>
<h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP 2"></a>HTTP 2</h3><ol>
<li>二进制数据传输：在之前的 HTTP 版本，大部分的数据传输是字符串，而在 HTTP 2 则会以数据帧来进行传输(有点像websocket)，这样同一个连接里的多个请求就不需要按照顺序来处理了；</li>
<li>头信息压缩提高效率优化：在 HTTP 1.1版本，每一次的发送跟接收，头信息都需要完整的返回，因此会占用服务器资源以及带宽资源，因此压缩完后就可以提高利用率。</li>
<li>推送：在之前的 HTTP 版本，都是客户端向服务器发送请求，而在 HTTP 2，服务器也可以主动的向客户端发送数据传输。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有关网络协议知识点太多了，在这里也只是借用巨人的肩膀来简单的理清网络协议的大概思路。每一个细节，每一个原理真真正正要较真起来，都可以单独写一篇文章，之所以有这篇文章的存在，是因为后续的文章都需要或多或少的网络协议知识，也是为了以后方便自己记忆，不用到处查找资料。这里的知识点可能会有所纰漏错误，也有可能在这里说得不明不白模糊不清，这之后会慢慢优化补上。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5" target="_blank" rel="noopener">HTTP头字段 - 维基百科，自由的百科全书</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">HTTP 协议入门 - 阮一峰的网络日志</a></li>
<li><a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">OSI模型 - 维基百科，自由的百科全书</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">超文本传输协议 - 维基百科，自由的百科全书</a> </li>
</ul>
]]></content>
      
        <categories>
            
            <category> http </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack 之常见的见招拆招]]></title>
      <url>https://lucius0.github.io/2019/03/17/archivers/about-webpack/</url>
      <content type="html"><![CDATA[<p>前端的发展，大致的发展路线可以看黄玄的<a href="https://huangxuan.me/js-module-7day/#/" target="_blank" rel="noopener">JavaScript 模块化七日谈</a>。从最初的全局污染式的注入到ES6模块化，打包工具的不断迭代替换。主要的原因都是因为前端发展越来越复杂庞大所导致。</p>
<p>本篇文章主要是来谈谈 webpack 在我们平时的开发工作中起到什么作用，以及我们该如何灵活的应用它来成为我们的利器。大多数情况下我不会说明怎么使用，因为这样会导致篇幅太多不容易阅览，所以具体的配置还是得自己阅览官方文档。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>如今的前端百花齐放，不再像以前那样直接操作 DOM 然后压缩扔到服务器上去。看似没啥问题，但是不断的重复劳动力导致开发效率低下。</p>
<p>React、Vue、Angular2。Typescript、Flow、CoffeeScript、ES6。SASS、LESS。分别为<strong>前端框架</strong>、<strong>JS超集/JS新标准</strong>、<strong>CSS预处理器</strong>。以上的这些无法直接的在浏览器上跑，都需要转换为 ES5/CSS 才可以。（注：ES6 可以在支持 ES6 语法的浏览器上运行，如Chrome）</p>
<h2 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h2><p>无论什么构建工具，它们做的内容都是大同小异：代码转换、文件优化、代码分割、模块合并、自动刷新、代码校验、自动分布。历史上的构建工具都是基于Node.js开发的。有<strong>Grunt</strong>、<strong>Gulp</strong>、<strong>Fis3</strong>、<strong>Rollup</strong>、<strong>Browserify</strong> 等等。更具体可以参考<a href="https://segmentfault.com/a/1190000017183743" target="_blank" rel="noopener">前端构建：3类13种热门工具的选型参考</a></p>
<p>至于它们之间优劣性以及为什么选择webpack在网上有很多相关的资料可以参考，在这里就不再赘述了。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// js 执行入口文件</span></span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 将所有依赖的模块合并输出到一个 bundle.js 文件</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    <span class="comment">// 将输出文件都放到 dist 目录下</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>执行 <code>webpack --config webpack.config.js</code>，则会在<code>dist</code>文件夹生成<code>bundle.js</code>文件，这就是最基本的 webpack 配置。更多配置查看官网<a href="https://webpack.js.org/concepts" target="_blank" rel="noopener">webpack</a></p>
<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>Loader 主要是用于将模块代码转换为可在浏览器运行的代码。可以理解为翻译机。如将 Less 转换为 CSS，Typescript 转换为 Javascript 等。</p>
<h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><p>Plugin 主要是扩展 webpack 的功能，增强 webpack 的灵活性。如<code>extract-text-webpack-plugin</code>，可以将包中的文本提取到单独的文件中，从<code>bundle.js</code>提取 css 到单独的文件出来等。</p>
<h3 id="DevServer"><a href="#DevServer" class="headerlink" title="DevServer"></a>DevServer</h3><p><code>webpack-dev-server</code>，可以帮我们解决上面没提到但是在开发中遇到的痛点。</p>
<ul>
<li>提供 HTTP 服务而不是使用本地文件预览；</li>
<li>监听文件的变化并自动刷新网页，做到实时预览:</li>
<li>支持 Source Map，以方便调试。</li>
</ul>
<h2 id="见招拆招"><a href="#见招拆招" class="headerlink" title="见招拆招"></a>见招拆招</h2><p>交待完 webpack 的基础也是重要的功能之后，我们从工作中开始，见招拆招，也就是说我们平时需要做什么，webpack 能帮我们做什么。</p>
<h3 id="见招-ES6"><a href="#见招-ES6" class="headerlink" title="见招 - ES6"></a>见招 - ES6</h3><p>ES6的出现引入了新的语法，提高了开发效率。但是目前仍有很多浏览器对其标准支持不全。所以我们需要将其转换为 ES5 以及对新 API 打 polyfill。才能正常的使用。</p>
<h3 id="拆招-Babel"><a href="#拆招-Babel" class="headerlink" title="拆招 - Babel"></a>拆招 - Babel</h3><p>Babel 是 JS 编译器，主要功能就是将 ES6 转为 ES5，详看 <a href="https://babeljs.io/docs/en/" target="_blank" rel="noopener">What is Babel? · Babel</a>。在项目根目录创建<code>.babelrc</code>。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  // plugins 告诉 Babel 要使用哪些插件，这些插件可以控制如何转换代码 。 </span><br><span class="line">  "plugins": [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"transform-runtime"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"polyfill"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  // presets属性告诉 Babel要转换的源码使用了哪些新的语法特性，一个 Presets对一组新语法的特性提供了支持，多个 Presets 可以叠加。</span><br><span class="line">  "presets": [</span><br><span class="line">    [</span><br><span class="line">      // 除此之外，还有往上的标准如 ES2016等 以及 Env，其中 Env 包含ES 标准的最新特性</span><br><span class="line">      <span class="string">"es2015"</span>, </span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"modules"</span>: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    // 社区提出却还未入标准的新特性，有stage0 - stage4，被纳入的可能性依次增加</span><br><span class="line">    "stage-2",</span><br><span class="line">    // 特定应用场景语法特性</span><br><span class="line">    <span class="string">"react"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在了解 Babel 后，下一步就是配置 Webpack。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [<span class="string">'babel-loader'</span>],</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="见招-Typescript"><a href="#见招-Typescript" class="headerlink" title="见招 - Typescript"></a>见招 - Typescript</h3><p><strong>Type</strong>script 是 Javascript <strong>类型</strong>的超集，它可以编译成纯 Javascript。<a href="https://www.tslang.cn/" target="_blank" rel="noopener">TypeScript—JavaScript的超集</a></p>
<h3 id="拆招-Typescript"><a href="#拆招-Typescript" class="headerlink" title="拆招 - Typescript"></a>拆招 - Typescript</h3><p>Typescript 官方提供了能将 Typescript 转换成 JavaScript 的编译器。执行安装<code>npm i -g typescript</code>，然后在根目录新建配置编译选项<code>tsconfig.json</code>。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    "module": "commonjs", // 编译出的代码采用的模块规范</span><br><span class="line">    "target": "es5", // 编译出的代码采用 ES 的哪个版本</span><br><span class="line">    "sourceMap": true // 输出 Source Map 以方便调试</span><br><span class="line">  &#125;,</span><br><span class="line">  "exclude": [</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>配置完<code>tsconfig.json</code>，我们就可以配置 Webpack。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.ts'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        loader: <span class="string">'ts-loader'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<h3 id="见招-SASS-LESS"><a href="#见招-SASS-LESS" class="headerlink" title="见招 - SASS/LESS"></a>见招 - SASS/LESS</h3><p>SASS 和 LESS 都是 CSS 的预处理器，它们都是可以方便的管理代码，抽离样式公共部分，通过逻辑来书写更加灵活的样式代码，从而提高效率。关于他们更多的信息可以<a href="https://sass-lang.com/" target="_blank" rel="noopener">Sass: Syntactically Awesome Style Sheets</a>和<a href="http://lesscss.org/" target="_blank" rel="noopener">Getting started | Less.js</a>去查看。</p>
<h3 id="拆招-SASS-LOADER-LESS-LOADER"><a href="#拆招-SASS-LOADER-LESS-LOADER" class="headerlink" title="拆招 - SASS-LOADER / LESS-LOADER"></a>拆招 - SASS-LOADER / LESS-LOADER</h3><p>安装完<code>sass-loader</code>或<code>less-loader</code>之后，直接配置Webpack。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss/</span>, 或 /\.less/</span><br><span class="line">        use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>] 或 [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>其处理流程如下：<br>1、通过 loader 将 sass/less 文件转换为 css 代码，再将其交给 <code>css-loader</code> 处理；<br>2、<code>css-loader</code> 会找出 css 代码中导入语句如<code>@import</code>或<code>url()</code>，同时支持 css modules、压缩 css 等功能，然后交给 <code>style-loader</code> 处理；<br>3、<code>style-loader</code> 会讲 css 转换为字符串注入 js 代码中。</p>
<hr>
<h3 id="见招-React"><a href="#见招-React" class="headerlink" title="见招 - React"></a>见招 - React</h3><p>React 中主要是因为其代码中使用了 JSX 和 Class 特性，因此我们需要将其转换为浏览器能识别的 JavaScript 代码。</p>
<h3 id="拆招-Babel-1"><a href="#拆招-Babel-1" class="headerlink" title="拆招 - Babel"></a>拆招 - Babel</h3><p>我们需要依赖 <code>babel-preset-react</code>来完成语法上的转换。所以我们还需要配置<code>.babelrc</code>，加入 React Preset。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"presets": [</span><br><span class="line">  <span class="string">"react"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<p>其实这样就可以了。但是我们有时候会使用 React + Typescript 组合来提高我们开发效率。在上面我们提到 Typescript 的开发，我们这次来修改其配置文件<code>tsconfig.json</code>。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span> // 开启 JSX，支持 React</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至于 Webpack 的配置，其实不用太多的改动，只需要支持下<code>/\.tsx/</code>后缀文件就行。</p>
<hr>
<h3 id="见招-Vue"><a href="#见招-Vue" class="headerlink" title="见招 - Vue"></a>见招 - Vue</h3><p>Vue 没有 React 那样会内置专属语法，但它和 React 一样，都推崇组件化和由数据驱动的思想。话不多说，直接拆招。</p>
<h3 id="拆招-vue-loader"><a href="#拆招-vue-loader" class="headerlink" title="拆招 - vue-loader"></a>拆招 - vue-loader</h3><p>解析 vue 主要需要 <code>vue-loader</code> 和 <code>vue-template-compiler</code>。<code>vue-loader</code> 主要事用来解析和转换<code>.vue</code>文件，提取出其中的逻辑代码、样式代码以及 html 模板 template，再分别将它们交给对应的 Loader 去处理，如 template 则就是由 <code>vue-template-compiler</code> 去处理的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// webpack</span></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      use: [<span class="string">'vue-loader'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同样，假如我们需要 Vue + Typescript 组合呢？从 Vue 2.5 开始，就提供了对TS 的支持。配置 <code>tsconfig.json</code>。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    "module": "es2015", // 用于使 Tree Shaking 优化生效</span><br><span class="line">    "moduleResolution": "node",</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>除此之外还需要在声明文件 <code>vue-shims.d.ts</code> 定义 vue 类型：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> "*.vue" &#123;</span><br><span class="line">  <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改 webpack 配置文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">      loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        appendTsSuffixTo: [<span class="regexp">/\.vue$/</span>],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<p>到这里为止，我们就可以通过 webpack 来进行我们的开发工作了。但是实际项目中有很多的痛点，例如代码检查，热更新，CDN发布等。我们不可能每次都手动的来配置，这样太繁琐太浪费时间了。接下来我们通过 webpack 来优化我们的开发体验。</p>
<h3 id="见招-监听更新"><a href="#见招-监听更新" class="headerlink" title="见招 - 监听更新"></a>见招 - 监听更新</h3><p>当我们在开发阶段，肯定会在期间不断地修改源码。但是我们不可能每一次修改就手动编译然后刷新页面，这明显浪费我们的时间跟精力。于是就有了自动化监听更新，原理就是监听本地源码包括样式，一旦发生变化时，就会自动构建然后刷新浏览器。</p>
<h3 id="拆招-webpack"><a href="#拆招-webpack" class="headerlink" title="拆招 - webpack"></a>拆招 - webpack</h3><p>通过 webpack 开启监听模式，一般有两种方式：</p>
<ul>
<li>配置<code>webpack.config.js</code>设置<code>watch: true</code>;</li>
<li>执行 webpack 时，可以带上参数，如 <code>webpack --watch</code></li>
</ul>
<p>它的工作原理就是通过 <code>aggregateTimeout</code> 设置等待时间，到该时间时就会去检查编辑后的文件的最后编辑时间从而达到监听的目的。</p>
<h3 id="见招-自动刷新浏览器"><a href="#见招-自动刷新浏览器" class="headerlink" title="见招 - 自动刷新浏览器"></a>见招 - 自动刷新浏览器</h3><p>在上面我们提到了<strong>监听更新</strong>，但是更新完后浏览器应该有所表现，不然手动刷新浏览器的行为也是蛮愚蠢的。所以当我们监听到的文件一旦发生了修改，浏览器就要主动去刷新浏览器。</p>
<h3 id="拆招-webpack-dev-server"><a href="#拆招-webpack-dev-server" class="headerlink" title="拆招 - webpack-dev-server"></a>拆招 - webpack-dev-server</h3><p>我们使用 <code>webpack-dev-server</code> 模块启动 webpack 模块时，webpack 模块的监听模式默认会被开启。webpack 模块会在文件发生变化时通知 <code>webpack-dev-server</code> 模块。</p>
<p>通过 <code>webpack-dev-server</code> 启动时，有以下两种方式可以实现自动刷新：</p>
<ul>
<li><code>webpack-dev-server</code>(默认)：向要开发的网页注入代理客户端代码，通过代理客户端去刷新整个页面；</li>
<li><code>webpack-dev-server --inline false</code>：将要开发的网页装进一个 iframe 中，通过刷新 iframe 去看到最新效果。</li>
</ul>
<h3 id="见招-模块热替换"><a href="#见招-模块热替换" class="headerlink" title="见招 - 模块热替换"></a>见招 - 模块热替换</h3><p>在上面提到的更新后刷新是会刷新整个页面，这样的体验不好。所以 <code>webpack-dev-server</code> 还支持模块热替换，就是在不刷新整个页面的情况下只替换修改的文件，这样不但快捷，而且数据也不会丢失。</p>
<h3 id="拆招-webpack-dev-server-1"><a href="#拆招-webpack-dev-server-1" class="headerlink" title="拆招 - webpack-dev-server"></a>拆招 - webpack-dev-server</h3><p>实现模块热替换也有两种方式：</p>
<ul>
<li>webpack-dev-server-hot</li>
<li>HotModuleReplacementPlugin(推荐)</li>
</ul>
<h3 id="见招-检查代码"><a href="#见招-检查代码" class="headerlink" title="见招 - 检查代码"></a>见招 - 检查代码</h3><p>当我们的项目越来越庞大时，特别是多人协作开发，会导致一个问题就是代码会有多种风格导致可读性下降。因此我们需要在提交之前执行自动化检查，让项目成员强制遵守统一的代码风格，同时也可以分析出潜在的问题。</p>
<h3 id="拆招-lint-及-husky"><a href="#拆招-lint-及-husky" class="headerlink" title="拆招 - **lint 及 husky"></a>拆招 - **lint 及 husky</h3><p><code>**lint</code> 这里指的是针对不同的语言使用不同的 <code>lint</code> 检查工具。</p>
<ul>
<li><code>eslint</code>：用来检查 JavaScript，配置 <code>.eslintrc</code> 来添加规则，再结合 <code>eslint-loader</code> 就可以通过 webpack 来执行代码检查；</li>
<li><code>tslint</code>：用来检查 TypeScript，配置 <code>tslint.json</code> 来添加规则，再结合 <code>tslint-loader</code> 就可以通过 webpack 来执行代码检查；</li>
<li><code>stylelint</code>：用来检查样式文件，如 SCSS、Less等，配置<code>.stylelintrc</code> 来添加规则，再结合 <code>stylelint-webpack-plugin</code> 就可以通过 webpack 来执行代码检查；</li>
</ul>
<p>上面通过整合到 webpack 存在个问题，就是在开发过程中构建速度会变慢很多。所以我们建议在提交的时候通过 Git Hook 来执行我们的代码检查，如<strong>husky</strong>，<strong>husky</strong> 会通过 Npm Script Hook 自动配置好 Git Hook，然后我们只需要在 <code>package.json</code> 添加 <code>script</code> 脚本，其中 <code>precommit</code> 和 <code>prepush</code> 只需要其中一个就好了，配置如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    // 在执行 git commit 前会执行的脚本 </span><br><span class="line">    "precommit": "npm run lint",</span><br><span class="line">    //在执行 git push 前会执行的脚本 </span><br><span class="line">    "prepush": "lint",</span><br><span class="line">    // 调用 eslint、stylelint 等工具检查代码</span><br><span class="line">    "lint": "eslint &amp;&amp; stylelint"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>除了上面这些，我们可能还需要需要以下的配置：<br><strong>加载图片</strong></p>
<pre><code>- `file-loader`：将 JavaScript 和 CSS 中导入图片的路径替换成正确的路径，并同时将其输出到对应位置；
- `url-loader`：将文件的内容经过 base 64 编码后注入JavaScript 或 CSS 中。
</code></pre><p><strong>加载SVG</strong></p>
<pre><code>- `raw-loader`：可以将文本文件内容读取出来，注入到 JavaScript 或 CSS 中。
- `svg-inline-loader`：跟 `raw-loader` 一样，但是增加了对 svg 压缩的功能。
</code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="区分环境"><a href="#区分环境" class="headerlink" title="区分环境"></a>区分环境</h3><p>区分环境的好处我就不多解释了，这里主要是用到了 webpack自带(当代码出现<code>process</code>时，webpack会将其模块打包进去)的 <code>process</code> 模块。使用方法也很简单 <code>process.env.NODE_ENV</code> 就行了。</p>
<h3 id="压缩代码"><a href="#压缩代码" class="headerlink" title="压缩代码"></a>压缩代码</h3><p>上线后我们除了GZIP对其文件进行压缩，我们还需要对文件本身进行压缩进而减少网络传输流量和提高网页加载速度。这里的文件压缩就是用到了<code>UglifyJsPlugin</code> 插件。详情配置可以查看官方，需要注意的是，记得区分环境如 <code>source-map</code> 等。</p>
<h3 id="压缩-CSS"><a href="#压缩-CSS" class="headerlink" title="压缩 CSS"></a>压缩 CSS</h3><p>压缩 CSS，用一款基于 <code>PostCSS</code> 的压缩工具 <code>cssnano</code>。<code>css-loader</code>已经内置其模块了，只需要开启 <code>css-loader</code> 的 <code>minimize</code> 选项即可。</p>
<h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><p>这里不是说要通过前端来做 CDN 加速的事，而是当我们上传静态资源时，静态资源需要通过 CDN 服务提供的 URL 地址去访问，而我们要做的，就是在生成页面时，将我们的<strong>静态资源替换为CDN的地址</strong>。<br>我们所说的静态资源主要分为两种，入口 HTML 文件以及 JS、CSS、图片等静态资源。前者的处理方法是存在服务器而非CDN，并且服务器不对其做缓存处理，这样就可以保证每次请求的入口文件都是最新的；后者则会上传 CDN 服务上，做缓存处理。<br>简单的来说就是入口 HTML 文件是在每一次请求都是最新的，那么其请求的 静态资源的 Hash 值也有可能会更新，那么只要发生变换，则去请求新的静态资源就行了。</p>
<p>那么问题来了，怎么做才能每次打包新的 HTML 文件时，其请求的静态资源的也会跟随变化呢？webpack 及其插件提供了其功能，分别为：</p>
<ul>
<li><code>output.publicPath</code> 中设置 Javascript 的地址；</li>
<li><code>css-loader.publicPath</code> 中设置被 CSS 导入的资源的地址；</li>
<li><code>Webplugin.stylePublicPath</code> 中设置 CSS 文件的地址。</li>
</ul>
<h3 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h3><p>webpack 有个专门用于提取多个 Chunk 中公共部分的插件 <code>CommonsChunkPlugin</code>，用法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ComrnonsChunkPlugin = <span class="built_in">require</span>(<span class="string">'webpack/lib/optimize/CommonsChunkPlugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CommonsChunkPlugin(&#123;</span><br><span class="line">  <span class="comment">// 从 a、b chunk 提取共同的代码模块</span></span><br><span class="line">  chunks: [<span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">  <span class="comment">// 将其封装到 common 新 chunk</span></span><br><span class="line">  name: <span class="string">'common'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>在这里只针对 Vue、React 来说。目前比较流行的做法就是在路由上做处理。</p>
<p><strong>Vue</strong><br><code>vue-router</code> 通过 vue 的<a href="https://cn.vuejs.org/v2/guide/components-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">动态组件 &amp; 异步组件 — Vue.js</a>，就可以实现按需加载了，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">resolve =&gt; <span class="built_in">require</span>([<span class="string">'./Test'</span>], resolve)</span><br></pre></td></tr></table></figure></p>
<p><strong>React</strong><br><code>react-router</code> 还可以配合 <code>react-loadable</code>，实现路由按需加载，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncLoad</span> (<span class="params">loader</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Loadable(&#123; loader &#125;);</span><br><span class="line">&#125;</span><br><span class="line">asyncLoad(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Test'</span>));</span><br></pre></td></tr></table></figure></p>
<h3 id="分析报告"><a href="#分析报告" class="headerlink" title="分析报告"></a>分析报告</h3><p>webpack 自带分析功能<code>webpack --profile --json &gt; stats.json</code>，也可以安装可视化分析工具<code>webpack-bundle-analyzer</code>更加直观的观察项目的情况。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本篇的大多内容是阅览完《深入浅出 webpack》后的总结。之所以想总结，是因为 webpack 的配置给人的感觉就是配置麻烦很琐碎。因此就有了这个想法，对知识点的查漏补缺，同时也是一次对知识点的梳理。这篇文章目前主要梳理常用的一些配置、插件以及优化。当然这也只是冰山一角，更多的还需要自己去查阅官方文档，不同版本也会有不同的差异性。之后遇到问题，我也会持续记录下来。</p>
]]></content>
      
        <categories>
            
            <category> webpack </category>
            
        </categories>
        
        
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[脚手架的略知一二]]></title>
      <url>https://lucius0.github.io/2018/07/18/archivers/about-scaffold/</url>
      <content type="html"><![CDATA[<h2 id="什么是脚手架？"><a href="#什么是脚手架？" class="headerlink" title="什么是脚手架？"></a>什么是脚手架？</h2><p>当我们建造房子的时候，工地上会先搭个架子，然后工人们会在这个的基础上添砖加瓦，直到房屋成型。那么我们程序也是这样的道理，会在我们开发之前有一套相对成熟且适用的架子(配置项、技术栈)，然后我们会在这基础上直接产出需求功能，而需求重复的造架子。脚手架在我们开发项目中也是极其重要，能够提高我们的开发。<br><img src="/images/qiniu/180718232750.png" alt=""></p>
<p>那么我们开发中有用到哪些脚手架呢？有<code>vue-cli</code>、<code>create-react-app</code>、<code>yeoman</code>等。</p>
<h2 id="Yeoman"><a href="#Yeoman" class="headerlink" title="Yeoman"></a>Yeoman</h2><p><a href="http://yeoman.io/" target="_blank" rel="noopener">yeoman</a>较真来讲更应该称为脚手架框架，因为它不能直接创建项目文件，而是提供了一套完整的开发API，可以通过这些API来灵活地来制造符合你需求的脚手架方案。</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>我们先来创建一个<code>yeoman</code>脚手架生成器，<strong>注意文件夹的名字得为generator-开头，如generator-vuecli、generator-createapp</strong>。</p>
<ul>
<li><code>npm install --global yo</code> </li>
<li><code>mkdir generator-testcli &amp;&amp; cd generator-testcli</code></li>
<li><code>npm init</code>，生成<code>package.json</code>需要主要几点：<ul>
<li>name 属性必须带有前缀 <code>generator-</code></li>
<li>keywords 属性必须含有 <code>yeoman-generator</code>；</li>
</ul>
</li>
<li><code>npm install --save yeoman-generator</code></li>
</ul>
<p><code>yeoman-generator</code>：yeoman 会根据用户选择的 <code>generator</code> 下载的本地，其中 <code>generator</code> 指的是一套具有模板的项目。<br>在官方例子中<code>generator-fountain-webapp</code>就是其中的一个<code>generator</code>。当然你也可以选择你要的<code>generator</code>，如输入命令行<code>yo</code>，会有选项<code>Install a generator</code>让你选择你想要安装的<code>generator</code>。</p>
<p><strong>提示：</strong>假如安装过程报<code>Error: EACCES, permission denied</code>错误，请使用<code>sudo npm</code>进行安装。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><code>yeoman</code>支持两种不同的目录结构：./ 和 ./generators。即：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|---- package.json</span><br><span class="line">|---- generators/</span><br><span class="line">    |---- app/</span><br><span class="line">        |---- index.js</span><br><span class="line">    |---- router/</span><br><span class="line">        |---- index.js</span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line">|---- package.json</span><br><span class="line">|---- app/</span><br><span class="line">    |---- index.js</span><br><span class="line">|---- router/</span><br><span class="line">    |---- index.js</span><br></pre></td></tr></table></figure></p>
<h3 id="重写构造函数"><a href="#重写构造函数" class="headerlink" title="重写构造函数"></a>重写构造函数</h3><p>某些生成器方法只能在构造函数内部调用。这些特殊方法可能会执行诸如设置重要状态控件之类的操作，并且可能无法在构造函数之外运行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Generator = <span class="built_in">require</span>(<span class="string">'yeoman-generator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">  <span class="comment">// The name `constructor` is important here</span></span><br><span class="line">  <span class="keyword">constructor</span>(args, opts) &#123;</span><br><span class="line">    <span class="comment">// Calling the super constructor is important so our generator is correctly set up</span></span><br><span class="line">    <span class="keyword">super</span>(args, opts);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next, add your custom code</span></span><br><span class="line">    <span class="keyword">this</span>.option(<span class="string">'babel'</span>); <span class="comment">// This method adds support for a `--babel` flag</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="添加功能函数"><a href="#添加功能函数" class="headerlink" title="添加功能函数"></a>添加功能函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">method1() &#123;</span><br><span class="line">  <span class="keyword">this</span>.log(<span class="string">'method 1 just ran'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">method2() &#123;</span><br><span class="line">  <span class="keyword">this</span>.log(<span class="string">'method 2 just ran'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完整代码为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Generator = <span class="built_in">require</span>(<span class="string">'yeoman-generator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">  <span class="comment">// The name `constructor` is important here</span></span><br><span class="line">  <span class="keyword">constructor</span>(args, opts) &#123;</span><br><span class="line">    <span class="comment">// Calling the super constructor is important so our generator is correctly set up</span></span><br><span class="line">    <span class="keyword">super</span>(args, opts);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next, add your custom code</span></span><br><span class="line">    <span class="keyword">this</span>.option(<span class="string">'babel'</span>); <span class="comment">// This method adds support for a `--babel` flag</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  method1() &#123;</span><br><span class="line">    <span class="keyword">this</span>.log(<span class="string">'method 1 just ran'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  method2() &#123;</span><br><span class="line">    <span class="keyword">this</span>.log(<span class="string">'method 2 just ran'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="npm绑定全局"><a href="#npm绑定全局" class="headerlink" title="npm绑定全局"></a>npm绑定全局</h3><p>使用 npm 创建一个node全局模块，并且连接到本地。在脚手架项目根目录下<code>generator-name/</code>，输入<code>npm link</code>。</p>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p><code>yo testcli</code>，会出现如下图信息。<br><img src="/images/qiniu/180718233135.png" alt=""></p>
<p>到这里一个小小的官方demo已经执行完成了，更多的可以查看<a href="http://yeoman.io/authoring/index.html" target="_blank" rel="noopener">Writing Your Own Yeoman Generator | Yeoman</a></p>
<h2 id="自定义前端脚手架"><a href="#自定义前端脚手架" class="headerlink" title="自定义前端脚手架"></a>自定义前端脚手架</h2><p>刚才在上问已经说了，<code>yeoman</code>实际上更像是一个脚手架框架，可以通过它来打造各种利器(脚手架)。那我们现在就从头开始学习下怎么打造一个利器。</p>
<p>我们现在就来简单的做一个小栗子，执行<code>init</code>时会拉取GitHub上面的代码。<strong>上面已经说过了，实际上就是相当于clone一个基础项目到本地。</strong></p>
<h3 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h3><p>我们把这个项目称为<strong>messi</strong>吧。</p>
<ul>
<li><code>mkdir messi &amp;&amp; cd messi</code>；</li>
<li><code>npm init</code>(此处的<code>package.json</code>就没有<code>yeoman</code>那样需要name跟key有前缀的要求了)；</li>
<li><code>npm install --save chalk co co-prompt commander</code><ul>
<li><a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a>：能在terminal中显示自定义字符串颜色的插件；</li>
<li><a href="https://github.com/tj/co" target="_blank" rel="noopener">co</a>：异步流程控制工具；</li>
<li><a href="https://github.com/tj/co-prompt" target="_blank" rel="noopener">co-prompt</a>：不但可以提供提示信息，还可以分步骤输入你想要的参数和选项；</li>
<li><a href="https://github.com/tj/commander.js/" target="_blank" rel="noopener">commander</a>：有效的组织terminal的输入；</li>
</ul>
</li>
</ul>
<h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><p>我们在根目录创建<code>/bin</code>文件夹，然后在该文件夹创建的文件<code>messi.js</code>。即<code>bin/messi.js</code>为我们这个项目的入口文件。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bin/messi.js</span></span><br><span class="line"><span class="comment">// 执行环境能够支持ES6</span></span><br><span class="line"><span class="meta">#!/usr/bin/env node --harmony</span></span><br><span class="line"><span class="meta">'use strict'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'../package'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 定义当前版本</span></span><br><span class="line">program.version(pkg.version);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义使用方法</span></span><br><span class="line"><span class="comment">// Usage: messi [options] [command] -&gt; </span></span><br><span class="line"><span class="comment">// Usage: messi &lt;command&gt;</span></span><br><span class="line"><span class="comment">// 区别就是可选到必选</span></span><br><span class="line">program</span><br><span class="line">  .usage(<span class="string">'&lt;command&gt;'</span>);</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!program.args.length) &#123;</span><br><span class="line">  program.help();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="挂载全局"><a href="#挂载全局" class="headerlink" title="挂载全局"></a>挂载全局</h3><p>其实这样就可以看到效果了。我们现在在<code>package.json</code>添加以下配置，表示全局钩子<code>messi</code>的加载文件是<code>bin/messi.js</code>。</p>
<p>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="regexp">/usr/</span>local/bin/messi -&gt; <span class="regexp">/usr/</span>local/lib/node_modules/messi/bin/messi.js</span><br><span class="line">&gt;&gt;&gt; <span class="regexp">/usr/</span>local/lib/node_modules/messi -&gt; <span class="regexp">/Users/</span>xxx/Documents/study/messi</span><br></pre></td></tr></table></figure></p>
<p><strong>package.json</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"bin": &#123;</span><br><span class="line">  "messi": "bin/messi.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在根目录执行<code>npm link</code>或<code>sudo npm link</code>。打开另一个terminal标签执行<code>messi</code>命令。<br><img src="/images/qiniu/180718233522.png" alt=""></p>
<h3 id="添加init模版"><a href="#添加init模版" class="headerlink" title="添加init模版"></a>添加init模版</h3><p>我们在根目录创建<code>command</code>文件夹，然后在其文件夹创建我们的主角<code>init.js</code>。目的是想通过<code>init</code>从远端仓库拉取一个项目模板。</p>
<p>我们需要在<code>messi.js</code>添加了相对应的命令行。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// messi.js</span></span><br><span class="line"><span class="keyword">const</span> init = <span class="built_in">require</span>(<span class="string">'../init'</span>);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'init'</span>)</span><br><span class="line">  .description(<span class="string">'创建新项目'</span>)</span><br><span class="line">  .alias(<span class="string">'i'</span>)</span><br><span class="line">  .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123; init(); &#125;);</span><br></pre></td></tr></table></figure></p>
<p>然后我们需要在<code>init.js</code>添加逻辑代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init.js</span></span><br><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> prompt = <span class="built_in">require</span>(<span class="string">'co-prompt'</span>);</span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.white(<span class="string">'init...'</span>));</span><br><span class="line"></span><br><span class="line">  co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pull = <span class="keyword">yield</span> prompt(<span class="string">'你是否想要拉取scaffold-cli项目? y/n '</span>);</span><br><span class="line">    pull = pull.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span> (pull === <span class="string">'n'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.red(<span class="string">'已经成功退出!'</span>));</span><br><span class="line">      process.exit()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pull === <span class="string">'y'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> projectName = <span class="keyword">yield</span> prompt(<span class="string">'项目名称：'</span>);</span><br><span class="line">      <span class="keyword">const</span> gitCmd = <span class="string">`git clone git@github.com:Lucius0/scaffold-cli.git <span class="subst">$&#123;projectName&#125;</span> &amp;&amp; cd <span class="subst">$&#123;projectName&#125;</span> &amp;&amp; git checkout master`</span>;</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">console</span>.log(chalk.white(<span class="string">'开始拉取...'</span>));</span><br><span class="line"></span><br><span class="line">      exec(gitCmd, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">          process.exit();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.green(<span class="string">'拉取成功!'</span>));</span><br><span class="line">        process.exit()</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>到此刻为止，我们基本上的一个小demo已经完成了。关于<code>exec</code>方法，可以阅览<a href="https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback" target="_blank" rel="noopener">exec</a>。</p>
<h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|__ bin</span><br><span class="line">  |__ messi.js</span><br><span class="line">|__ command</span><br><span class="line">  |__ init.js</span><br><span class="line">|__ node_modules</span><br><span class="line">|__ package.json</span><br></pre></td></tr></table></figure>
<p>emmm。是不是感觉有些缺少什么？是的，我们如何能做到跟<code>vue-cli</code>一样优秀，可以自主选择自己想要的选择(有点拗口)。<br><img src="/images/qiniu/180718233622.png" alt=""></p>
<h3 id="inquirer"><a href="#inquirer" class="headerlink" title="inquirer"></a>inquirer</h3><blockquote>
<p>常用交互式命令行用户界面的集合。</p>
</blockquote>
<p>具体的官方文档可以看 -&gt; <a href="https://github.com/SBoudrias/Inquirer.js#readme" target="_blank" rel="noopener">inquirer</a>，我们来简单的展示一下使用方法。首先<code>npm install --save inquirer</code>，然后在<code>messi.js</code>添加我们跟<code>init.js</code>功能一样的指令<code>init2</code>以及在<code>init2.js</code>添加相对应的逻辑。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// messi.js</span></span><br><span class="line"><span class="keyword">const</span> init2 = <span class="built_in">require</span>(<span class="string">'../command/init2'</span>);</span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'init2'</span>)</span><br><span class="line">  .description(<span class="string">'创建新项目'</span>)</span><br><span class="line">  .alias(<span class="string">'i2'</span>)</span><br><span class="line">  .action(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    init2();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// init2.js</span></span><br><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>);</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>);</span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.white(<span class="string">'init...'</span>));</span><br><span class="line"></span><br><span class="line">  co(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> promps = [];</span><br><span class="line"></span><br><span class="line">    promps.push(&#123;</span><br><span class="line">      type: <span class="string">'list'</span>,</span><br><span class="line">      name: <span class="string">'pullProject'</span>,</span><br><span class="line">      message: <span class="string">'你是否想要拉取scaffold-cli项目?'</span>,</span><br><span class="line">      choices: [&#123;</span><br><span class="line">        name: <span class="string">'Yes'</span>,</span><br><span class="line">        value: <span class="string">'y'</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'No'</span>,</span><br><span class="line">        value: <span class="string">'n'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    inquirer.prompt(promps).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(answers);</span><br><span class="line">      <span class="keyword">const</span> wanna = answers[<span class="string">'pullProject'</span>].toLowerCase();</span><br><span class="line">      <span class="keyword">if</span> (wanna === <span class="string">'n'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.red(<span class="string">'已经成功退出!'</span>));</span><br><span class="line">        process.exit()</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wanna === <span class="string">'y'</span>) &#123;</span><br><span class="line">        promps = [];</span><br><span class="line"></span><br><span class="line">        promps.push(&#123;</span><br><span class="line">          type: <span class="string">'input'</span>,</span><br><span class="line">          name: <span class="string">'nameProject'</span>,</span><br><span class="line">          message: <span class="string">'项目名称：'</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        inquirer.prompt(promps).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> projectName = answers[<span class="string">'nameProject'</span>];</span><br><span class="line">          <span class="keyword">const</span> gitCmd = <span class="string">`git clone git@github.com:Lucius0/scaffold-cli.git <span class="subst">$&#123;projectName&#125;</span> &amp;&amp; cd <span class="subst">$&#123;projectName&#125;</span> &amp;&amp; git checkout master`</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(chalk.white(<span class="string">'开始拉取...'</span>));</span><br><span class="line">          exec(gitCmd, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(error);</span><br><span class="line">              process.exit();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(chalk.green(<span class="string">'拉取成功!'</span>));</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`cd <span class="subst">$&#123;projectName&#125;</span>`</span>);</span><br><span class="line">            exec(<span class="string">`cd <span class="subst">$&#123;projectName&#125;</span>`</span>, () =&gt; &#123;</span><br><span class="line">              process.exit();</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>接下来一步就是构建项目<code>npm link</code>，然后执行<code>messi ini2</code>。<br><img src="/images/qiniu/180718234154.png" alt=""></p>
<p>好了。。。。。。睡觉。。。。。。。</p>
]]></content>
      
        <categories>
            
            <category> js </category>
            
            <category> node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> js </tag>
            
            <tag> node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitLab CI / CD 入门配置]]></title>
      <url>https://lucius0.github.io/2018/07/09/archivers/gitlab-ci-cd-getting-started-guide/</url>
      <content type="html"><![CDATA[<h2 id="什么是CI"><a href="#什么是CI" class="headerlink" title="什么是CI"></a>什么是CI</h2><p><strong>CI(Continuous integration)</strong>，持续集成。即开发成员在工作时不断的集成工作分支到主分支。这样做不仅可以提供开发效率，还可以自动测试和构建工作，快速迭代的同时还可以及时发现错误，一举多得。</p>
<h2 id="什么是CD"><a href="#什么是CD" class="headerlink" title="什么是CD"></a>什么是CD</h2><p><strong>CD(Continuous Deployment)</strong>，持续交付。简单的说就是频繁地将集成后的产品交付给质量团队或用户进行下一步的评审，通过了则到生产阶段。</p>
<h2 id="GitLab-CI-CD"><a href="#GitLab-CI-CD" class="headerlink" title="GitLab CI / CD"></a>GitLab CI / CD</h2><p>GitLab CI / CD，就是在GitLab上集成了CI / CD系统。假如你的项目中有<code>.gitlab-ci.yml</code>文件，那么当开发成员在<code>commit</code>或者<code>merge request</code>之后，会按照<code>.gitlab-ci.yml</code>所配置的内容来执行，完成CI / CD操作。</p>
<p>Runner有很多执行平台，例如<code>SSH、Docker、Kubernetes</code>。这里我们先用SHELL来执行一下。(注意：这里操作系统统一为macOS)</p>
<h3 id="SHELL安装GitLab-Runner"><a href="#SHELL安装GitLab-Runner" class="headerlink" title="SHELL安装GitLab Runner"></a>SHELL安装GitLab Runner</h3><p>具体流程：<a href="https://docs.gitlab.com/runner/install/osx.html#installation" target="_blank" rel="noopener">https://docs.gitlab.com/runner/install/osx.html#installation</a></p>
<ol>
<li><p>下载</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sudo curl --output /usr/<span class="built_in">local</span>/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋予权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sudo chmod +x /usr/<span class="built_in">local</span>/bin/gitlab-runner</span><br></pre></td></tr></table></figure>
</li>
<li><p>注册<br>其中在注册步骤中，需要你输入URL和Token。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">&gt;&gt;&gt; xxx-url</span><br><span class="line">&gt;&gt;&gt; Please enter the gitlab-ci token <span class="keyword">for</span> this runner</span><br><span class="line">&gt;&gt;&gt; xxx-token</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>那么我们需要在项目中找到对应的信息。如下图中的4则对应xxx-url、5则对应xxx-token。<br><img src="/images/qiniu/18712982379123.png" alt="1"><br>之后的步骤按照链接的执行，需要注意的是<strong>executor</strong>我们选<strong>shell</strong>。</p>
<ol>
<li><p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; gitlab-runner install</span><br><span class="line">&gt;&gt;&gt; gitlab-runner start</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sudo gitlab-runner run</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Docker-安装-GitLab-Runner"><a href="#Docker-安装-GitLab-Runner" class="headerlink" title="Docker 安装 GitLab Runner"></a>Docker 安装 GitLab Runner</h3><p><a href="https://segmentfault.com/a/1190000012279248" target="_blank" rel="noopener">参考链接</a>，这里就不赘述了。</p>
<h2 id="基础概念介绍"><a href="#基础概念介绍" class="headerlink" title="基础概念介绍"></a>基础概念介绍</h2><h3 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h3><p>每一次commit或者MR都会执行一次pipeline构建任务，当然里面有很多阶段需要执行，如测试、编译等。</p>
<h3 id="Stage"><a href="#Stage" class="headerlink" title="Stage"></a>Stage</h3><p>这里就是上文提到的阶段，每一次pipeline有很多个stage，这些stage都是会按上到下执行，而且只有当前stage执行完毕之后才能执行下一个stage，否则就会报错。</p>
<h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>job 为GitLab CI / CD的最小独立运行单位，它表示在指定stage下执行的任务工作，当然加入其中一个job执行失败，同样的该stage也会算是执行失败。但是不同的一点是，相同stage里面可以有很多不同的job，这些job是并行执行的。</p>
<h3 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h3><p>介绍完基础概念，那么就是我们项目中需要的文件<code>.gitlab-ci.yml</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 定义在每个job之前运行的命令</span><br><span class="line">before_script:</span><br><span class="line">  - yarn</span><br><span class="line"> </span><br><span class="line">// 定义构建阶段，stages</span><br><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - test</span><br><span class="line">  - deploy</span><br><span class="line"> </span><br><span class="line">// job1</span><br><span class="line">lint:</span><br><span class="line">  stage: test</span><br><span class="line">  script:</span><br><span class="line">    - echo "Running lint"</span><br><span class="line">    - yarn lint</span><br><span class="line"> </span><br><span class="line">// job2</span><br><span class="line">deploy_staging:</span><br><span class="line">  stage: deploy</span><br><span class="line">  script:</span><br><span class="line">    - echo "Deploy to staging environment"</span><br><span class="line">    - yarn build:stag</span><br><span class="line">    - yarn pub:stag</span><br><span class="line">  // 定义git分支，并为其创建job。这里表示只有release分支才会执行该job</span><br><span class="line">  only:</span><br><span class="line">    - release</span><br></pre></td></tr></table></figure></p>
<p>更多的可以查看<a href="https://fennay.github.io/gitlab-ci-cn/gitlab-ci-yaml.html" target="_blank" rel="noopener">gitlab-ci-yaml</a>。</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>1、在某些时候，我们的runner假如是在本地运行的时候，会针对项目做一些环境变量的处理，例如<code>CONFIG_ENV=UAT</code>、<code>CONFIG_ENV=DEV</code>分别表示两个不同的环境。那么我们也可以通过<code>.gitlab-cli.yml</code>的配置让runner在不同的环境变量下执行。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 修改 job2</span><br><span class="line">deploy_dev:</span><br><span class="line">  stage: deploy</span><br><span class="line">  script:</span><br><span class="line">    - echo "Deploy to dev environment"</span><br><span class="line">    // @1 表示设置runner执行的环境变量xxx_key为$xxx_key，会下面说明。</span><br><span class="line">    - export xxx_key=$xxx_key</span><br><span class="line">    // 表示设置runner执行的环境变量CONFIG_ENV为DEV</span><br><span class="line">    - export CONFIG_ENV=DEV</span><br><span class="line">    - yarn build:dev</span><br><span class="line">    - yarn pub:dev</span><br><span class="line">  only:</span><br><span class="line">    - release</span><br></pre></td></tr></table></figure></p>
<p>其中，xxx_key为下图中的4，$xxx_key为下图中的5。例如xxx_key = 123456<br><img src="/images/qiniu/123823987231981-1.png" alt="1-1"></p>
<p>2、在有些情况下，我们在runner执行任务时，会想npmjs拉去npm包，但是因为墙的问题，往往会因为超时而拉取失败，这时候我们可以通过<code>.gitlab-cli.yml</code>的配置来指定runner来执行。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 修改 job2</span><br><span class="line">deploy_dev:</span><br><span class="line">  // 新增tags属性，表示指定tag为xxx的runner</span><br><span class="line">  tags:</span><br><span class="line">    - xxx</span><br></pre></td></tr></table></figure></p>
<p>xxx在哪里可以找到呢？下图中的<code>inernal</code>，<code>k8s</code>，<code>shared</code>，<code>test</code>即为该runner的tag。<br><img src="/images/qiniu/987128731219231-2.png" alt="1-2"></p>
<p>3、在补充2中说到，假如要翻墙时我们可以设置指定的runner来执行我们的任务，当然我们也可以在环境变量中设置(不)代理环境的配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 修改 job2</span><br><span class="line">deploy_dev:</span><br><span class="line">  // 新增环境代理(表示该job在执行runner时的环境下代理)</span><br><span class="line">  - export http_proxy=http://xx.xx.xx.xx:xxxx</span><br><span class="line">  - export https_proxy=http://xx.xx.xx.xx:xxxx</span><br><span class="line">  // 新增环境不代理(表示当ip或域名为以下变量时，不执行代理)</span><br><span class="line">  - export no_proxy=123.123.123.123:1234,noproxy.com</span><br></pre></td></tr></table></figure></p>
<h2 id="Q-amp-A-持续更新"><a href="#Q-amp-A-持续更新" class="headerlink" title="Q &amp; A(持续更新)"></a>Q &amp; A(持续更新)</h2><p>Q：为什么<code>yarn: not found</code>？<br>A：镜像里面找不到yarn，可以通过配置image为其指定镜像。</p>
<p>Q：<code>error An unexpected error occurred: &quot;https://registry.npmjs.org/xxx: ETIMEDOUT&quot;.</code><br>A：npm访问不了，得翻墙。（可以通过个人电脑运行specific runner亦或找运维配置一个shared runner），详情可以参考补充2。</p>
<p>Q：一直重复<code>Waiting for pod xxx to be running, status is Pending...</code>。<br>A：有时候受网络的影响，可能会拉取失败。这时候先自己<strong>尝试多几次</strong>，假如再不行，再看👆的解决方案。</p>
<p>Q：起了本地服务之后，在gitlab上运行时，一直<code>pending</code>状态并且处于<code>stuck</code>。如下图：<br><img src="/images/qiniu/180720221541.png" alt=""><br>A：假如你成功起了本地服务之后，提示无法找到runner，那么你可以给配置<code>.gitlab-ci.yml</code>添加你本地添加的tag</p>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WebRTC-初探]]></title>
      <url>https://lucius0.github.io/2018/04/13/archivers/webrtc-01/</url>
      <content type="html"><![CDATA[<h2 id="什么是WebRTC"><a href="#什么是WebRTC" class="headerlink" title="什么是WebRTC"></a>什么是WebRTC</h2><p>WebRTC(Web Real-Time Communication)，顾名思义，是基于Web技术上实现实时通信技术。例如QQ视频，Facetime，但不需要在浏览器上安装任何的插件，根据其标准以及HTML5标签和JavaScript语法就可以实现这些功能。</p>
<p>WebRTC最大的特点有两点：浏览器与浏览器之间的对等连接，即一个浏览器通过标准协议与另一个浏览器进行实时通信；另一个特点是WebRTC提供了信令服务器，该服务器在浏览器和对等连接另一端之间提供信令通道，关于这一点下面会讲到。目前是1.0版本，之后可能会有更多的特性。</p>
<p>一个最简单的WebRTC结构，但实际上情况比这个复杂更多，例如多个浏览器互相建立对等连接的对方会话。</p>
<p><img src="/images/qiniu/180413121213.png" alt=""></p>
<h2 id="如何使用WebRTC"><a href="#如何使用WebRTC" class="headerlink" title="如何使用WebRTC"></a>如何使用WebRTC</h2><p>建立一个简单的WebRTC会话，只需要以下四个步骤：<br>1）获取本地媒体。<code>window.navigator.getUserMedia</code>，获取单个本地<code>MediaStream</code>；<br>2）在浏览器和对等端(其他浏览器)建立连接，简单来说就是不通过服务器通信，而是浏览器与浏览器之间的媒体连接。<code>new RTCPeerConnection(c)</code>，简单的说明下c为ICE打洞通过NAT设备和防火墙需要的配置信息；<br>3）将媒体和数据通道关联至此连接，<code>new RTCSessionDescription</code>；<br>4）交换会话描述；<br>5）关闭连接。<br>结构图如以下左边图，若添加了信令通道，则如右边图。</p>
<p><img src="/images/qiniu/180413121314.png" alt=""></p>
<p>这里简单说下3）跟4）。当建立完连接之后，本地以及远程都会通过<code>RTCPeerConnection</code>交换<code>RTCSessionDescription</code>，而<code>RTCSessionDescription</code>的意义是为了两端之间协商如何建立媒体信息，例如编解码器。交换完毕之后，即可建立媒体或数据会话。此时，两个浏览器开始打洞(穿透NAT设备和防火墙)。打洞完毕之后，即可开始协商<code>RTCSessionDescription</code>交换的信息。为了确保安全，交换密钥。最后开始媒体或数据通话。</p>
<p>WebRTC的体系结构如下，有必要提醒的是，浏览器A发起的1、2和浏览器B发起的3、4是不排先后的。而且实际上的体系结构是根据需求改变的，而并非以下图的一成不变。</p>
<p><img src="/images/qiniu/180413121430.png" alt=""></p>
<ol>
<li>浏览器A向服务器请求网页；</li>
<li>服务器返回携带WebRTC应用的网页给浏览器A；</li>
<li>浏览器B向服务器请求网页；</li>
<li>服务器返回携带同A一样内容的网页给浏览器B；</li>
<li>浏览器A想与浏览器B通信，于是通过服务器，将描述对象(offer, 提议)发送给服务器；</li>
<li>服务器将浏览器A发送过来的描述对象发送给浏览器B；</li>
<li>浏览器B接收到提议之后，也将自己的描述对象(answer, 应答)发送到服务器；</li>
<li>服务器接收到浏览器B的描述对象之后发送给浏览器A；</li>
<li>浏览器A接收到浏览器B的应答之后，两端开始打洞，根据两边的描述对象来确定最佳的访问方式；</li>
<li>打完洞之后，就开始协商密钥以确保之后的会话安全；</li>
<li>两端开始互相传输视频，语音以及数据。</li>
</ol>
<h2 id="目前兼容情况-2018-04"><a href="#目前兼容情况-2018-04" class="headerlink" title="目前兼容情况(2018-04)"></a>目前兼容情况(2018-04)</h2><p><img src="/images/qiniu/180413121633.png" alt=""></p>
<h2 id="本地媒体"><a href="#本地媒体" class="headerlink" title="本地媒体"></a>本地媒体</h2><p>MediaStreamTrack，是WebRTC的基本单位，可以是自源的原始媒体，也可以是浏览器转换过的。例如，MediaStreamTrack可以是摄像头以高分辨率录制的低采样率版本。MediaStreamTrack中的readyState有<code>new、live、ended</code>，可通过<code>enabled=false</code>禁用。而MediaStream是MediaStreamTrack的集合，目前通过<code>window.navigator.getUserMedia</code>获取的或使用对等连接接收的流，未来说不定还有其他的获取方式。<a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack" target="_blank" rel="noopener">MediaStreamTrack - Web APIs | MDN</a></p>
<p>下面有简单的代码示例下如何获取本地媒体。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">navigator.getUserMedia(&#123;<span class="string">'audio'</span>: <span class="literal">true</span>, <span class="string">'video'</span>: <span class="literal">true</span>&#125;, gotUserMedia, didntGetUserMedia);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">didntGetUserMedia</span>(<span class="params">s</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gotUserMedia</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> videoEle = <span class="built_in">document</span>.getElementById(<span class="string">'videoEle'</span>);</span><br><span class="line">  videoEle.srcObject = s; <span class="comment">// 目前还无法使用Blob</span></span><br><span class="line">  <span class="built_in">console</span>.log(s.getVideoTracks(), s.getAudioTracks());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 约束，是指浏览器会将媒体流尽可能的满足约束的条件，如宽高，比例，帧率等约束条件。</span></span><br><span class="line">  <span class="keyword">var</span> constraints = &#123;</span><br><span class="line">    width: &#123;<span class="attr">min</span>: <span class="number">640</span>, <span class="attr">ideal</span>: <span class="number">1280</span>&#125;,</span><br><span class="line">    height: &#123;<span class="attr">min</span>: <span class="number">480</span>, <span class="attr">ideal</span>: <span class="number">720</span>&#125;,</span><br><span class="line">    advanced: [</span><br><span class="line">      &#123;<span class="attr">width</span>: <span class="number">1920</span>, <span class="attr">height</span>: <span class="number">1280</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">aspectRatio</span>: <span class="number">1.333</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> t = (s.getVideoTracks())[<span class="number">0</span>];</span><br><span class="line">    t.applyConstraints(constraints).then(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// t.getSettings：返回所有设定的约束值</span></span><br><span class="line">      <span class="comment">// t.getConstraints：返回当前约束的值</span></span><br><span class="line">      <span class="built_in">console</span>.log(t.getSettings(), t.getConstraints());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而<code>s.getTracks()</code>的信息如下图。<br><img src="/images/qiniu/180413121930.png" alt=""></p>
<p>通过以上代码可以看出<code>gotUserMedia</code>可以正常的返回音视频轨道，但是还无法正常的播放。</p>
<h2 id="信令-signaling"><a href="#信令-signaling" class="headerlink" title="信令(signaling)"></a>信令(signaling)</h2><p>其作用主要体现以下几点：</p>
<ul>
<li>协商媒体功能和设置(必备)；</li>
<li>标识和验证会话参与者的身份；</li>
<li>控制媒体会话、指示进度、更改会话和终止会话；</li>
<li>当会话双方同时尝试建立或更改会话时，实施双占用分解。</li>
</ul>
<h3 id="媒体协商"><a href="#媒体协商" class="headerlink" title="媒体协商"></a>媒体协商</h3><p>因为必备，所以来简单说明下。这一步主要的工作是在参与对等连接的两个浏览器之间交换SDP(Session Description Protocol)对象中包含的信息，例如音视频数据、编解码器以及有关的带宽信息等。此外还用于交换<strong>候选地址</strong>，便于ICE打洞。<strong>候选地址</strong>表示浏览器可从中接收潜在的媒体数据包的IP地址和UDP端口。另外还必须在信令通道交换<strong>密钥</strong>。只有交换完候选地址才能开始ICE打洞，之后才能建立对等连接。</p>
<h3 id="信令传输"><a href="#信令传输" class="headerlink" title="信令传输"></a>信令传输</h3><p>常见的信令传输有：HTTP轮询、WebSocket和数据通道。由于前两种比较常见，我们就只说说数据通道的原理。</p>
<p>在最初建立数据通道时，是无法传输WebRTC信令的，因为数据通道也需要信令才能建立，所以一开始，是通过HTTP或者WebSocket来传输最开始的信令的。当两个浏览器之间建立数据通道之后，它会提供直接的低延迟连接，这时候就可以处理来往的信令了。</p>
<p><img src="/images/qiniu/180413122141.png" alt=""></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">funciton createSignalingChannel(msgHandler) &#123;</span><br><span class="line">  <span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(<span class="string">'wss://192.168.0.1:49152/'</span>);</span><br><span class="line">  socket.addEventListener(<span class="string">'message'</span>, msgHandler, <span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">'send'</span>: socket.send&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打开WebSocket</span></span><br><span class="line">signalingChannel = createSignalingChannel(onMessage);</span><br><span class="line"><span class="comment">// 通过WebSocket发送消息</span></span><br><span class="line">signalingChannel.send(message);</span><br><span class="line"><span class="comment">// 处理通过WebSocket传入的消息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMessage</span>(<span class="params">msg</span>) </span>&#123; <span class="comment">//... &#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="对等媒体"><a href="#对等媒体" class="headerlink" title="对等媒体"></a>对等媒体</h2><p>对等媒体，指的就是两个浏览器之间能够直接建立视频、音频和数据连接，能够节约带宽。但必须采用特殊的协议，如STUN服务器和TURN服务器。不然会受到NAT和防火墙的拦截。</p>
<h3 id="对等媒体和网络地址转换-NAT"><a href="#对等媒体和网络地址转换-NAT" class="headerlink" title="对等媒体和网络地址转换(NAT)"></a>对等媒体和网络地址转换(NAT)</h3><p>所谓NAT，简单来说就是将私有地址转换成公有地址的一种方式，例如内网IP:内网端口 -&gt; 外网IP:外网端口。常见设备如路由器。所以说，每个处于NAT的网络都是独立的，网络与网络之间的访问都是通过NAT来访问的。</p>
<p>在上面说过对等媒体会受到NAT的影响，就是因为端对端的连接不像我们常用的C/S结构，能够遍历NAT，因此我们需要穿过它，如STUN服务器和TURN服务器。</p>
<h2 id="对等连接和提议-应答协商"><a href="#对等连接和提议-应答协商" class="headerlink" title="对等连接和提议/应答协商"></a>对等连接和提议/应答协商</h2><h3 id="对等连接"><a href="#对等连接" class="headerlink" title="对等连接"></a>对等连接</h3><p><code>RTCPeerConnection</code>是WebRTC用于两端之间建立媒体与数据连接的API。其API是绑定在JSEP(JavaScript Session Establishment Protocol)协议上来进行媒体协商的，而且该JSEP基本上由浏览器处理。<strong>值得说明的一点，WebRTC的对等连接并非是TCP意义上的连接。而是一组路径建立进程(ICE)以及一个可确定应建立哪些媒体和数据路径的协商器。</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pc = <span class="keyword">new</span> RTCPeerConnection(&#123;</span><br><span class="line">      iceServers: [</span><br><span class="line">          &#123;<span class="string">'url'</span>: <span class="string">'stun:stun.l.google.com:19302'</span>&#125;,</span><br><span class="line">          &#123;<span class="string">'url'</span>: <span class="string">'turn:user@turn.myserver.com'</span>, </span><br><span class="line">           <span class="string">'credential'</span>: <span class="string">'test'</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.navigator.getUserMedia(&#123;<span class="string">'audio'</span>: <span class="literal">true</span>, <span class="string">'video'</span>: <span class="literal">true</span>&#125;, successCB, failureCB);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">successCB</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 添加本地媒体流到对接的浏览器端，但是此操作不会产生任何媒体流。只是为了告诉浏览器，本地浏览器与对等端浏览器就该MediaSteam进行协商</span></span><br><span class="line">    pc.addStream(stream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="提议-应答协商"><a href="#提议-应答协商" class="headerlink" title="提议/应答协商"></a>提议/应答协商</h3><p>提议/应答的主要意义就是确保双方都知道要发送和接收的媒体类型，以及如何正确解码和处理媒体流。例如：要使用的一个或多个解码器、解码器的参数、用于媒体加密和身份验证的密钥信息等。这样双方就可以达成一致，方便后续工作的处理。<code>RTCSessionDescription</code>，来表示提议和应答。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将自己的会话描述告诉本地浏览器</span></span><br><span class="line">pc.setLocalDescription(mySessionDescription);</span><br><span class="line"><span class="comment">// 将对等端的会话描述告诉本地浏览器</span></span><br><span class="line">pc.setRemoteDescription(remoteSessionDescription);</span><br></pre></td></tr></table></figure>
<p>上面的伪代码存在一个问题，那就是一端只能是接收方，而另一端只能是发送方。这样的话，万一发送方跟接收方的角色对调则会发生问题。好在WebRTC提供了如下的解决方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建提议</span></span><br><span class="line">pc.createOffer(gotOffer, didntGetOffer);</span><br><span class="line"><span class="comment">// 创建应答</span></span><br><span class="line">pc.createAnswer(gotOffer, didntGetOffer);</span><br></pre></td></tr></table></figure>
<p>整个过程的伪代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A浏览器</span></span><br><span class="line"><span class="comment">// 访问，其中key为房间号</span></span><br><span class="line">GET <span class="string">'/connect?key=123456'</span></span><br><span class="line"><span class="comment">// 假如访问成功，那么就进入等待状态</span></span><br><span class="line"><span class="keyword">if</span>(readyState === DONE &amp;&amp; status === <span class="number">200</span>) &#123;</span><br><span class="line">  <span class="comment">// 等待另一端的访问</span></span><br><span class="line">  Waiting</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取本地媒体</span></span><br><span class="line">navigator.getUserMedia(&#123;<span class="string">'video'</span>: <span class="literal">true</span>, <span class="string">'audio'</span>: <span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// B浏览器同样访问服务器并且加入房间号为123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A浏览器收到消息，并建立对等连接</span></span><br><span class="line">connect()</span><br><span class="line"><span class="comment">// config用到的是Google的公用的stun服务器，为候选地址，是ICE打洞通过NAT设备和防火墙需要的配置信息。</span></span><br><span class="line">config = [&#123;<span class="string">"url"</span>:<span class="string">"stun:stun.l.google.com:19302"</span>&#125;]</span><br><span class="line">pc = <span class="keyword">new</span> RTCPeerConnection(&#123;<span class="attr">iceServers</span>:config&#125;);</span><br><span class="line">pc.onicecandidate = onIceCandidate;</span><br><span class="line">pc.onaddstream = onRemoteStreamAdded;</span><br><span class="line">pc.onremovestream = onRemoteStreamRemoved;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A浏览器发起提议 或 B浏览器发起提议。我们这里默认使用A浏览器发起。</span></span><br><span class="line">pc.createOffer(gotDescription, doNothing, constraints);</span><br><span class="line">gotDescription(sDesc) -&gt; pc.setLocalDescription(sDesc);</span><br><span class="line"><span class="comment">// 通过服务器将信息发送给B浏览器</span></span><br><span class="line">seng(sDesc);</span><br><span class="line"><span class="comment">// A浏览器触发onicecandidate事件，即如果我们浏览器有候选配置，则将其发送给对等端</span></span><br><span class="line">onicecandidate(e) -&gt; send(&#123;<span class="attr">type</span>: <span class="string">'candidate'</span>, <span class="attr">candidate</span>: e. candidate&#125;)</span><br><span class="line"><span class="comment">// B浏览器收到offer，之后将收到的返回给A浏览器</span></span><br><span class="line">pc.setRemoteDescription(<span class="keyword">new</span> RTCSessionDescription(msg));</span><br><span class="line"><span class="comment">// B浏览器创建answer，将接收到的描述添加到本地</span></span><br><span class="line">pc.createAnswer(gotDescription, doNothing, constraints);</span><br><span class="line">gotDescription(sDesc) -&gt; pc.setLocalDescription(sDesc);</span><br><span class="line"><span class="comment">// A浏览器收到B浏览器发送的候选配置</span></span><br><span class="line">pc.addIceCandidate(<span class="keyword">new</span> RTCIceCandidate(&#123;<span class="attr">sdpMLineIndex</span>:msg. candidate.mlineindex, <span class="attr">candidate</span>:msg. candidate.candidate&#125;));</span><br><span class="line"><span class="comment">// ps: 以上的提议 / 应答的过程会经历几次。</span></span><br><span class="line"><span class="comment">// 这时候你不但能看到自己帅气的脸，还可以看到对方美丽的脸。</span></span><br></pre></td></tr></table></figure>
<h2 id="数据通道"><a href="#数据通道" class="headerlink" title="数据通道"></a>数据通道</h2><p>WebRTC数据通道是在浏览器之间，绕过服务器来直接交换数据的。在此之前我们都是借助WebSocket或HTTP来满足需求。而现在，我们可以通过WebRTC数据通道来传输，而且数据通道支持流量大、延迟低的连接。</p>
<p>WebRTC数据通道是基于WebSocket建立的，也具有send方法和onmessage方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">pc = <span class="keyword">new</span> RTCPeerConnection();</span><br><span class="line"><span class="comment">// dc-1为标签，创建完之后会导致对端收到RTCDataChannelEvent</span></span><br><span class="line">dc = pc.createDataChannel(<span class="string">'dc-1'</span>); </span><br><span class="line"><span class="comment">// 可在对端处理该事件</span></span><br><span class="line">pc = <span class="keyword">new</span> RTCPeerConnection();</span><br><span class="line">pc.ondatachannel = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  dc = e.channel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// send / onmessage</span></span><br><span class="line">dc.send(<span class="string">'string type msg'</span>);</span><br><span class="line">dc.send(<span class="keyword">new</span> Blob([<span class="string">'blob message'</span>], &#123;<span class="attr">type</span>: <span class="string">'text/plain'</span>&#125;));</span><br><span class="line">dc.send(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">32</span>));</span><br><span class="line">dc.send(<span class="keyword">new</span> uInt8Array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]));</span><br><span class="line">dc.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received message'</span> + e.data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .createDataChannel()，第二个参数为控制配置</span></span><br><span class="line"><span class="comment">// 限制通道在第一次数据传输失败时重新传输数据的次数</span></span><br><span class="line">pc.createDataChannel(<span class="string">''</span>, &#123;<span class="attr">maxRetransimits</span>:<span class="number">3</span>&#125;);</span><br><span class="line"><span class="comment">// 限制通道允许重试操作持续的毫秒数</span></span><br><span class="line">pc.createDataChannel(<span class="string">''</span>, &#123;<span class="attr">maxRetransimitTime</span>:<span class="number">30</span>&#125;);</span><br><span class="line"><span class="comment">// ps：maxRetransimits、maxRetransimitTime是互斥的</span></span><br><span class="line"><span class="comment">// 不止这两个配置</span></span><br><span class="line"><span class="comment">// order: 接收顺序，false则为接收顺序混乱也无所谓</span></span><br></pre></td></tr></table></figure></p>
<p>更多例子：<a href="https://webrtc.github.io/samples/" target="_blank" rel="noopener">WebRTC samples</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://w3c.github.io/webrtc-pc/" target="_blank" rel="noopener">WebRTC 1.0</a></li>
<li>《WebRTC 权威指南》</li>
<li><a href="https://blog.coding.net/blog/getting-started-with-webrtc" target="_blank" rel="noopener">WebRTC 的前世今生 - Coding 博客</a></li>
<li><a href="https://www.html5rocks.com/zh/tutorials/getusermedia/intro/" target="_blank" rel="noopener">Capturing Audio &amp; Video in HTML5</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
            <tag> webrtc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-MSE实践篇]]></title>
      <url>https://lucius0.github.io/2018/03/11/archivers/media-study-011/</url>
      <content type="html"><![CDATA[<p>上一篇大致讲解了MSE的原理，不能光说不练。我们就来简单的来个例子。当然没有flv的解析，也没有fmp4的转换。主要是MPEG-DASH + MSE的操练。</p>
<p>首先先抓来一个mp4的视频，我们就命名为<code>mse.mp4</code>吧。然后这里涉及到了切片的操作。其实切片跟HLS的原理是一样的，目的就是把一个长视频切成一小段一小段的，然后再去请求它们。这样能达到当需要切换码率的时候，可以通过请求不同的片段来达到目的。</p>
<h2 id="MPEG-DASH-概念"><a href="#MPEG-DASH-概念" class="headerlink" title="MPEG-DASH 概念"></a>MPEG-DASH 概念</h2><p>MPEG-DASH， Dynamic Adaptive Streaming over HTTP。本身就是Adaptive Streaming的一种，与HLS是同样的作用。在MPEG-DASH规范中的MPD描述文件，主要是用来描述媒体文件的mimeType、codecs、segment信息等，MPD实际上就是一个xml文件。</p>
<h2 id="切片方式"><a href="#切片方式" class="headerlink" title="切片方式"></a>切片方式</h2><p>所以我们通过<code>MP4Box</code>对mp4进行MPEG-DASH切片。参考<a href="https://bitmovin.com/mp4box-dash-content-generation-x264/" target="_blank" rel="noopener">MPEG-DASH Content Generation with MP4Box and x264 - Bitmovin</a></p>
<p>MPEG-DASH切片一般有以下两种方式：</p>
<ul>
<li>Adaptive Streaming：跟上面其实意思差不多，也是片段化操作，但是这个会事先把片段都切分好。也就是说我请求的是下一个片段而不是根据时间戳来请求。</li>
<li>Progress Download：通过<strong>http Range header</strong>，获取每一个片段的range值，从而不断的拉取range的媒体流。举个例子，媒体文件就一个，但是我不断的请求媒体文件的播放起始时间戳之间的媒体流，从而达到片段化的操作。</li>
</ul>
<h3 id="Adaptive-Streaming"><a href="#Adaptive-Streaming" class="headerlink" title="Adaptive Streaming"></a>Adaptive Streaming</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; MP4Box -dash 5000 -rap -segment-name output/segment_ mse.mp4</span><br><span class="line"></span><br><span class="line">// _dash.mpd: 将其改为xml或者直接在编辑器打开，就会发现里面放着的是整个媒体文件的信息以及每一段segment的位置。</span><br><span class="line">// *_init.mp4: 初始的mp4文件，相当于视频头，在这个头文件中包含了完整的视频元信息(ftyp + moov)，具体的可以使用 MP4Box &lt;init video&gt; -info 查看。</span><br><span class="line">// *.m4s: 即上面提到的Segments文件，每个m4s仅包含媒体信息 (moof + mdat)，而播放器是不能直接播放这个文件的，需要用支持DASH的播放器从init文件开始播放。</span><br><span class="line">// -rap: random access point</span><br><span class="line">// -segment-name: 生成的切片名字前缀，如segment_1.m4s</span><br></pre></td></tr></table></figure>
<p>1、将mpd文件改为xml文件，并获取里面我们想要的信息，如mimeType，codecs。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'get'</span>, baseUrl + <span class="string">'mse_dash.xml'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.responseType = <span class="string">'text'</span>;</span><br><span class="line">xhr.send();</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === xhr.DONE) &#123;</span><br><span class="line">    <span class="keyword">var</span> output = xhr.response;</span><br><span class="line">    <span class="keyword">var</span> parser = <span class="keyword">new</span> DOMParser();</span><br><span class="line">    <span class="keyword">var</span> xmlData = parser.parseFromString(tempoutput, <span class="string">"text/xml"</span>, <span class="number">0</span>);</span><br><span class="line">    getFileType(xmlData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileType</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> file = data.querySelectorAll(<span class="string">'Representation'</span>)[<span class="number">0</span>];</span><br><span class="line">    mimeType = file.getAttribute(<span class="string">'mimeType'</span>);</span><br><span class="line">    codecs = file.getAttribute(<span class="string">'codecs'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>2、实例化Media Source对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.MediaSource) &#123;</span><br><span class="line">  <span class="keyword">var</span> mediaSource = <span class="keyword">new</span> <span class="built_in">window</span>.MediaSource();</span><br><span class="line">  <span class="keyword">var</span> url = URL.createObjectURL(mediaSource);</span><br><span class="line">  videoEle = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'video'</span>)[<span class="number">0</span>];</span><br><span class="line">  videoEle.src = url;</span><br><span class="line"></span><br><span class="line">  mediaSource.addEventListener(<span class="string">'sourceopen'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> tempStr = mimeType + <span class="string">'; codecs="'</span> +  codecs + <span class="string">'"'</span>;</span><br><span class="line">      <span class="keyword">if</span> (MediaSource.isTypeSupported(tempStr)) &#123;</span><br><span class="line">        videoSource = mediaSource.addSourceBuffer(tempStr);</span><br><span class="line">        videoSource.addEventListener(<span class="string">'updateend'</span>, nextSegment);</span><br><span class="line">        initVideo();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'source open error'</span>, e.message);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  mediaSource.addEventListener(<span class="string">'sourceclose'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'media source close...'</span>, e.message);</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  mediaSource.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'media source error...'</span>, e.message);</span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3、加载媒体文件初始化片段的信息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getSeg(baseUrl + <span class="string">'output/segment_init.mp4'</span>, appendToBuffer);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> playPromise = videoEle.play();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里做下promise的处理，参考这里https://developers.google.com/web/updates/2017/06/play-request-was-interrupted</span></span><br><span class="line">  <span class="keyword">if</span> (playPromise !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    playPromise.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'play promise then'</span>);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'play promise error'</span>, err);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSeg</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'GET'</span>, url);</span><br><span class="line">  xhr.responseType = <span class="string">'arraybuffer'</span>;</span><br><span class="line"></span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status != <span class="number">200</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    callback(xhr.response);</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendToBuffer</span>(<span class="params">videoChunk</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (videoChunk) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      videoSource.appendBuffer(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(videoChunk));</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(e.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4、不断的添加media segment<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextSegment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ++index;</span><br><span class="line">  <span class="keyword">if</span> (index &lt;= maxChunksIndex) &#123;</span><br><span class="line">    <span class="keyword">var</span> url = baseUrl + <span class="string">'output/segment_'</span> + index + <span class="string">'.m4s'</span>;</span><br><span class="line">    getSeg(url, appendToBuffer);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    videoSource.removeEventListener(<span class="string">'updateend'</span>, nextSegment);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Progress-Download"><a href="#Progress-Download" class="headerlink" title="Progress Download"></a>Progress Download</h3><p>跟之前一样，先进行媒体流的片段切片。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里不再解释</span></span><br><span class="line">&gt;&gt;&gt; MP4Box -dash 10000 -frag 10000 -rap mse.mp4 </span><br><span class="line"><span class="comment"># 假如上面的操作没有出现MPD文件，那么需要通过ffmpeg转为fmp4文件，再用MP4Box切片</span></span><br></pre></td></tr></table></figure></p>
<p>Progress Download跟Adaptive Streaming不同的是，它需要计算每一个segment duration。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> time = (size * <span class="number">8</span>) / bitrate</span><br><span class="line"><span class="comment">// 即在MPD获取相对应的信息之后，代码如下</span></span><br><span class="line"><span class="keyword">var</span> ranges = mediaRange.split(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">var</span> time = (ranges[<span class="number">1</span>] - ranges[<span class="number">0</span>]) * <span class="number">8</span> / bandwidth;</span><br></pre></td></tr></table></figure></p>
<p>实际上，关于Progress Download，可以移步到<a href="https://msdn.microsoft.com/zh-cn/library/dn551368.aspx" target="_blank" rel="noopener">构建简单的 MPEG-DASH 流媒体播放器</a>，这里只是对其做最简单的演示。<br>1、第一步其实跟上面的差不多，只是多了几个字段，bandwidth(做segment duration计算)，segments(每一个segment字段)，initRange(就是上面的<code>segment_init.mp4</code>)。<br>2、实例化Media Source对象。一样的操作，熟悉的味道。<br>3、加载媒体文件初始化片段的信息。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没给出的代码基本跟上面一致</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getSeg(initRange, baseFile, appendToBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSeg</span>(<span class="params">range, url, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.open(<span class="string">'get'</span>, url);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">'Range'</span>, <span class="string">'bytes='</span> + range);</span><br><span class="line">  xhr.responseType = <span class="string">'arraybuffer'</span>;</span><br><span class="line">  xhr.send();</span><br><span class="line">      </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    xhr.addEventListener(<span class="string">'readystatechange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === xhr.DONE) &#123;</span><br><span class="line">        callback(xhr.response);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4、不断的添加media segment<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextSegment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (index &lt;= segments.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> segment = segments[index];</span><br><span class="line">    <span class="keyword">var</span> range = segment.getAttribute(<span class="string">'mediaRange'</span>);</span><br><span class="line">    getSeg(range, baseFile, appendToBuffer);</span><br><span class="line">    ++index;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    videoSource.removeEventListener(<span class="string">'updateend'</span>, nextSegment);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>到这里为止，已经讲得差不多了。基本上从flv.js的解析再到mse的实践，关于媒体的学习先告一段落。但是这一部分本身就是概念很多坑很多，若以后有什么可以分享或者什么坑，我都会到此记录下来。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://www.mediaentertainmentinfo.com/2015/04/6-concept-series-what-is-the-difference-between-progressive-download-rtmp-streaming-and-adaptive-streaming.html/#Diff-Progressive-RTMP-AdaptiveStreaming" target="_blank" rel="noopener">Difference between Progressive download, RTMP RTSP Streaming and Adaptive Steaming | Media &amp; Entertainment Industry Trends, Technology and Research</a></li>
<li><a href="https://hacks.mozilla.org/2015/07/streaming-media-on-demand-with-media-source-extensions/" target="_blank" rel="noopener">https://hacks.mozilla.org/2015/07/streaming-media-on-demand-with-media-source-extensions/</a></li>
<li><a href="https://bitmovin.com/mp4box-dash-content-generation-x264/" target="_blank" rel="noopener">MPEG-DASH Content Generation with MP4Box and x264 - Bitmovin</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-MSE基础原理篇]]></title>
      <url>https://lucius0.github.io/2018/02/23/archivers/media-study-010/</url>
      <content type="html"><![CDATA[<p>MSE 可以说W3C最重要的一个媒体源扩展标准。假如没有 MSE 的存在，那么什么hls.js，flv.js，dash.js都是空谈。因为 MSE，才使得媒体流能根据需要进行更精准地控制。这是w3c的文档<a href="https://w3c.github.io/media-source/" target="_blank" rel="noopener">Media Source Extensions™</a>。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>早先的媒体流还是一直依赖Flash，通过rtmp或者http-flv等协议进行视频串流，再到 Flash 播放器。</p>
<p>然而有了MSE(media souce extensions)之后，情况就不一样了。我们可以引用<code>MediaSource</code>对象，你可以把它看成一个容器，一个引用多个<code>SourceBuffer</code>对象的容器。那么在上面我们就提到，MSE能够根据需要对媒体流进行更精准的控制，例如根据网络情况进行切码率不同的媒体流，或是根据内存占用情况释放之前播放过的媒体流等等。</p>
<p>这是一张Media Source的结构图：<br><img src="/images/qiniu/180223211232.png" alt=""></p>
<h2 id="MediaSource"><a href="#MediaSource" class="headerlink" title="MediaSource"></a>MediaSource</h2><p><code>Media Source Extensions API</code>的<code>MediaSource</code>接口表示<code>HTMLMediaElement</code>对象的媒体数据源。<code>MediaSource</code>对象可以附加到<code>HTMLMediaElement</code>在客户端中播放。</p>
<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum ReadyState &#123;</span><br><span class="line">    <span class="comment">// 说明媒体源当前未附加到媒体元素(HTMLMediaElement)</span></span><br><span class="line">    <span class="string">"closed"</span>,</span><br><span class="line">    <span class="comment">// 媒体源已被媒体元素打开，并准备好将数据添加到sourceBuffers中的SourceBuffer对象</span></span><br><span class="line">    <span class="string">"open"</span>,</span><br><span class="line">    <span class="comment">// 媒体源仍然附加到一个媒体元素上，但endOfStream()已被调用</span></span><br><span class="line">    <span class="string">"ended"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enum EndOfStreamError &#123;</span><br><span class="line">    <span class="string">"network"</span>, <span class="comment">// 网络错误</span></span><br><span class="line">    <span class="string">"decode"</span> <span class="comment">// 解码错误</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Constructor]</span><br><span class="line">interface MediaSource : EventTarget &#123;</span><br><span class="line">  readonly attribute SourceBufferList sourceBuffers;</span><br><span class="line">  readonly attribute SourceBufferList activeSourceBuffers;</span><br><span class="line">  readonly attribute ReadyState readyState;</span><br><span class="line">  attribute unrestricted <span class="keyword">double</span> duration;</span><br><span class="line">  attribute EventHandler onsourceopen;</span><br><span class="line">  attribute EventHandler onsourceended;</span><br><span class="line">  attribute EventHandler onsourceclose;</span><br><span class="line">  <span class="function">SourceBuffer <span class="title">addSourceBuffer</span><span class="params">(DOMString type)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">removeSourceBuffer</span><span class="params">(SourceBuffer sourceBuffer)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">endOfStream</span><span class="params">(optional EndOfStreamError error)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setLiveSeekableRange</span><span class="params">(<span class="keyword">double</span> start, <span class="keyword">double</span> end)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clearLiveSeekableRange</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> boolean <span class="title">isTypeSupported</span><span class="params">(DOMString type)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p>sourceBuffers：只读，返回<code>SourceBufferList</code>。包含与此<code>MediaSource</code>关联的<code>SourceBuffer</code>对象的列表。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">if</span> mediaSource.readyState === <span class="string">'close'</span></span><br><span class="line">  <span class="keyword">return</span> SourceBufferList(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> mediaSource.readyState === <span class="string">'open'</span></span><br><span class="line">  <span class="comment">// length = mediaSource.addSourceBuffer(SourceBuffer).length</span></span><br><span class="line">  <span class="keyword">return</span> SourceBufferList(length);</span><br></pre></td></tr></table></figure>
</li>
<li><p>activeSourceBuffers：只读，返回<code>SourceBufferList</code>。包含了所选中的video track，启用中的audio track以及显示或隐藏的text track的<code>sourceBuffers</code>的子集。此列表中的SourceBuffer对象必须按照它们出现在<code>sourceBuffers</code>属性 中的顺序出现; 例如，如果只有sourceBuffers [0]和sourceBuffers [3]在   <code>activeSourceBuffers</code>中，则activeSourceBuffers [0]必须等于sourceBuffers [0]，activeSourceBuffers [1]必须等于sourceBuffers [3]。</p>
</li>
<li><p>readyState：只读，返回<code>ReadyState</code>。<code>MediaSource</code>对象的当前状态。<strong>当创建媒体源时，必须将“readyState”设置为“close”</strong>。</p>
</li>
<li><p>duration：返回double。当<code>MediaSource</code>对象创建时，duration的初始化值为NaN。获取时，执行以下的步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line"><span class="keyword">if</span> mediaSource.readyState === <span class="string">'close'</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NaN</span></span><br><span class="line"><span class="keyword">return</span> dutation</span><br><span class="line"></span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line"><span class="keyword">if</span> new_duration &lt; <span class="number">0</span> ||<span class="built_in">isNaN</span>(new_duration)</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">TypeError</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> mediaSource.readyState !== <span class="string">'open'</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> anyOneSourceBuffer(sourceBuffers).updating === <span class="literal">true</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  run duration_change_algorithm</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="number">1</span>、如果当前buffer编码帧有较高的结束时间，则duration_change_algorithm也会将duration调整得相对比较高；</span><br><span class="line"><span class="number">2</span>、appendBuffer()和endOfStream()可以在某些情况下更新持续时间。</span><br></pre></td></tr></table></figure>
</li>
<li><p>onsourceopen，onsourceended，onsourceclose：<code>EventHandler</code>类型。</p>
</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p>addSourceBuffer：添加新的<code>SourceBuffer</code>到<code>sourceBuffers</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.addSourceBuffer(type: DOMString): SourceBuffer</span><br></pre></td></tr></table></figure>
<p>假如方法被调用，则会有以下的执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">if</span> type === <span class="string">''</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">TypeError</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> isNotSupportedMIME(type)</span><br><span class="line">  <span class="keyword">throw</span> NotSupportedError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> canNotHandlerMoreSourceBuffer || </span><br><span class="line">  (sb = addSourceBuffer(type) &amp;&amp; </span><br><span class="line">  isNotSupportedSourceBufferConfiguration(sb))</span><br><span class="line">  <span class="comment">// SourceBuffer Configuration：1、具有1个audio track和/或1个video track的单个SourceBuffer；2、两个SourceBuffers，一个处理单个audio track，另一个处理单个video track</span></span><br><span class="line">  <span class="comment">// 举个例子，`HTMLMediaElement`中的`readyState`为[HAVE_METADATA](https://www.w3.org/TR/html51/semantics-embedded-content.html#dom-htmlmediaelement-have_metadata)，假如浏览器不支持在播放过程中添加更多的track，那么则有可能会抛出这种异常。</span></span><br><span class="line">  <span class="keyword">throw</span> QuotaExceededError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> mediaSource.readyState !== <span class="string">'open'</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"></span><br><span class="line">sb = <span class="keyword">new</span> SourceBuffer</span><br><span class="line">init generate_timestamps_flag</span><br><span class="line"><span class="keyword">if</span> generate_timestamps_flag === <span class="literal">true</span></span><br><span class="line">  sb.mode = <span class="string">'sequence'</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">  sb.mode = <span class="string">'segments'</span></span><br><span class="line"></span><br><span class="line">sourceBuffers.addSourceBuffer(sb)</span><br><span class="line">sourceBuffers.fireEvent(<span class="string">'sourceBuffers'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>removeSourceBuffer：从<code>sourceBuffsers</code>删除<code>SourceBuffer</code>。执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.removeSourceBuffer(sourceBuffer: SourceBuffer): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<p>假如方法被调用，则会有以下的执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">if</span> sourceBuffer not <span class="keyword">in</span> sourceBuffers</span><br><span class="line">  <span class="keyword">throw</span> NotFoundError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> sourceBuffer.updating === <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> buffer_append_algorithm.isRunning === <span class="literal">true</span> <span class="keyword">return</span></span><br><span class="line">  sourceBuffer.updating = <span class="literal">false</span></span><br><span class="line">  sourceBuffer.fireEvent(<span class="string">'abort'</span>)</span><br><span class="line">  sourceBuffer.fireEvent(<span class="string">'updateend'</span>)</span><br><span class="line"></span><br><span class="line">sourceBufferAudioTracks = sourceBuffer.audioTracks</span><br><span class="line">sourceBufferVideoTracks = sourceBuffer.videoTracks</span><br><span class="line">sourceBufferTextTracks = sourceBuffer.textTracks</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sourceBufferAudioTracks.length &gt; <span class="number">0</span> || sourceBufferVideoTracks.length &gt; <span class="number">0</span> || sourceBufferTextTracks.length &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> sourceBufferAudioTracks/sourceBufferVideoTracks/sourceBufferTextTracks</span><br><span class="line">  sourceBufferAudioTracks[i].sourceBuffer = <span class="literal">null</span></span><br><span class="line">  sourceBufferVideoTracks[i].sourceBuffer = <span class="literal">null</span></span><br><span class="line">  sourceBufferTextTracks[i].sourceBuffer = <span class="literal">null</span></span><br><span class="line">  HTMLMediaElement.removeTracks(sourceBufferAudioTracks[i], sourceBufferVideoTracks[i], sourceBufferTextTracks[i])</span><br><span class="line">  sourceBuffer.removeTracks(sourceBufferAudioTracks[i], sourceBufferVideoTracks[i], sourceBufferTextTracks[i])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sourceBuffer <span class="keyword">in</span> activeSourceBuffers</span><br><span class="line">  activeSourceBuffers.remove(sourceBuffer)</span><br><span class="line">  activeSourceBuffers.fireEvent(<span class="string">'removesourcebuffer'</span>)</span><br><span class="line"></span><br><span class="line">destroy sourceBuffer.resource</span><br></pre></td></tr></table></figure>
</li>
<li><p>endOfStream：表示媒体流结束。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.endOfStream(error?: EndOfStreamError): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<p>假如方法被调用，则会有以下的执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">if</span> mediaSource.readyState !== <span class="string">'open'</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> anyOneSourceBuffer(sourceBuffers).updating === <span class="literal">true</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"></span><br><span class="line">run end_of_stream_algorithm</span><br></pre></td></tr></table></figure>
</li>
<li><p>setLiveSeekableRange：更新<code>HTMLMediaElement Extensions</code>中的可seek范围，从而达到修改<code>HTMLMediaElement.seekable</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.setLiveSeekableRange(start: double, <span class="attr">end</span>: double): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<p>假如方法被调用，则会有以下的执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">if</span> mediaSource.readyState !== <span class="string">'open'</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> start &lt; <span class="number">0</span> || start &gt; end</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">TypeError</span></span><br><span class="line"></span><br><span class="line">live_seekable_range = <span class="keyword">new</span> TimeRanges(end - start)</span><br><span class="line">HTMLMediaElement.seekable = live_seekable_range</span><br></pre></td></tr></table></figure>
</li>
<li><p>clearLiveSeekableRange：顾名思义。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.clearLiveSeekableRange(): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<p>假如方法被调用，则会有以下的执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">if</span> mediaSource.readyState !== <span class="string">'open'</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> TimeRanges()</span><br></pre></td></tr></table></figure>
</li>
<li><p>isTypeSupported：<strong>static</strong>。检查<code>MediaSource</code>是否能够为指定的MIME类型创建<code>SourceBuffer</code>对象。可以通过<a href="https://cconcolato.github.io/media-mime-support/" target="_blank" rel="noopener">Media MIME Support</a>来查看当前使用的浏览器对不同的MIME支持程序。或者通过<br><code>ffmpeg -i test.mp4</code>得到的信息去匹配<a href="https://wiki.whatwg.org/wiki/Video_type_parameters" target="_blank" rel="noopener">Video type parameters - WHATWG Wiki</a>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MediaSource.isTypeSupported(type: DOMString): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sourceopen  | Event | readyState = <span class="string">'closed'</span> =&gt; <span class="string">'open'</span> / <span class="string">'ended'</span> =&gt; <span class="string">'open'</span></span><br><span class="line"><span class="comment">// sourceopen</span></span><br><span class="line"><span class="keyword">let</span> mediaSource = <span class="keyword">new</span> MediaSource();</span><br><span class="line">videoElement.src = URL.createObjectURL(mediaSource);</span><br><span class="line">---------------------------------------------------</span><br><span class="line">sourceend   | Event | readyState = <span class="string">'open'</span> =&gt; <span class="string">'ended'</span></span><br><span class="line"><span class="comment">// sourceend</span></span><br><span class="line">mediaSource.endOfStream()</span><br><span class="line">---------------------------------------------------</span><br><span class="line">sourceclose | Event | readyState = <span class="string">'open'</span> =&gt; <span class="string">'closed'</span> / <span class="string">'ended'</span> =&gt; <span class="string">'closed'</span></span><br><span class="line"><span class="comment">// sourcrclose</span></span><br><span class="line">mediaSource.readyState = <span class="string">'closed'</span>;</span><br><span class="line">mediaSource.duration = <span class="literal">NaN</span>;</span><br><span class="line">mediaSource.removeSourceBuffer(activeSourceBuffers);</span><br><span class="line">mediaSource.removeSourceBuffer(sourceBuffers);</span><br></pre></td></tr></table></figure>
<h2 id="SourceBuffer"><a href="#SourceBuffer" class="headerlink" title="SourceBuffer"></a>SourceBuffer</h2><h3 id="添加模式"><a href="#添加模式" class="headerlink" title="添加模式"></a>添加模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">enum AppendMode &#123;</span><br><span class="line">    <span class="comment">// media segment中的时间戳决定了编码帧的位置，即按 pts 来排序。</span></span><br><span class="line">    <span class="string">"segments"</span>,</span><br><span class="line">    <span class="comment">// media segment的时间戳跟编码帧的位置无关。新的media segment的编码帧会追加到上一段的media segment的编码帧后面，假如之间存在间隔，则timestampOffset会被重新设置用来弥补这段间隔。因此timestampOffset可以将一段media segment放在任何一个位置。</span></span><br><span class="line">    <span class="string">"sequence"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface SourceBuffer : EventTarget &#123;</span><br><span class="line">    attribute AppendMode mode;</span><br><span class="line">    readonly attribute boolean updating;</span><br><span class="line">    readonly attribute TimeRanges buffered;</span><br><span class="line">    attribute <span class="keyword">double</span>  timestampOffset;</span><br><span class="line">    readonly attribute AudioTrackList audioTracks;</span><br><span class="line">    readonly attribute VideoTrackList videoTracks;</span><br><span class="line">    readonly attribute TextTrackList textTracks;</span><br><span class="line">    attribute <span class="keyword">double</span> appendWindowStart;</span><br><span class="line">    attribute unrestricted <span class="keyword">double</span> appendWindowEnd;</span><br><span class="line">    attribute EventHandler onupdatestart;</span><br><span class="line">    attribute EventHandler onupdate;</span><br><span class="line">    attribute EventHandler onupdateend;</span><br><span class="line">    attribute EventHandler onerror;</span><br><span class="line">    attribute EventHandler onabort;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">appendBuffer</span><span class="params">(BufferSource data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">abort</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">double</span> start, unrestricted <span class="keyword">double</span> end)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p>mode：当使用<code>MediaSource.addSourceBuffer()</code>创建<code>SourceBuffer</code>时，会给mode设置初始值。如果media segment已经存在时间戳，则该值将被设置为<code>‘segments’</code>，反之则<code>sequence</code>。当设置时，会执行以下步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码如下</span></span><br><span class="line"><span class="keyword">if</span> sourceBuffer not <span class="keyword">in</span> mediaSource.sourceBuffers</span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> updating === <span class="literal">true</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> generate_timestamps_flag === <span class="literal">true</span> &amp;&amp; newMode === <span class="string">"segments"</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">TypeError</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> mediaSource.readyState === <span class="string">'ended'</span></span><br><span class="line">  mediaSource.readyState = <span class="string">'open'</span></span><br><span class="line">  mediaSource.dispatch(<span class="string">'sourceopen'</span>)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> append_state === PARSING_MEDIA_SEGMENT</span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> new_mode === <span class="string">"sequence"</span></span><br><span class="line">  group_start_timestamp = group_end_timestamp</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  sourceBuffer.mode = new_mode</span><br></pre></td></tr></table></figure>
</li>
<li><p>updating：只读，boolean类型。当执行异步操作<code>appendBuffer()</code>或<code>remove()</code>时，返回true；反之false；</p>
</li>
<li><p>buffered：只读，返回<code>TimeRanges</code>。表明了<code>SourceBuffer</code>中缓冲了哪些<code>TimeRanges</code>。创建该<code>SourceBuffer</code>对象时，该属性最初设置为空的<code>TimeRanges</code>对象。</p>
</li>
<li><p>timestampOffset：double类型。主要是控制media segment片段之间的偏移量，也可以说是上一个的duration，初始值为0。当设置时，会执行一下步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码如下</span></span><br><span class="line"><span class="keyword">if</span> sourceBuffer not <span class="keyword">in</span> mediaSource.sourceBuffers</span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> sourceBuffer.updating === <span class="literal">true</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> mediaSource.readyState === <span class="string">'ended'</span></span><br><span class="line">  mediaSource.readyState = <span class="string">'open'</span></span><br><span class="line">  mediaSource.dispatch(<span class="string">'sourceopen'</span>)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> append_state === PARSING_MEDIA_SEGMENT</span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> mode === <span class="string">"sequence"</span></span><br><span class="line">  group_start_timestamp = new_timestampOffset</span><br><span class="line"></span><br><span class="line">sourceBuffer.timestampOffset = new_timestampOffset</span><br></pre></td></tr></table></figure>
</li>
<li><p>audioTracks，videoTracks，textTracks：分别返回<code>AudioTrackList</code>，<code>VideoTrackList</code>和<code>TextTrackList</code>。</p>
</li>
<li><p>onupdatestart，onupdate，onupdateend，onerror，onabort：<code>EventHandler</code>类型。</p>
</li>
</ul>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p>appendBuffer：将<code>BufferSource</code> 中的数据添加到source buffer。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.appendBuffer(data: BufferSource): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<p>假如方法被调用，则会有以下的执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">run prepare_append_algorithm</span><br><span class="line">inputBuffer.push(data)</span><br><span class="line">sourceBuffer.updating = <span class="literal">true</span></span><br><span class="line">sourceBuffer.fireEvent(<span class="string">'updatestart'</span>)</span><br><span class="line"><span class="keyword">async</span> run buffer_append_algorithm</span><br></pre></td></tr></table></figure>
</li>
<li><p>abort：中止并重置解析器。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.abort(): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<p>假如方法被调用，则会有以下的执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sourceBuffer not <span class="keyword">in</span> mediaSource.sourceBuffers</span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> mediaSource.readyState !== <span class="string">'open'</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> range_removal_algorithm.isRunning === <span class="literal">true</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> sourceBuffer.updating === <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> buffer_append_algorithm.isRunning === <span class="literal">true</span></span><br><span class="line">    buffer_append_algorithm.abort()</span><br><span class="line">  sourceBuffer.updating = <span class="literal">false</span></span><br><span class="line">  sourceBuffer.fireEvent(<span class="string">'abort'</span>)</span><br><span class="line">  sourceBuffer.fireEvent(<span class="string">'updateend'</span>) </span><br><span class="line">run reset_parser_state_algorithm</span><br><span class="line">sourceBuffer.ptsStart = sourceBuffer.appendWindowStart</span><br><span class="line">sourceBuffer.appendWindowEnd = <span class="literal">Infinity</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>remove：删除特定时间段的媒体。参数中的单位为s。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.remove(start: double, <span class="attr">end</span>: unrestricted double): <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<p>假如方法被调用，则会有以下的执行步骤：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sourceBuffer not <span class="keyword">in</span> mediaSource.sourceBuffers</span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> sourceBuffer.updating === <span class="literal">true</span></span><br><span class="line">  <span class="keyword">throw</span> InvalidStateError</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in">isNaN</span>(sourceBuffer.duration)</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">TypeError</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> start &lt; <span class="number">0</span> || start &gt; sourceBuffer.duration</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">TypeError</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> end &lt;= start || is(<span class="literal">NaN</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">TypeError</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> mediaSource.readySate === <span class="string">'ended'</span></span><br><span class="line">  mediaSource.readySate = <span class="string">'open'</span></span><br><span class="line">  mediaSource.fireEvent(<span class="string">'sourceopen'</span>)</span><br><span class="line"></span><br><span class="line">run range_removal_algorithm(start, end)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Track-Buffers"><a href="#Track-Buffers" class="headerlink" title="Track Buffers"></a>Track Buffers</h3><p>Track Buffer为每一个独立的track储存对应的描述和编码帧。将 track buffer 更新为初始化片段，并将媒体片段添加到 SourceBuffer 。<br>每一个Track都拥有以下属性：</p>
<ul>
<li>last decode timestamp：储存着当前解码帧组里面的最后一帧的dts。当未添加到SourceBuffer时，该值为空。</li>
<li>last frame duration：储存着当前解码帧组里面的最后一帧的帧时长。当未添加到SourceBuffer时，该值为空。</li>
<li>highest end timestamp：储存着当前解码帧组中已被添加到SourceBuffer的所有编码帧中最高的结束时间戳。同样初始值未空。</li>
<li>need random access point flag：该变量初始设置为true，表示在有什么添加到track buffer之前，都需要随机访问点编码帧。</li>
<li>track buffer ranges：表示当前存储在track buffer中的编码帧占用的pts范围。这个我在<a href="x">数据转化</a>的<strong>音视频同步原理</strong>那里其实有说过，其中的duration就是该值。</li>
</ul>
<h3 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">updatestart  | Event | updating = <span class="function"><span class="params">false</span> =&gt;</span> <span class="literal">true</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">update | Event | updating = <span class="function"><span class="params">true</span> =&gt;</span> <span class="literal">false</span> <span class="comment">// append或remove成功执行</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">updateend | Event | <span class="comment">// append或remove执行到最后</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">error | Event | updating = <span class="function"><span class="params">true</span> =&gt;</span> <span class="literal">false</span> <span class="comment">// 在append的时候发生错误</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">abort | Event | updating = <span class="function"><span class="params">true</span> =&gt;</span> <span class="literal">false</span> <span class="comment">// append或remove时调用abort()方法</span></span><br></pre></td></tr></table></figure>
<p>其他的就不多说了。基本上都是可以从官方文档上找得到答案的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结就是如下的操作顺序，但实际情况远不止如此，还复杂很多，得依据场景来分析。</p>
<ol>
<li><p>在页面的 HTML 部分中定义 <code>HTMLMediaElement</code> 元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">'vEle'</span> <span class="attr">autoplay</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用JavaScript创建 <code>MediaSource</code> 对象。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mediaSource = <span class="keyword">new</span> <span class="built_in">window</span>.MediaSource()</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>URL.createObjectURL</code> 创建 BlobURL，并将 MediaSource 对象作为源。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = URL.createObjectURL(mediaSource);</span><br></pre></td></tr></table></figure>
</li>
<li><p>将虚拟 URL 分配到视频元素的 src 属性。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="built_in">document</span>.getElementById(<span class="string">'vEle'</span>);</span><br><span class="line">v.src = url;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 addSourceBuffer 创建 SourceBuffer，包含你添加的 MIME 类型的视频。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> videoSource = mediaSource.addSourceBuffer(<span class="string">'video/mp4'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>从媒体文件联机获取视频<code>initialization segment</code>，并使用 <code>appendBuffer</code> 将其添加到 <code>SourceBuffer</code> 中。而<code>initialization segment</code>就是相当于fmp4中的 <code>ftyp + moov</code>，有trackId, duration, width, height等基础信息。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videoSource.appendBuffer(initialization_segment)</span><br></pre></td></tr></table></figure>
</li>
<li><p>从媒体文件获取视频<code>media segment</code>，并使用 <code>appendBuffer</code> 将其附加到 <code>SourceBuffer</code> 中。而<code>media segment</code>就相当于fmp4中的<code>moof + mdat</code>，是实实在在的音视频数据。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videoSource.appendBuffer(media_segment)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 video 元素上调用 play 方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var playPromise = v.play()</span><br><span class="line"></span><br><span class="line">if (playPromise !== undefined) &#123;</span><br><span class="line">  playPromise.then(_ =&gt; &#123;</span><br><span class="line">    v.pause()</span><br><span class="line">  &#125;).catch(error =&gt; &#123; &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重复步骤 7 直到完成。</p>
</li>
<li>清除。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videoSource.remove(start, end)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-flvjs中FLV转FMP4简单概括]]></title>
      <url>https://lucius0.github.io/2018/01/27/archivers/media-study-09/</url>
      <content type="html"><![CDATA[<p>在<a href="https://lucius0.github.io/2018/01/16/archivers/media-study-08/">上一篇</a>我们只是分析了fmp4的结构，也就是box的结构组成，但是还是需要进行<code>remuxer</code>才可以将flv转成fmp4。</p>
<h2 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h2><p>在flv那边我们有提到<code>parseAACAudioSpecificConfig</code>、<code>parseAVCDecoderConfigurationRecord</code>，其实在那里会通过<code>this._onTrackMetadata</code>这个方法将对应的音视频的<code>metadata</code>传给<code>mp4-remuxer</code>去处理。而<code>script tag</code>的<code>metadata</code>没有交给fmp4处理，相信大家也明白，这个数据主要是一些媒体信息。</p>
<h3 id="Audio-Metadata"><a href="#Audio-Metadata" class="headerlink" title="Audio Metadata"></a>Audio Metadata</h3><p>让我们再回到<code>flv-demuxer</code>，在解析Audio时会优先解析<strong>Audio Metadata</strong>，也就是音频的<code>Audio Object Type</code>，<code>channel</code>，<code>codec</code>等信息。解析完毕之后会将这些信息都传递给<code>mp4-remuxer</code>去处理，生成<code>metabox</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 'audio/mp4, codecs="codec"'</span></span><br><span class="line">metabox = MP4.generateInitSegment(metadata);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所以第一次初始化 metadata 的数值填给 fmp4 中的对应数值，其他的都可以使用默认值</span></span><br><span class="line">-&gt; ftyp 固定的，这部分不多说，见上一篇FMP4结构那篇文章</span><br><span class="line">-&gt; moov</span><br><span class="line">  -&gt; mvhd: timescale, duration</span><br><span class="line">  -&gt; trak</span><br><span class="line">    -&gt; tkhd: trackId, duration, width, height</span><br><span class="line">    -&gt; mdia</span><br><span class="line">    -&gt; mdhd: timescale, duration</span><br><span class="line">    -&gt; hdlr: hdlr_audio</span><br><span class="line">    -&gt; minf</span><br><span class="line">      -&gt; xmhd: smhd</span><br><span class="line">      -&gt; dinf</span><br><span class="line">      -&gt; dref</span><br><span class="line">      -&gt; stbl</span><br><span class="line">      -&gt; stsd</span><br><span class="line">        /-&gt; mp3: channelCount, sampleRate</span><br><span class="line">        /-&gt; mp4a(aac): channelCount, sampleRate</span><br><span class="line">         -&gt; esds: config, configSize</span><br><span class="line">      -&gt; stts</span><br><span class="line">      -&gt; stsc</span><br><span class="line">      -&gt; stsz</span><br><span class="line">      -&gt; stco</span><br><span class="line">  -&gt; mvex</span><br><span class="line">    -&gt; trex: trackId</span><br><span class="line"></span><br><span class="line"><span class="comment">// 到这里就完成了 Audio 的 InitSegment。</span></span><br><span class="line"><span class="keyword">this</span>._onInitSegment(type, &#123;</span><br><span class="line">    type: type,</span><br><span class="line">    data: metabox.buffer,</span><br><span class="line">    codec: codec,</span><br><span class="line">    container: <span class="string">`<span class="subst">$&#123;type&#125;</span>/<span class="subst">$&#123;container&#125;</span>`</span>,</span><br><span class="line">    mediaDuration: metadata.duration  <span class="comment">// in timescale 1000 (milliseconds)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="Video-Metadata"><a href="#Video-Metadata" class="headerlink" title="Video Metadata"></a>Video Metadata</h3><p>同理，Video在解析数据之前，第一个会是<strong>AVC Decoder Configuration Record</strong>，即会把<code>chromaFormat</code>、<code>duration</code>、<code>frameRate</code>、<code>presentHeight</code>、<code>presentWidth</code>等数据一样传递给<code>mp4-remuxer</code>，跳过 ftyp 不说，会跟Audio一样产生一个 moov 的box。这里只挑跟Audio不同的数据。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 'video'</span></span><br><span class="line">metabox = MP4.generateInitSegment(metadata);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Video metadata</span></span><br><span class="line">hdlr: hdlr_video</span><br><span class="line">xmhd: vmhd</span><br><span class="line">stsd</span><br><span class="line">  -&gt; avc1: avcc, width, height</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看到，其实只要有meta传参的地方，数据都是不一样的(部分没写出来)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h2><p>读取完 metadata 之后，之后读取到 audio 的，就是<strong>AAC raw frame data</strong>数据了，然后将数据保存到 audio track 中的 sample 数组；当然 video 也是一样，之后的数据就是<strong>nalus</strong>了，然后同时也将数据保存到 video track 中的 sample 数组。待抓取到的媒体流数据解析完成之后，将解析完的数据帧发送给<code>remuxer</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._onDataAvailable(<span class="keyword">this</span>._audioTrack, <span class="keyword">this</span>._videoTrack);</span><br><span class="line"><span class="comment">// ===&gt;&gt;&gt; mp4-remuxer::remux</span></span><br><span class="line"><span class="keyword">this</span>._remuxVideo(videoTrack);</span><br><span class="line"><span class="keyword">this</span>._remuxAudio(audioTrack);</span><br></pre></td></tr></table></figure></p>
<p>在这里注意一下，在进行<code>remuxVideo</code>跟<code>remuxAudio</code>之前，会先计算一个<code>base dts</code>，这个是什么呢？之后再说。</p>
<h3 id="Video-Data"><a href="#Video-Data" class="headerlink" title="Video Data"></a>Video Data</h3><p>我们拿 video data 来分析，实际上分析了 video data，那么 audio 的部分也是大同小异的了。这里先将 nal 的数据转为 mdat box，这部分参考<a href="https://lucius0.github.io/2018/01/16/archivers/media-study-08/">FMP4结构</a>的<strong>BOX</strong>部分。这里先写入的是 nal 的头部信息。也就是size、type这些。并不包括真正的数据。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> offset = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">let</span> mdatBytes = <span class="number">8</span> + videoTrack.length;</span><br><span class="line"><span class="keyword">let</span> mdatbox = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(mdatBytes);</span><br><span class="line">mdatbox[<span class="number">0</span>] = (mdatBytes &gt;&gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">mdatbox[<span class="number">1</span>] = (mdatBytes &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">mdatbox[<span class="number">2</span>] = (mdatBytes &gt;&gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">mdatbox[<span class="number">3</span>] = (mdatBytes) &amp; <span class="number">0xFF</span>;</span><br><span class="line">mdatbox.set(MP4.types.mdat, <span class="number">4</span>);</span><br></pre></td></tr></table></figure></p>
<p>为了修正后续的 samples 能与上一次的 samples 形成连续性(MSE要求连续的segments之间是不能存在时间戳间隙)，所以取这次 samples 中第一个 sample 的时间戳，追加到上一次 samples 末尾的位置，根据差值(dtsCorrection)，后面所有 sample 时间戳做相应平移。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculate dtsCorrection</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>._videoNextDts) &#123;</span><br><span class="line">    dtsCorrection = firstSampleOriginalDts - <span class="keyword">this</span>._videoNextDts;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  <span class="comment">// this._videoNextDts == undefined</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._videoSegmentInfoList.isEmpty()) &#123;</span><br><span class="line">        dtsCorrection = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 假如 _videoNextDts 为 undefined，则根据时间戳从_videoSegmentInfoList 中找到最后一个 sample 的信息</span></span><br><span class="line">        <span class="keyword">let</span> lastSample = <span class="keyword">this</span>._videoSegmentInfoList.getLastSampleBefore(firstSampleOriginalDts);</span><br><span class="line">        <span class="keyword">if</span> (lastSample != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> distance = (firstSampleOriginalDts - (lastSample.originalDts + lastSample.duration));</span><br><span class="line">            <span class="keyword">if</span> (distance &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">                distance = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> expectedDts = lastSample.dts + lastSample.duration + distance;</span><br><span class="line">            dtsCorrection = firstSampleOriginalDts - expectedDts;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// lastSample == null, cannot found</span></span><br><span class="line">            dtsCorrection = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>下面的一步其实目的就很明了了，就是根据上面产生的差值，来给每一个 sample 时间戳做相对应的平移。并且输出 mp4Samples 。<br>还记得上面的<strong>mdatbox</strong>吗？我们之前只对它做头部信息处理，那么接下来的一步就是对它填充我们处理过后的数据。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Write samples into mdatbox</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; mp4Samples.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> units = mp4Samples[i].units;</span><br><span class="line">    <span class="keyword">while</span> (units.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> unit = units.shift();</span><br><span class="line">        <span class="keyword">let</span> data = unit.data;</span><br><span class="line">        mdatbox.set(data, offset);</span><br><span class="line">        offset += data.byteLength;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>生成  moof box。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-&gt; moof</span><br><span class="line">  -&gt; mfhd: sequence number</span><br><span class="line">  -&gt; traf</span><br><span class="line">    -&gt; tfhd: trackId</span><br><span class="line">    -&gt; tfdt: baseMediaDecodeTime，也就是一次 packets 的firstDts</span><br><span class="line">    -&gt; sdtp: isLeading，dependsOn，isDependedOn，hasRedundancy</span><br><span class="line">    -&gt; trun: sampleCount，offset，sample(duration，size，flags，cts)</span><br></pre></td></tr></table></figure></p>
<p>生成完之后需要对这一次的 sample list 清空。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">track.samples = [];</span><br><span class="line">track.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p>
<p>最后将数据box合并，并将此次的数据派发出去。</p>
<h3 id="Audio-Data"><a href="#Audio-Data" class="headerlink" title="Audio Data"></a>Audio Data</h3><p>Audio这里分为AAC跟MP3这两类音频解码格式。我们就针对AAC这一类来，MP3也是大同小异的，因为只有Firefox支持<code>&#39;audio/mp4,codecs=&quot;mp3&quot;&#39;</code>。<br><code>calculate dtsCorrection</code> 这部分就不多讲了。跟上面 Video Data 道理一样。但是这里作者做了一个兼容处理，就是为了解决 Edge seek 后卡住的 bug。作者这一块是这样解释的：<br><img src="/images/qiniu/180127162635.png" alt=""><br>这里注意一下：<code>videoSegment.beginDts &lt; firstSampleDts</code>，假如该空音频是在第一帧，那么就没必要补帧了(AAC.getSilentFrame)，补帧的道理也是为了使其数据连续性。<code>Correct dts for each sample</code>这一步跟Video的处理差不多，只是多了一个<code>large timestamp gap</code>的处理，这个会产生音视频不同步。剩余的后面不讲。因为看注释以及跟Video data差不多。</p>
<h2 id="音视频同步原理"><a href="#音视频同步原理" class="headerlink" title="音视频同步原理"></a>音视频同步原理</h2><p>最后讲一下音视频同步的原理。<strong>每一帧视频或音频都有一个duration</strong>，认识这一点很重要。然后<strong>采样率(sample rate)</strong>指的是每秒钟对音频信号的采样次数，采样频率越高声音还原度越高，声音更加自然。单位是赫兹 Hz。这里我们拿44.1kHz来讲，实际还有其他的，具体可以看<a href="https://lucius0.github.io/2017/12/27/archivers/media-study-03/">FLV解析-AudioTag(1)</a>。</p>
<p>视频帧播放时间：</p>
<ul>
<li>H.264：<code>duration = 1000 / fps</code>，我们常见的 fps 有25，当然也有见过30的。那么 duration 就为40ms，也就是40ms一个视频帧。</li>
</ul>
<p>音频帧播放时间：</p>
<ul>
<li>AAC：<code>duration = 1024 / sample_rate</code>，AAC音频一帧有1024个采样样本，我们假如 sample rate 为 44.1kHz，那么 duration 应该为 23.22ms左右。</li>
<li>MP3：<code>duration = 1152 / sample_rate</code>，MP3音频一帧跟AAC不同，只有1152个采样样本，同样假设 sample rate 为 44.1kHz，那么 duration 为 26.12ms。</li>
</ul>
<p>那么理论下的音视频同步如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------</span><br><span class="line">时间轴：| 0 | 23.22 | 40 | 46.44 | 69.66 | 80 | ... | 116.1 |</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">音  频：| 0 | 23.22 |    | 46.44 | 69.66 |    | ... | 116.1 | </span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">视  频：| 0 |       | 40 |               | 80 | ... |       |</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>
<p>可以看得出，音视频的排列是按照<strong>起始时间戳</strong>从小到大来排序的，当然这部分可以允许些许波动，但也要注意一旦出现过大就会发现音视频不同步。例如：<br><img src="/images/qiniu/180127162849.png" alt=""><br>当然这是理论上，还需要考虑到其他的影响因素，例如硬件，网速之类的情况。</p>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[各种debug工具在此汇总]]></title>
      <url>https://lucius0.github.io/2018/01/18/archivers/debug-tools/</url>
      <content type="html"><![CDATA[<h2 id="Charles-HTTPS-代理"><a href="#Charles-HTTPS-代理" class="headerlink" title="Charles HTTPS 代理"></a>Charles HTTPS 代理</h2><p>http代理不用说了。没啥问题。这里是以pc端为例。</p>
<ol>
<li><p>安装证书。Help -&gt;  SSL Proxying -&gt; Install Charles Root Certificate。并打开keychain进行安全信任。<br><img src="/images/qiniu/180118191654.png" alt=""></p>
</li>
<li><p>Proxy -&gt; macOS Proxy<br><img src="/images/qiniu/180118191836.png" alt=""></p>
</li>
<li><p>注意一点的是。开启shadowsocks会影响Charles。<br><img src="/images/qiniu/180118191953.png" alt=""><br>所以要改成下面，或者关了shadowsocks再重新打开Charles。<br><img src="/images/qiniu/180118192057.png" alt=""></p>
</li>
<li><p>其实这时候已经可以用了，右键你要代理的 https 地址。例如我们抓<code>https://www.google.com</code><br><img src="/images/qiniu/180118192154.png" alt=""></p>
</li>
<li><p>这时候你就会在 Proxy -&gt; SSL Proxying Settings 看到如下信息。（这里我不喜欢网上说的<code>*:443</code>，因为这样会把其他无关的都带进来，出现一些莫名其妙现象，例如样式）<br><img src="/images/qiniu/180118192313.png" alt=""></p>
</li>
<li><p>到这里为止，你应该就可以按照http的方式去代理你想要的文件了。<strong>但是，我遇到了一个很奇怪的问题，就是我代理到本地，文件居然是不完整的。这让我很郁闷。当然我最后找到解决方法，就是开启本地服务器，不采取Map Local，而采取Map Remote，将服务器文件代理到我的localhost这里，就可以了</strong></p>
</li>
</ol>
<h2 id="whistle-查看-websocket"><a href="#whistle-查看-websocket" class="headerlink" title="whistle 查看 websocket"></a>whistle 查看 websocket</h2><p><strong>wireShark也能做这样的事情，并且功能方面还比这个强大，但是本着折腾的心，权当玩玩看。</strong></p>
<ol>
<li><p>官方文档：<a href="https://avwo.github.io/whistle/" target="_blank" rel="noopener">实现原理 · GitBook</a></p>
</li>
<li><p>安装whistle <code>npm install -g whistle</code></p>
</li>
<li><p>运行whistle，回出现下面的信息 <code>w2 start</code><br><img src="/images/qiniu/180118192521.png" alt=""></p>
</li>
<li><p>代理SwitchyOmega新建情景模式 -&gt; 代理服务器(whistle) -&gt;<br><img src="/images/qiniu/180118192606.png" alt=""></p>
</li>
<li><p>这时候就可以打开<code>http://local.whistlejs.com/</code><br><img src="/images/qiniu/180118223728.png" alt=""></p>
</li>
<li><p>ws拦截，<a href="https://avwo.github.io/whistle/webui/websocket.html" target="_blank" rel="noopener">WebSocket · GitBook</a>。假如没有执行这一步，会看到ws的协议都是显示<code>tunnel</code>。</p>
</li>
</ol>
<h2 id="weinre"><a href="#weinre" class="headerlink" title="weinre"></a>weinre</h2><p>这个跟下面的<strong>m-console</strong>都是在之前调试web 移动播放器的时候使用到的，好在本地有做记录，这次也顺便记录下来。</p>
<ol>
<li><p><strong>weinre</strong>：<code>npm -g install weinre</code></p>
</li>
<li><p><code>weinre --httpPort 8899 --boundHost your-local-host/-all-</code></p>
</li>
<li><p>打开浏览器并且输入你的地址 <code>your-local-host:8899</code></p>
</li>
<li><p>然后会出现下面的图<br><img src="/images/qiniu/180118224316.png" alt=""></p>
</li>
<li><p>将Example下的地址复制到你要测试的页面去。</p>
</li>
<li><p>接着用你的设备链接你的本地开启的服务器，如我用xampp开启了一个服务器，然后用设备从外访问我的电脑服务器：<code>http://your-local-host/测试页面的地址</code></p>
</li>
<li><p>返回刚才在第3步打开的页面，并点击Access Point下的<br><code>http://192.168.0.101:8899/client/#anonymous</code>就可以看到有哪些连接了本地服务器。</p>
</li>
</ol>
<h2 id="m-console"><a href="#m-console" class="headerlink" title="m-console"></a>m-console</h2><ol>
<li><p><strong>m-console</strong>：<code>npm -g install m-console</code></p>
</li>
<li><p>同样将生成的js文件复制到测试页面去</p>
</li>
<li><p>用手机连接本地服务器，就可以在pc端的网页上的输出了（如手机打开的是<code>http://192.168.0.101/test.html</code>，那么pc端上打开的也是同样的。只是那时候已经开始监听移动端的页面输出情况</p>
</li>
</ol>
<p><strong>总结：</strong>那么这两个debug调试工具有什么不同呢？<code>weinre</code>可以看到页面上的元素变化，但是在日志出书没有<code>m-console</code>好用。所以我一般都是两个工具混着一起用。据说<code>whistle</code>是结合了两者的优点，摒除了缺点，打算之后熟练了自然会记录下来。</p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-FMP4结构之FMP4]]></title>
      <url>https://lucius0.github.io/2018/01/16/archivers/media-study-08/</url>
      <content type="html"><![CDATA[<p>初次学习有关音视频这一块的开发，主要是基于 <strong><a href="https://github.com/Bilibili/flv.js" target="_blank" rel="noopener">flv.js</a></strong> 的学习。这一块的知识概念实在是太多太深了，所以本人是先在本地做记录，后面会整理慢慢地上传与各位分享，假如有地方说错，请勘误。谢谢指点。</p>
<p>接上篇<a href="https://lucius0.github.io/2018/01/14/archivers/media-study-07/">音视频学习-FMP4结构之MP4</a>，这篇来说下FMP4的格式。在上篇文章中，有列举过FMP4与MP4之间的差异，其实就可以通过图片看出主要的差异性，FMP4主要是有<code>moof + mdat</code>来作为媒体流数据源。从图片上看，FMP4比MP4多了MVEX Box, MOOF Box以及MDAT Box。</p>
<h2 id="MOOV-MVEX"><a href="#MOOV-MVEX" class="headerlink" title="MOOV::MVEX"></a>MOOV::MVEX</h2><p>Movie Extends box，该box可能有moof(Movie Fragment Boxes)，并且是按顺序读取。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aligned(<span class="number">8</span>) <span class="function">class MovieExtendsBox extends <span class="title">Box</span><span class="params">(‘mvex’)</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-MVEX-MEHD"><a href="#MOOV-MVEX-MEHD" class="headerlink" title="MOOV::MVEX::MEHD"></a>MOOV::MVEX::MEHD</h3><p>Movie extends header box。可有可无，主要是是Movie头扩展用的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class MovieExtendsHeaderBox extends <span class="title">FullBox</span><span class="params">(‘mehd’, version, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (version==<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span>  fragment_duration</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123; <span class="comment">// version==0</span></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span>(<span class="number">32</span>)  fragment_duration;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-MVEX-TREX"><a href="#MOOV-MVEX-TREX" class="headerlink" title="MOOV::MVEX::TREX"></a>MOOV::MVEX::TREX</h3><p>Track Extends Box。设置了movie fragment的默认值，可以保存每个track中的空间复杂度。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class TrackExtendsBox extends <span class="title">FullBox</span><span class="params">(‘trex’, <span class="number">0</span>, <span class="number">0</span>)</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> track_ID</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> default_sample_description_index</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> default_sample_duration</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> default_sample_size</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> default_sample_flags </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="MOOF"><a href="#MOOF" class="headerlink" title="MOOF"></a>MOOF</h2><h3 id="MOOF-TRAF"><a href="#MOOF-TRAF" class="headerlink" title="MOOF::TRAF"></a>MOOF::TRAF</h3><p>Track Fragment Box。存放tfhd，tfdt，sdtp，trun的容器。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class TrackFragmentBox extends <span class="title">Box</span><span class="params">(‘traf’)</span></span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOF-TRAF-TFHD"><a href="#MOOF-TRAF-TFHD" class="headerlink" title="MOOF::TRAF::TFHD"></a>MOOF::TRAF::TFHD</h3><p>Track Fragment Header Box。主要是对指定的 trak 进行相关的默认设置。例如：sample 的时长，大小，偏移量等。不过，这些都可以忽略不设，只要你在其它 box 里面设置完整即可：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class TrackFragmentHeaderBox extends <span class="title">FullBox</span><span class="params">(‘tfhd’, <span class="number">0</span>, tf_flags)</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> track_ID</span>;</span><br><span class="line">  <span class="comment">// all the following are optional fields</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span> base_data_offset</span>;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> sample_description_index</span>;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> default_sample_duration</span>;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> default_sample_size</span>;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> default_sample_flags</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOF-TRAF-TFDT"><a href="#MOOF-TRAF-TFDT" class="headerlink" title="MOOF::TRAF::TFDT"></a>MOOF::TRAF::TFDT</h3><p>Track fragment decode time。主要是用来存放相关 sample 编码的绝对时间的。因为 FMP4 是流式的格式，所以，不像 MP4 一样可以直接根据 sample 直接 seek 到具体位置。这里就需要一个标准时间参考，来快速定位都某个具体的 fragment。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class TrackFragmentBaseMediaDecodeTimeBox extends <span class="title">FullBox</span><span class="params">(‘tfdt’, version, <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (version==<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span> baseMediaDecodeTime</span>; </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// version==0</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>(<span class="number">32</span>) baseMediaDecodeTime;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOF-TRAF-TRUN"><a href="#MOOF-TRAF-TRUN" class="headerlink" title="MOOF::TRAF::TRUN"></a>MOOF::TRAF::TRUN</h3><p>Track Fragment Run Box。存储该 moof 里面相关的 sample 内容。例如，每个 sample 的 size，duration，offset 等。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class TrackRunBox extends <span class="title">FullBox</span><span class="params">(‘trun’, version, tr_flags)</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> sample_count</span>;</span><br><span class="line">  <span class="comment">// the following are optional fields</span></span><br><span class="line">  <span class="function"><span class="keyword">signed</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> data_offset</span>;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> first_sample_flags</span>;</span><br><span class="line">  <span class="comment">// all fields in the following array are optional </span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  sample_duration</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  sample_size</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  sample_flags</span></span><br><span class="line"><span class="function">      <span class="title">if</span> <span class="params">(version == <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> sample_composition_time_offset</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      <span class="keyword">signed</span> <span class="keyword">int</span>(<span class="number">32</span>) sample_composition_time_offset;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;[ sample_count ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以说，trun 上面的字段是 traf 里面最重要的标识字段：<br>tr_flags 是用来表示下列 sample 相关的标识符是否应用到每个字段中：</p>
<ul>
<li>0x000001: data-offset-present，只应用 data-offset</li>
<li>0x000004: 只对第一个 sample 应用对应的 flags。剩余 sample flags 就不管了。</li>
<li>0x000100: 这个比较重要，表示每个 sample 都有自己的 duration，否则使用默认的</li>
<li>0x000200: 每个 sample 有自己的 sample_size，否则使用默认的。</li>
<li>0x000400: 对每个 sample 使用自己的 flags。否则，使用默认的。</li>
<li>0x000800: 每个 sample 都有自己的 cts 值<br>后面字段，我们这简单介绍一下。</li>
<li>data_offset: 用来表示和该 moof 配套的 mdat 中实际数据内容距 moof 开头有多少 byte。相当于就是 moof.byteLength + mdat.headerSize。</li>
<li>sample_count: 一共有多少个 sample</li>
<li>first_sample_flags: 主要针对第一个 sample。一般来说，都可以默认设为 0。<br>后面的几个字段，我就不赘述了，对了，里面的 sample_flags 是一个非常重要的东西，常常用它来表示，到底哪一个 sample 是对应的 keyFrame。</li>
</ul>
<h3 id="MOOF-TRAF-SDTP"><a href="#MOOF-TRAF-SDTP" class="headerlink" title="MOOF::TRAF::SDTP"></a>MOOF::TRAF::SDTP</h3><p>Independent and Disposable Samples Box。主要是用来描述具体某个 sample 是否是 I 帧，是否是 leading frame 等相关属性值，主要用来作为当进行点播回放时的同步参考信息。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class SampleDependencyTypeBox extends <span class="title">FullBox</span><span class="params">(‘sdtp’, version = <span class="number">0</span>, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; sample_count; i++)&#123;</span><br><span class="line">    <span class="comment">// 是否是开头部分</span></span><br><span class="line">    <span class="comment">// - 0: 当前 sample 的 leading 属性未知（经常用到）</span></span><br><span class="line">    <span class="comment">// - 1: 当前 sample 是 leading sample，并且不能被 decoded</span></span><br><span class="line">    <span class="comment">// - 2: 当前 sample 并不是 leading sample</span></span><br><span class="line">    <span class="comment">// - 3: 当前 sample 是 leading sample，并且能被 decoded</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">2</span>)</span> is_leading</span>;</span><br><span class="line">    <span class="comment">// 是否是 I 帧</span></span><br><span class="line">    <span class="comment">// - 0: 该 sample 不知道是否依赖其他帧</span></span><br><span class="line">    <span class="comment">// - 1: 该 sample 是 B/P 帧</span></span><br><span class="line">    <span class="comment">// - 2: 该 sample 是 I 帧</span></span><br><span class="line">    <span class="comment">// - 3: 保留字</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">2</span>)</span> sample_depends_on</span>; </span><br><span class="line">    <span class="comment">// 该帧是否被依赖</span></span><br><span class="line">    <span class="comment">// - 0: 不知道是否被依赖，特指（B/P）</span></span><br><span class="line">    <span class="comment">// - 1: 被依赖，特指 I 帧</span></span><br><span class="line">    <span class="comment">// - 2: 保留字</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">2</span>)</span> sample_is_depended_on</span>; </span><br><span class="line">    <span class="comment">// 是否有冗余编码</span></span><br><span class="line">    <span class="comment">// - 0: 不知道是否有冗余</span></span><br><span class="line">    <span class="comment">// - 1: 有冗余编码</span></span><br><span class="line">    <span class="comment">// - 2: 没有冗余编码</span></span><br><span class="line">    <span class="comment">// - 3: 保留字</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">2</span>)</span> sample_has_redundancy</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>sdtp 对于 video 来说很重要，因为，其内容字段主要就是给 video 相关的帧设计的。而 audio，一般直接采用默认值：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isLeading: <span class="number">0</span>,</span><br><span class="line">dependsOn: <span class="number">1</span>, </span><br><span class="line">isDepended: <span class="number">0</span>,</span><br><span class="line">hasRedundancy: <span class="number">0</span></span><br></pre></td></tr></table></figure></p>
<h2 id="MDAT"><a href="#MDAT" class="headerlink" title="MDAT"></a>MDAT</h2><p>Media Data Box。该box包含媒体数据。对于h264，aac编码的媒体来说，其视频mdat中内容是nal，对于音频来说，其内容为aac的一帧。mdat中的帧依次存放，每个帧的位置、时间、长度都由moov中的信息指定。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class MediaDataBox extends <span class="title">Box</span><span class="params">(‘mdat’)</span> </span>&#123; </span><br><span class="line">  bit(<span class="number">8</span>) data[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.villainhr.com/page/2017/08/21/%E5%AD%A6%E5%A5%BD%20MP4%EF%BC%8C%E8%AE%A9%E7%9B%B4%E6%92%AD%E6%9B%B4%E7%BB%99%E5%8A%9B#fragmented MP4" target="_blank" rel="noopener">学好 MP4，让直播更给力</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-FMP4结构之MP4]]></title>
      <url>https://lucius0.github.io/2018/01/14/archivers/media-study-07/</url>
      <content type="html"><![CDATA[<p>初次学习有关音视频这一块的开发，主要是基于 <strong><a href="https://github.com/Bilibili/flv.js" target="_blank" rel="noopener">flv.js</a></strong> 的学习。这一块的知识概念实在是太多太深了，所以本人是先在本地做记录，后面会整理慢慢地上传与各位分享，假如有地方说错，请勘误。谢谢指点。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>MP4(MPEG-4 Part 14)是一种常见的多媒体容器格式，它是在“ISO/IEC 14496-14”标准文件中定义的，属于MPEG-4的一部分，是“ISO/IEC 14496-12(MPEG-4 Part 12 ISO base media file format)”标准中所定义的媒体格式的一种实现，后者定义了一种通用的媒体文件结构标准。MP4是一种描述较为全面的容器格式，被认为可以在其中嵌入任何形式的数据，各种编码的视频、音频等都不在话下，不过我们常见的大部分的MP4文件存放的AVC(H.264)或MPEG-4(Part 2)编码的视频和AAC编码的音频。MP4格式的官方文件后缀名是“.mp4”，还有其他的以mp4为基础进行的扩展或者是缩水版本的格式，包括：M4V,  3GP, F4V等。</p>
<p>在HTML5播放器中，目前仅支持<strong>WebM</strong>和<strong>MPEG H.264 AAC</strong>的编码格式，而WebM的在浏览器的支持度没有mp4的支持度好。而fmp4区别于mp4，主要是因为可以通过fmp4的<code>moof+mdat</code>的格式结构，很好的在不同质量的码流做码率切换。</p>
<p>MP4是由一个个的Box组成的，也就是可以说Box是MP4的最小单元。官方文档可以查看：<a href="http://l.web.umkc.edu/lizhu/teaching/2016sp.video-communication/ref/mp4.pdf" target="_blank" rel="noopener">ISO_IEC_14496-12</a>。而Box的类型有太多太多了，可以自行查看文档中的<strong>Table 1 — Box types, structure, and cross-reference</strong>部分，这里我就不贴出来了。</p>
<h2 id="BOX"><a href="#BOX" class="headerlink" title="BOX"></a>BOX</h2><p>以下是fmp4跟mp4的结构图，可以很清楚的看到两者的区别。<br><img src="/images/qiniu/180114225134.png" alt=""></p>
<p>从官方文档看，可以知道，除了Box，还有一种Full Box。Box的结构图如下：<br><img src="/images/qiniu/180114225303.png" alt=""></p>
<p>Box的官方示例代码如下：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Box</span></span><br><span class="line"><span class="comment">// Box只会给Header(size、type)</span></span><br><span class="line">aligned(8) class Box (unsigned int(32) boxtype, optional unsigned int(8)[16] extended_type) &#123;</span><br><span class="line">   <span class="comment">// Box大小，包括Header，所以上面的ftyp中size为8+24</span></span><br><span class="line">   <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> size</span>;</span><br><span class="line">   <span class="comment">// ftyp，就是type，一般都是4个字母，所以通过charCodeAt获取即可。</span></span><br><span class="line">   <span class="comment">// flv.js中的代码片段实现如下。</span></span><br><span class="line">   <span class="comment">// MP4.types[name] = [</span></span><br><span class="line">   <span class="comment">//   name.charCodeAt(0),</span></span><br><span class="line">   <span class="comment">//   name.charCodeAt(1),</span></span><br><span class="line">   <span class="comment">//   name.charCodeAt(2),</span></span><br><span class="line">   <span class="comment">//   name.charCodeAt(3)</span></span><br><span class="line">   <span class="comment">// ];</span></span><br><span class="line">   <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> type </span>= boxtype;</span><br><span class="line">   <span class="keyword">if</span> (size==<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span> largesize</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size==<span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// box extends to end of file</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 用户扩展使用扩展类型，在这种情况下，类型字段设置为“uuid”，不过几乎没遇过</span></span><br><span class="line">  <span class="keyword">if</span> (boxtype==‘uuid’) &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>(<span class="number">8</span>)[<span class="number">16</span>] usertype = extended_type;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FullBox，增加了version以及flags，不难理解，是Box的扩展。FullBox是没有子box的。</span></span><br><span class="line">aligned(8) class FullBox(unsigned int(32) boxtype, unsigned int(8) v, bit(24) f) extends Box(boxtype) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">8</span>)</span> version </span>= v; <span class="comment">//</span></span><br><span class="line">  bit(<span class="number">24</span>) flags = f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>mp4-generator.js</code>中，生成box的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Generate a box</span></span><br><span class="line"><span class="keyword">static</span> box(type) &#123;</span><br><span class="line">  <span class="keyword">let</span> size = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> datas = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">let</span> arrayCount = datas.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrayCount; i++) &#123;</span><br><span class="line">    size += datas[i].byteLength;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  result = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(size);</span><br><span class="line">  result[<span class="number">0</span>] = (size &gt;&gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;  <span class="comment">// size</span></span><br><span class="line">  result[<span class="number">1</span>] = (size &gt;&gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  result[<span class="number">2</span>] = (size &gt;&gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">  result[<span class="number">3</span>] = (size) &amp; <span class="number">0xFF</span>;</span><br><span class="line"></span><br><span class="line">  result.set(type, <span class="number">4</span>);  <span class="comment">// type</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> offset = <span class="number">8</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrayCount; i++) &#123;  <span class="comment">// data body</span></span><br><span class="line">    result.set(datas[i], offset);</span><br><span class="line">    offset += datas[i].byteLength;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 ftyp box</span></span><br><span class="line"><span class="keyword">let</span> ftyp = MP4.box(MP4.types.ftyp, MP4.constants.FTYP);</span><br></pre></td></tr></table></figure></p>
<h2 id="FTYP"><a href="#FTYP" class="headerlink" title="FTYP"></a>FTYP</h2><p>File Type Box<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class FileTypeBox extends <span class="title">Box</span><span class="params">(‘ftyp’)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 主要推荐版本</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> major_brand</span>;</span><br><span class="line">  <span class="comment">// 最低兼容版本</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> minor_version</span>;</span><br><span class="line">  <span class="comment">// 兼容版本</span></span><br><span class="line">  unsigned int(32) compatible_brands[]; // to end of the box</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例格式</span></span><br><span class="line">[ftyp] size=<span class="number">8</span>+<span class="number">16</span></span><br><span class="line">  major_brand = qt  </span><br><span class="line">  minor_version = <span class="number">0</span></span><br><span class="line">  compatible_brand = qt  </span><br><span class="line">  compatible_brand = iso5</span><br></pre></td></tr></table></figure></p>
<h2 id="MOOV"><a href="#MOOV" class="headerlink" title="MOOV"></a>MOOV</h2><p>Movie Box，继承box，那么就可以知道有4个字节，这4个字节是子box的长度。可以在上图看到，moov主要是为了存放trak、mvhd，fmp4还会存放mvex box。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="class"><span class="keyword">class</span> <span class="title">MovieBox</span> <span class="keyword">extends</span> <span class="title">Box</span>(‘<span class="title">moov</span>’)</span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-MVHD"><a href="#MOOV-MVHD" class="headerlink" title="MOOV::MVHD"></a>MOOV::MVHD</h3><p>Movie Header Box，该box有且只有一个，主要是记录整个容器的各种信息。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class MovieHeaderBox extends <span class="title">FullBox</span><span class="params">(‘mvhd’, version, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">  <span class="comment">// MVHD 的版本号，默认 0</span></span><br><span class="line">  <span class="keyword">if</span> (version==<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span>  creation_time</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span>  modification_time</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  timescale</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span>  duration</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// version==0</span></span><br><span class="line">    <span class="comment">// 创建时间，从1904开始，整数，单位s</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>(<span class="number">32</span>)  creation_time;</span><br><span class="line">    <span class="comment">// 最近修改时间，同样从1904开始，整数，单位s</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  modification_time</span>;</span><br><span class="line">    <span class="comment">// 文件媒体在 1s 时间内的刻度值，可以理解为 1s 长度的时间单元数，一般情况下视频都是1000</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  timescale</span>;</span><br><span class="line">    <span class="comment">// 持续时间，一般来说电影时间 = duration / timescale</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  duration</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 播放速率，一般为 1，高16和低16分别表示小数点前后整数部分和小数部分</span></span><br><span class="line"><span class="function"><span class="keyword">template</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> rate </span>= <span class="number">0x00010000</span>; <span class="comment">// typically 1.0</span></span><br><span class="line"><span class="comment">// 音量，最大为100，高8位和低8位分别表示小数点前后整数和小数部分</span></span><br><span class="line"><span class="function"><span class="keyword">template</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> volume </span>= <span class="number">0x0100</span>; <span class="comment">// typically, full volume</span></span><br><span class="line"><span class="comment">// 保留字</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="title">bit</span><span class="params">(<span class="number">16</span>)</span> reserved </span>= <span class="number">0</span>; </span><br><span class="line">const unsigned int(32)[2] reserved = 0;</span><br><span class="line"><span class="comment">// 视频变化矩阵 Unity matrix</span></span><br><span class="line">template int(32)[9] matrix = &#123; </span><br><span class="line">  <span class="number">0x00010000</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>,<span class="number">0x00010000</span>,<span class="number">0</span>,</span><br><span class="line">  <span class="number">0</span>,<span class="number">0</span>,<span class="number">0x40000000</span></span><br><span class="line">&#125;;</span><br><span class="line">bit(<span class="number">32</span>)[<span class="number">6</span>]  pre_defined = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 下一个 track 使用的id 号</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  next_track_ID</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例格式</span></span><br><span class="line">[mvhd] size=<span class="number">12</span>+<span class="number">96</span></span><br><span class="line">  timescale = <span class="number">1000</span></span><br><span class="line">  duration = <span class="number">51952</span></span><br><span class="line">  duration(ms) = <span class="number">51952</span></span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK"><a href="#MOOV-TRAK" class="headerlink" title="MOOV::TRAK"></a>MOOV::TRAK</h3><p>Track Box，主要是存一个或多个media box的。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aligned(<span class="number">8</span>) <span class="function">class TrackBox extends <span class="title">Box</span><span class="params">(‘trak’)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-TKHD"><a href="#MOOV-TRAK-TKHD" class="headerlink" title="MOOV::TRAK::TKHD"></a>MOOV::TRAK::TKHD</h3><p>Track Header Box，trak box 的第一个box，主要是记录以下信息（一开始我还以为与上面的冲突了）。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class TrackHeaderBox extends <span class="title">FullBox</span><span class="params">(‘tkhd’, version, flags)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (version==<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span> creation_time</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span> modification_time</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> track_ID</span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> reserved </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span> duration</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// version==0</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span>(<span class="number">32</span>) creation_time;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> modification_time</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> track_ID</span>; <span class="comment">// 当前track的ID</span></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> reserved </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> duration</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  const unsigned int(32)[2] reserved = 0;</span><br><span class="line">  <span class="comment">// 视频track的前后排序，类似photoshop中图层的概念，数值小的在播放时更贴近用户，0为默认值</span></span><br><span class="line">  <span class="function"><span class="keyword">template</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> layer </span>= <span class="number">0</span>; </span><br><span class="line">  <span class="comment">// 备用分组ID，0表示无备用。否则该 track 可能会有零到多个备份track。当播放时相同group ID的track只选择一个进行播放。</span></span><br><span class="line">  <span class="function"><span class="keyword">template</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> alternate_group </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 音量</span></span><br><span class="line">  <span class="function"><span class="keyword">template</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> volume </span>= &#123;<span class="keyword">if</span> track_is_audio <span class="number">0x0100</span> <span class="keyword">else</span> <span class="number">0</span>&#125;;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> reserved </span>= <span class="number">0</span>;</span><br><span class="line">  template int(32)[9] matrix=&#123; </span><br><span class="line">    <span class="number">0x00010000</span>,<span class="number">0</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0x00010000</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">0</span>,<span class="number">0x40000000</span> </span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// unity matrix</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> width</span>;  <span class="comment">// 宽</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> height</span>; <span class="comment">// 高</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例格式</span></span><br><span class="line">[tkhd] size=<span class="number">12</span>+<span class="number">80</span>, flags=<span class="number">7</span></span><br><span class="line">  enabled = <span class="number">1</span></span><br><span class="line">  id = <span class="number">1</span></span><br><span class="line">  duration = <span class="number">51952</span></span><br><span class="line">  width = <span class="number">856.000000</span></span><br><span class="line">  height = <span class="number">720.000000</span></span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-EDTS"><a href="#MOOV-TRAK-EDTS" class="headerlink" title="MOOV::TRAK::EDTS"></a>MOOV::TRAK::EDTS</h3><p>Edit Box，不是必要的，主要是将时间线映射到media时间线上，是Edit List Box的容器。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class EditBox extends <span class="title">Box</span><span class="params">(‘edts’)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-EDTS-ELST"><a href="#MOOV-TRAK-EDTS-ELST" class="headerlink" title="MOOV::TRAK::EDTS::ELST"></a>MOOV::TRAK::EDTS::ELST</h3><p>Edit List Box，不是必要的，主要是保存切确的时间表，使得某个track的时间戳产生偏移，能达到延迟播放的作用。<a href="http://blog.jianchihu.net/mp4-elst-box.html" target="_blank" rel="noopener">mp4文件elst研究</a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class EditListBox extends <span class="title">FullBox</span><span class="params">(‘elst’, version, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> entry_count</span>;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">1</span>; i &lt;= entry_count; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (version==<span class="number">1</span>) &#123;</span><br><span class="line">       <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span> segment_duration</span>;</span><br><span class="line">       <span class="keyword">int</span>(<span class="number">64</span>) media_time;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// version==0</span></span><br><span class="line">       <span class="comment">// 表该box的时长，以Movie Header Box中的timescale为单位。</span></span><br><span class="line">       <span class="keyword">unsigned</span> <span class="keyword">int</span>(<span class="number">32</span>) segment_duration;</span><br><span class="line">       <span class="comment">// 该box的起始时间，以 track 中Media Header Box中的timescale 为单位。如果值为-1，表示是空edit box，一个 track 中最后一个 edit 不能为空。</span></span><br><span class="line">       <span class="keyword">int</span>(<span class="number">32</span>)  media_time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 速率。为0的话，相当于'dwell'，即画面停止。</span></span><br><span class="line">    <span class="keyword">int</span>(<span class="number">16</span>) media_rate_integer;</span><br><span class="line">    <span class="keyword">int</span>(<span class="number">16</span>) media_rate_fraction = <span class="number">0</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA"><a href="#MOOV-TRAK-MDIA" class="headerlink" title="MOOV::TRAK::MDIA"></a>MOOV::TRAK::MDIA</h3><p>Media Box，保存媒体信息的容器。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class MediaBox extends <span class="title">Box</span><span class="params">(‘mdia’)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MDHD"><a href="#MOOV-TRAK-MDIA-MDHD" class="headerlink" title="MOOV::TRAK::MDIA::MDHD"></a>MOOV::TRAK::MDIA::MDHD</h3><p>Media Header Box，存放媒体信息。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class MediaHeaderBox extends <span class="title">FullBox</span><span class="params">(‘mdhd’, version, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (version==<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span>  creation_time</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span>  modification_time</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  timescale</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span>  duration</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123; <span class="comment">// version==0</span></span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span>(<span class="number">32</span>)  creation_time;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  modification_time</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  timescale</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  duration</span>;</span><br><span class="line">&#125;</span><br><span class="line">  bit(<span class="number">1</span>) pad = <span class="number">0</span>;</span><br><span class="line">  unsigned int(5)[3] language; // ISO-639-2/T language code</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> pre_defined </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例格式</span></span><br><span class="line">[mdia] size=<span class="number">8</span>+<span class="number">415</span></span><br><span class="line">  [mdhd] size=<span class="number">12</span>+<span class="number">20</span></span><br><span class="line">    timescale = <span class="number">600</span></span><br><span class="line">    duration = <span class="number">0</span></span><br><span class="line">    duration(ms) = <span class="number">0</span></span><br><span class="line">    language = und</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-HDLR"><a href="#MOOV-TRAK-MDIA-HDLR" class="headerlink" title="MOOV::TRAK::MDIA::HDLR"></a>MOOV::TRAK::MDIA::HDLR</h3><p>Handler Reference Box，主要是用来跟踪中媒体数据被呈现的过程。例如，video track将由video handler box处理。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class HandlerBox extends <span class="title">FullBox</span><span class="params">(‘hdlr’, version = <span class="number">0</span>, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> pre_defined </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// hanler type有以下几种格式：</span></span><br><span class="line">  <span class="comment">// ‘vide’ Video track</span></span><br><span class="line">  <span class="comment">// ‘soun’ Audio track</span></span><br><span class="line">  <span class="comment">// ‘hint’ Hint track</span></span><br><span class="line">  <span class="comment">// ‘meta’ Timed Metadata track</span></span><br><span class="line">  <span class="comment">// ‘auxv’ Auxiliary Video track</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> handler_type</span>;</span><br><span class="line">  const unsigned int(32)[3] reserved = 0;</span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例格式</span></span><br><span class="line">[hdlr] size=<span class="number">12</span>+<span class="number">41</span></span><br><span class="line">  handler_type = vide</span><br><span class="line">  handler_name = Bento4 Video Handler</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MINF"><a href="#MOOV-TRAK-MDIA-MINF" class="headerlink" title="MOOV::TRAK::MDIA::MINF"></a>MOOV::TRAK::MDIA::MINF</h3><p>Media Information Box。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aligned(<span class="number">8</span>) <span class="function">class MediaInformationBox extends <span class="title">Box</span><span class="params">(‘minf’)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-VMHD-SMHD-HMHD-NMHD"><a href="#MOOV-TRAK-MDIA-VMHD-SMHD-HMHD-NMHD" class="headerlink" title="MOOV::TRAK::MDIA::VMHD/SMHD/HMHD/NMHD"></a>MOOV::TRAK::MDIA::VMHD/SMHD/HMHD/NMHD</h3><p>Media Information Header Boxes。每种音轨类型都有不同的媒体信息头（对应media handler-type）; 匹配的头文件应该存在，可以是这里定义的头文件之一，或者派生的规范中定义的头文件之一。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="class"><span class="keyword">class</span> <span class="title">VideoMediaHeaderBox</span></span></span><br><span class="line"><span class="class"><span class="title">extends</span> <span class="title">FullBox</span>(‘<span class="title">vmhd</span>’, <span class="title">version</span> = 0, 1) &#123;</span></span><br><span class="line">  <span class="function"><span class="keyword">template</span> <span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> graphicsmode </span>= <span class="number">0</span>; <span class="comment">// copy, see below </span></span><br><span class="line">  template unsigned int(16)[3] opcolor = &#123;0, 0, 0&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aligned(<span class="number">8</span>) <span class="class"><span class="keyword">class</span> <span class="title">SoundMediaHeaderBox</span></span></span><br><span class="line"><span class="class">   <span class="title">extends</span> <span class="title">FullBox</span>(‘<span class="title">smhd</span>’, <span class="title">version</span> = 0, 0) &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">template</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> balance </span>= <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span>  reserved </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例格式</span></span><br><span class="line">[vmhd] size=<span class="number">12</span>+<span class="number">8</span>, flags=<span class="number">1</span></span><br><span class="line">  graphics_mode = <span class="number">0</span></span><br><span class="line">  op_color = <span class="number">0000</span>,<span class="number">0000</span>,<span class="number">0000</span></span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MINF-DINF"><a href="#MOOV-TRAK-MDIA-MINF-DINF" class="headerlink" title="MOOV::TRAK::MDIA::MINF::DINF"></a>MOOV::TRAK::MDIA::MINF::DINF</h3><p>Data Information Box。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class DataInformationBox extends <span class="title">Box</span><span class="params">(‘dinf’)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MINF-DINF-DREF"><a href="#MOOV-TRAK-MDIA-MINF-DINF-DREF" class="headerlink" title="MOOV::TRAK::MDIA::MINF::DINF::DREF"></a>MOOV::TRAK::MDIA::MINF::DINF::DREF</h3><p>Data Reference Box。有三种子box类型，‘url ‘, ‘urn ‘, ‘dref’。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="class"><span class="keyword">class</span> <span class="title">DataReferenceBox</span></span></span><br><span class="line"><span class="class">   <span class="title">extends</span> <span class="title">FullBox</span>(‘<span class="title">dref</span>’, <span class="title">version</span> = 0, 0) &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  entry_count</span>;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">1</span>; i &lt;= entry_count; i++) &#123;</span><br><span class="line">    <span class="comment">// URL box / URN box</span></span><br><span class="line">    <span class="comment">// entry_version：声明entry box格式的版本</span></span><br><span class="line">    <span class="comment">// entry_flags：标识，其中0x000001表示media box与包含此数据的引用的media box(moof)相同。</span></span><br><span class="line">    DataEntryBox(entry_version, entry_flags) data_entry; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例格式</span></span><br><span class="line">[dinf] size=<span class="number">8</span>+<span class="number">28</span></span><br><span class="line">  [dref] size=<span class="number">12</span>+<span class="number">16</span></span><br><span class="line">    [url] size=<span class="number">12</span>+<span class="number">0</span>, flags=<span class="number">1</span></span><br><span class="line">      location = [local to file]</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MINF-DINF-DREF-URL-URN"><a href="#MOOV-TRAK-MDIA-MINF-DINF-DREF-URL-URN" class="headerlink" title="MOOV::TRAK::MDIA::MINF::DINF::DREF::URL/URN"></a>MOOV::TRAK::MDIA::MINF::DINF::DREF::URL/URN</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(8) class DataEntryUrlBox (bit(24) flags) extends FullBox(‘url ’, version = 0, flags) &#123; </span><br><span class="line">  <span class="built_in">string</span> location;</span><br><span class="line">&#125;</span><br><span class="line">aligned(8) class DataEntryUrnBox (bit(24) flags) extends FullBox(‘urn ’, version = 0, flags) &#123; </span><br><span class="line">  <span class="built_in">string</span> name;</span><br><span class="line">  <span class="built_in">string</span> location;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MOOV-TRAK-MDIA-MINF-STBL"><a href="#MOOV-TRAK-MDIA-MINF-STBL" class="headerlink" title="MOOV::TRAK::MDIA::MINF::STBL"></a>MOOV::TRAK::MDIA::MINF::STBL</h3><p>Sample Table Box。由图可以看出，是作为一个容器存在。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aligned(<span class="number">8</span>) <span class="function">class SampleTableBox extends <span class="title">Box</span><span class="params">(‘stbl’)</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MINF-STBL-STSD"><a href="#MOOV-TRAK-MDIA-MINF-STBL-STSD" class="headerlink" title="MOOV::TRAK::MDIA::MINF::STBL::STSD"></a>MOOV::TRAK::MDIA::MINF::STBL::STSD</h3><p>Sample Description Box。 box header和version字段后会有一个entry count字段，根据entry的个数，每个entry会有type信息，如“vide”、“sund”等，根据type不同sample description会提供不同的信息，例如对于video track，会有“VisualSampleEntry”类型信息，对于audio track会有“AudioSampleEntry”类型信息。<br>视频的编码类型、宽高、长度，音频的声道、采样等信息都会出现在这个box中。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(8) class SampleDescriptionBox (unsigned int(32) handler_type) extends FullBox('stsd', 0, 0) &#123;</span><br><span class="line">  <span class="keyword">int</span> i ;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> entry_count</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span> ; i &lt;= entry_count ; i++) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (handler_type) &#123;</span><br><span class="line">      <span class="keyword">case</span> ‘soun’: <span class="comment">// for audio tracks</span></span><br><span class="line">        AudioSampleEntry();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> ‘vide’: <span class="comment">// for video tracks</span></span><br><span class="line">        VisualSampleEntry();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> ‘hint’: <span class="comment">// Hint track</span></span><br><span class="line">              HintSampleEntry();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> ‘meta’: <span class="comment">// Metadata track</span></span><br><span class="line">              MetadataSampleEntry();</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">       &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例格式</span></span><br><span class="line">[stbl] size=<span class="number">8</span>+<span class="number">258</span></span><br><span class="line">  [stsd] size=<span class="number">12</span>+<span class="number">178</span></span><br><span class="line">    entry-count = <span class="number">1</span></span><br><span class="line">    [avc1] size=<span class="number">8</span>+<span class="number">166</span></span><br><span class="line">      data_reference_index = <span class="number">1</span></span><br><span class="line">      width = <span class="number">856</span></span><br><span class="line">      height = <span class="number">720</span></span><br><span class="line">      compressor = H<span class="number">.264</span></span><br><span class="line">      [avcC] size=<span class="number">8</span>+<span class="number">46</span></span><br><span class="line">        Configuration Version = <span class="number">1</span></span><br><span class="line">        Profile = Main</span><br><span class="line">        Profile Compatibility = <span class="number">0</span></span><br><span class="line">        Level = <span class="number">31</span></span><br><span class="line">        NALU Length Size = <span class="number">4</span></span><br><span class="line">        Sequence Parameter = [<span class="number">27</span> <span class="number">4</span>d <span class="number">00</span> <span class="number">1f</span> <span class="number">89</span> <span class="number">8b</span> <span class="number">60</span> <span class="number">6</span>c <span class="number">0b</span> <span class="number">7</span>c be <span class="number">02</span> d4 <span class="number">04</span> <span class="number">04</span> <span class="number">04</span> c0 c0 <span class="number">01</span> <span class="number">77</span> <span class="number">00</span> <span class="number">00</span> <span class="number">5</span>d c1 <span class="number">7b</span> df <span class="number">07</span> c2 <span class="number">21</span> <span class="number">1b</span> <span class="number">80</span>]</span><br><span class="line">        Picture Parameter = [<span class="number">28</span> ee <span class="number">1f</span> <span class="number">20</span>]</span><br><span class="line">      [colr] size=<span class="number">8</span>+<span class="number">10</span></span><br><span class="line">      [pasp] size=<span class="number">8</span>+<span class="number">8</span></span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MINF-STBL-STTS"><a href="#MOOV-TRAK-MDIA-MINF-STBL-STTS" class="headerlink" title="MOOV::TRAK::MDIA::MINF::STBL::STTS"></a>MOOV::TRAK::MDIA::MINF::STBL::STTS</h3><p>Decoding Time to Sample Box。存储了sample的duration，描述了sample时序的映射方法，我们通过它可以找到任何时间的sample。“stts”可以包含一个压缩的表来映射时间和sample序号，用其他的表来提供每个sample的长度和指针。表中每个条目提供了在同一个时间偏移量里面连续的sample序号，以及samples的偏移量。递增这些偏移量，就可以建立一个完整的time to sample表。<br>每个sample的显示时间可以通过如下的公式得到：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D(n+<span class="number">1</span>) = D(n) + STTS(n)</span><br></pre></td></tr></table></figure></p>
<p>其中，STTS(n)是sample n的时间间隔，包含在表格中；D(n)是sample n的显示时间。<br><img src="/images/qiniu/180114231843.png" alt=""><br>因此有DT(2) = DT(1) + STTS(1)，其中STTS就是Decode delta(1)=10。那么sample_count跟sample_delta的关系就是如下表：<br><img src="/images/qiniu/180114231904.png" alt=""><br>那么entry_count是什么？假如这个媒体流存在9个samples，这里的entry和chunk不是对应的。sample 4、5和6在同一个chunk中，但是，由于他们的时长不一样，sample 4的时长为3，而sample 5和6的时长为1，因此，通过不同的entry来描述。<br><img src="/images/qiniu/180114231922.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="class"><span class="keyword">class</span> <span class="title">TimeToSampleBox</span></span></span><br><span class="line"><span class="class">   <span class="title">extends</span> <span class="title">FullBox</span>(’<span class="title">stts</span>’, <span class="title">version</span> = 0, 0) &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  entry_count</span>;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; entry_count; i++) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  sample_count</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  sample_delta</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MINF-STBL-CTTS"><a href="#MOOV-TRAK-MDIA-MINF-STBL-CTTS" class="headerlink" title="MOOV::TRAK::MDIA::MINF::STBL::CTTS"></a>MOOV::TRAK::MDIA::MINF::STBL::CTTS</h3><p>Composition Time to Sample Box。每一个视频sample都有一个解码顺序和一个显示顺序。对于一个sample来说，解码顺序和显示顺序可能不一致，比如H.264格式，因此，CTTS就是在这种情况下被使用的。</p>
<ol>
<li>如果解码顺序和显示顺序是一致的，CTTS就不会出现。STTS既提供了解码顺序也提供了显示顺序，并能够计算出每个sample的开始时间和结束时间。</li>
<li>如果解码顺序和显示顺序不一致，那么STTS既提供解码顺序，CTTS则通过差值的形式来提供显示时间。<br>依旧看<strong>Table 2</strong>，那么sample_count跟sample_offset的关系如下：<br><img src="/images/qiniu/180114232102.png" alt=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class CompositionOffsetBox extends <span class="title">FullBox</span><span class="params">(‘ctts’, version = <span class="number">0</span>, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> entry_count</span>;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">if</span> (version==<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; entry_count; i++) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  sample_count</span>;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  sample_offset</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; entry_count; i++) &#123;</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span>(<span class="number">32</span>)  sample_count;</span><br><span class="line">      <span class="function"><span class="keyword">signed</span>   <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  sample_offset</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="MOOV-TRAK-MDIA-MINF-STBL-STCO"><a href="#MOOV-TRAK-MDIA-MINF-STBL-STCO" class="headerlink" title="MOOV::TRAK::MDIA::MINF::STBL::STCO"></a>MOOV::TRAK::MDIA::MINF::STBL::STCO</h3><p>Chunk Offset Box。Chunk的偏移量表，指定了每个chunk在文件中的位置。如下图：<br><img src="/images/qiniu/180114232325.png" alt=""><br>需要注意的是，box中只是给出了每个chunk的偏移量，并没有给出每个sample的偏移量。因此，如果要获得每个sample的偏移量，还需要用到Sample Size Box和Sample-To-Chunk Box。</p>
<p>stco 有两种形式，如果你的视频过大的话，就有可能造成 chunkoffset 超过 32bit 的限制。所以，这里针对大 Video 额外创建了一个 co64 的 Box。它的功效等价于 stco，也是用来表示 sample 在 mdat box 中的位置。只是，里面 chunk_offset 是 64bit 的。基本格式为：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line"><span class="comment">// 32位</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="class"><span class="keyword">class</span> <span class="title">ChunkOffsetBox</span></span></span><br><span class="line"><span class="class"><span class="title">extends</span> <span class="title">FullBox</span>(‘<span class="title">stco</span>’, <span class="title">version</span> = 0, 0) &#123;</span> </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> entry_count</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i u entry_count; i++) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  chunk_offset</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 64位</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class ChunkLargeOffsetBox extends <span class="title">FullBox</span><span class="params">(‘co64’, version = <span class="number">0</span>, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> entry_count</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i u entry_count; i++) &#123;</span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">64</span>)</span>  chunk_offset</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="MOOV-TRAK-MDIA-MINF-STBL-STSC"><a href="#MOOV-TRAK-MDIA-MINF-STBL-STSC" class="headerlink" title="MOOV::TRAK::MDIA::MINF::STBL::STSC"></a>MOOV::TRAK::MDIA::MINF::STBL::STSC</h3><p>Sample To Chunk Box。用chunk组织sample可以方便优化数据获取，一个chunk包含一个或多个sample。“stsc”中用一个表描述了sample与chunk的映射关系，查看这张表就可以找到包含指定sample的thunk，从而找到这个sample，当然每个table entry可能包含一个或者多个chunk。以下是table entry布局。<br><img src="/images/qiniu/180114232505.png" alt=""><br>每个table entry包含一组chunk，enrty中的每个chunk包含相同数目的sample。而且，这些chunk中的每个sample都必须使用相同的sample description。任何时候，如果chunk中的sample数目或者sample description改变，必须创建一个新的table entry。如果所有的chunk包含的sample数目相同，那么该table只有一个entry。<br>一个简单的例子，如图所示。图中看不出来总共有多少个chunk，因为entry中只包含第一个chunk号，因此，对于最后一个entry，在某些情况下需要特殊的处理，因为无法判断什么时候结束。<br><img src="/images/qiniu/180114232522.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="class"><span class="keyword">class</span> <span class="title">SampleToChunkBox</span></span></span><br><span class="line"><span class="class">   <span class="title">extends</span> <span class="title">FullBox</span>(‘<span class="title">stsc</span>’, <span class="title">version</span> = 0, 0) &#123;</span></span><br><span class="line">   <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  entry_count</span>;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">1</span>; i &lt;= entry_count; i++) &#123;</span><br><span class="line">    <span class="comment">// 每一个 entry 开始的 chunk 位置。</span></span><br><span class="line">        <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> first_chunk</span>;</span><br><span class="line">    <span class="comment">// 每一个 chunk 里面包含多少的 sample</span></span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> samples_per_chunk</span>; </span><br><span class="line">    <span class="comment">// 每一个 sample 的描述。一般可以默认设置为 1。</span></span><br><span class="line">      <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> sample_description_index</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这 3 个字段实际上决定了一个 MP4 中有多少个 chunks，每个 chunks 有多少个 samples。这里顺便普及一下 chunk 和 sample 的相关概念。在 MP4 文件中，最小的基本单位是 Chunk 而不是 Sample。</p>
<ul>
<li>sample: 包含最小单元数据的 slice。里面有实际的 NAL 数据。</li>
<li>chunk: 里面包含的是一个一个的 sample。为了是优化数据的读取，让 I/O 更有效率。<br>前面说了，在 MP4 中最小的单位是 chunks，那么通过 stco 中定义的 chunk_offsets 字段，它描述的就是 chunks 在 mdat 中的位置。每一个 stco chunk_offset 就对应于某一个 index 的 chunks。那么，first_chunk 就是用来定义该 chunk entry 开始的位置。那这样的话，stsc 需要对每一个 chunk 进行定义吗？不需要，因为 stsc 是定义一整个 entry，即，如果他们的samples_per_chunk，sample_description_index 不变的话，那么后续的 chunks 都是用一样的模式。<br>即，如果你的 stsc 只有：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">first_chunk: <span class="number">1</span></span><br><span class="line">samples_per_chunk: <span class="number">4</span></span><br><span class="line">sample_description_index: <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>也就是说，从第一个 chunk 开始，每通过切分 4 个 sample 划分为一个 chunk，并且每个 sample 的表述信息都是 1。它会按照这样划分方法一直持续到最后。当然，如果你的 sample 最后不能被 4 整除，最后的几段 sample 就会当做特例进行处理。<br>通常情况下，stsc 的值是不一样的：<br><img src="/images/qiniu/180114232618.png" alt=""><br>按照上面的情况就是，第 1 个 chunk 包含 2 个 samples。第 2-4 个 chunk 包含 1 个 sample，第 5 个 chunk 包含两个 chunk，第 6 个到最后一个 chunk 包含一个 sample。</p>
<h3 id="MOOV-TRAK-MDIA-MINF-STBL-STSZ"><a href="#MOOV-TRAK-MDIA-MINF-STBL-STSZ" class="headerlink" title="MOOV::TRAK::MDIA::MINF::STBL::STSZ"></a>MOOV::TRAK::MDIA::MINF::STBL::STSZ</h3><p>Sample Size Boxes。指定了每个sample的size。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方文档代码</span></span><br><span class="line">aligned(<span class="number">8</span>) <span class="function">class SampleSizeBox extends <span class="title">FullBox</span><span class="params">(‘stsz’, version = <span class="number">0</span>, <span class="number">0</span>)</span> </span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> sample_size</span>;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span> sample_count</span>;</span><br><span class="line">  <span class="keyword">if</span> (sample_size==<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i &lt;= sample_count; i++) &#123;</span><br><span class="line">     <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">32</span>)</span>  entry_size</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里就是mp4的一个大致的结构，下一篇我会给出剩下的，也就是FMP4区别于MP4的结构部分。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://blog.csdn.net/yu_yuan_1314/article/details/9078287" target="_blank" rel="noopener">MOV及MP4文件格式中几个重要的Table</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-flv之VideoTag(2)]]></title>
      <url>https://lucius0.github.io/2018/01/11/archivers/media-study-06/</url>
      <content type="html"><![CDATA[<p>初次学习有关音视频这一块的开发，主要是基于 <strong><a href="https://github.com/Bilibili/flv.js" target="_blank" rel="noopener">flv.js</a></strong> 的学习。这一块的知识概念实在是太多太深了，所以本人是先在本地做记录，后面会整理慢慢地上传与各位分享，假如有地方说错，请勘误。谢谢指点。</p>
<p>在上一篇讲解了关于H.264的基本概念，可以很好的理解H.264是什么。接下来就讲解下Flv格式下的VideoData。</p>
<p>在第一篇文章<a href="https://lucius0.github.io/2017/12/25/archivers/media-study-01/">FLV解析-初步认识</a>我们可以知道，<strong>Tag Header</strong>中的Type为<code>0x09</code>时表示VideoData，而<strong>Video Tag Data</strong>如下图：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line">|                    视频参数(<span class="number">8</span>bit)                 |            视频数据           |</span><br><span class="line">-----------------------------------------------------------------------------------</span><br><span class="line">|     标识帧类型(<span class="number">4</span>bit)     |    标识视频编码(<span class="number">4</span>bit)     |             数据             |</span><br><span class="line">------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>
<p>而视频参数也在之前的文章提到，在这里重温一下：</p>
<ul>
<li>前4位标识帧类型。<ul>
<li>1：keyframe (for AVC, a seekable frame)； </li>
<li>2：inter frame (for AVC, a nonseekable frame)； </li>
<li>3：disposable inter frame (H.263 only)； </li>
<li>4：generated keyframe (reserved for server use only)； </li>
<li>5：video info/command frame</li>
</ul>
</li>
<li>后4位标识视频编码。<ul>
<li>1：JPEG (currently unused) ；</li>
<li>2：Sorenson H.263； </li>
<li>3：Screen video； </li>
<li>4：On2 VP6； </li>
<li>5：On2 VP6 with alpha channel；</li>
<li>6：Screen video version 2； </li>
<li>7：AVC</li>
</ul>
</li>
</ul>
<p>关于标识视频编码，我们只说AVC，也就是标识视频编码为7这个编码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> frameType = (spec &amp; <span class="number">240</span>) &gt;&gt;&gt; <span class="number">4</span>; <span class="comment">// 标识帧类型</span></span><br><span class="line"><span class="keyword">let</span> codecId = spec &amp; <span class="number">15</span>; <span class="comment">// 标识视频编码</span></span><br><span class="line"><span class="comment">// 0x17 =&gt; frameType: 1; codecId: 7</span></span><br></pre></td></tr></table></figure></p>
<p><strong>视频数据(VideoData)</strong></p>
<ul>
<li>codecId=2：H263VideoPacket；</li>
<li>codecId=3：ScreenVideopacket；</li>
<li>codecId=4，为VP6FLVVideoPacket；</li>
<li>codecId=5，为VP6FLVAlphaVideoPacket；</li>
<li>codecId=6，为ScreenV2VideoPacket；</li>
<li>codecId=7，为AVCVideoPacket（这里我们只针对这个做分析）。</li>
</ul>
<h2 id="AVCVIDEOPACKET"><a href="#AVCVIDEOPACKET" class="headerlink" title="AVCVIDEOPACKET"></a>AVCVIDEOPACKET</h2><ul>
<li>AVCPacketType：1个字节。<ul>
<li>0x00：AVCSequence Header，序列头。</li>
<li>0x01：AVC NALU</li>
<li>0x02：AVC end ofsequence，序列结束。</li>
</ul>
</li>
<li>CTS(CompostionTimes)：~SI24，有符号24位整数~。如果AVCPacketType为AVC NALU， 为相对时间戳；否则为0。<br>  <strong>解释：</strong>在<strong>Tag Header</strong>里拿到过一个 <code>timestamp</code>，这个在视频里对应于DTS(decoder timestamps)，就是解码时间戳，而CTS实际上是一个offset，表示 PTS相对于DTS的偏移量，就是 PTS和DTS的差值。当带有B帧的Nalus流封装后，再次解码显示，此时PTS 和 DTS 不能一一对应，因为B帧的时间戳小于P帧，此时CTS 可以记录这个偏差，用以回复解码的时间戳。<a href="http://l.web.umkc.edu/lizhu/teaching/2016sp.video-communication/ref/mp4.pdf" target="_blank" rel="noopener">ISO 14496-12 8.15.3</a></li>
<li>Data：n个字节。为负载数据。<ul>
<li>AVCPacketType=0x00：Data为AVCDecorderConfigurationRecord(在 ISO/IEC 14496-15 中定义)，即解码器配置，SPS，PPS。</li>
<li>AVCPacketType=0x01：NALUs</li>
<li>AVCPacketType=0x02：空</li>
</ul>
</li>
</ul>
<p>代码如下。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> packetType = v.getUint8(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> cts = v.getUint32(<span class="number">0</span>, !le) &amp; <span class="number">0x00FFFFFF</span>; <span class="comment">// 这里为什么是getUint32，在官方文档中，不是SI24吗？@1</span></span><br><span class="line"></span><br><span class="line">@<span class="number">1</span>: 这里在后来的v1<span class="number">.3</span><span class="number">.4</span>版本作者改了，做了以下处理。</span><br><span class="line"><span class="keyword">let</span> cts_unsigned = v.getUint32(<span class="number">0</span>, !le) &amp; <span class="number">0x00FFFFFF</span>;</span><br><span class="line"><span class="keyword">let</span> cts = (cts_unsigned &lt;&lt; <span class="number">8</span>) &gt;&gt; <span class="number">8</span>;  <span class="comment">// convert to 24-bit signed int</span></span><br></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> </p>
<blockquote>
<p>FLV 文件中第一个 <strong>Video Tag</strong> 的<strong>Video Data</strong> 的<strong>AVCVIDEOPACKET</strong> 的 Data 总是 <strong>AVCDecoderConfigurationRecord</strong>，跟<strong>Audio Tag</strong>的 <strong>AAC sequence header</strong> 如出一辙，前者是VideoMeta，后者则是AudioMeta。因此第一个<strong>Video Tag</strong>的二进制文件你可以看到是这样的。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例二进制片段</span></span><br><span class="line"><span class="number">0900002</span>A <span class="number">00000000</span> <span class="number">00000017</span> <span class="number">00000000</span> <span class="number">014</span>D401F FFE10016 <span class="number">674</span>D401F </span><br><span class="line">DA014016 E8400000 <span class="number">03004000</span> <span class="number">000</span>C83C6 <span class="number">0</span>CA80100 <span class="number">0468</span>EF3C <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x17: 视频参数</span></span><br><span class="line"><span class="comment">// 0x00: 序列头</span></span><br><span class="line"><span class="comment">// 0x0000 00: CTS</span></span><br><span class="line"><span class="comment">// ...: Data</span></span><br></pre></td></tr></table></figure>
<h3 id="AVCDecorderConfigurationRecord"><a href="#AVCDecorderConfigurationRecord" class="headerlink" title="AVCDecorderConfigurationRecord"></a>AVCDecorderConfigurationRecord</h3><p>H.264的视频信息头，包含了SPS(SequenceParameterSets)以及PPS(PictureParameterSets)，该信息为H.264的标准。下面是数据结构代码：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">aligned(<span class="number">8</span>) <span class="class"><span class="keyword">class</span> <span class="title">AVCDecoderConfigurationRecord</span> &#123;</span></span><br><span class="line">  <span class="comment">// 版本号</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">8</span>)</span> configurationVersion </span>= <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// SPS[1]</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">8</span>)</span> AVCProfileIndication</span>;</span><br><span class="line">  <span class="comment">// SPS[2]</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">8</span>)</span> profile_compatibility</span>;</span><br><span class="line">  <span class="comment">// SPS[3]</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">8</span>)</span> AVCLevelIndication</span>;</span><br><span class="line">  bit(<span class="number">6</span>) reserved = ‘<span class="number">111111</span>’b;</span><br><span class="line">  <span class="comment">// H.264 视频中 NALU 的长度，计算方法是 1 + (lengthSizeMinusOne &amp; 3)</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">2</span>)</span> lengthSizeMinusOne</span>;</span><br><span class="line">  bit(<span class="number">3</span>) reserved = ‘<span class="number">111</span>’b;</span><br><span class="line">  <span class="comment">// SPS 的长度，计算方法是 numOfSequenceParameterSets &amp; 0x1F</span></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">5</span>)</span> numOfSequenceParameterSets</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numOfSequenceParameterSets; i++) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> sequenceParameterSetLength</span>;</span><br><span class="line">    bit(<span class="number">8</span> * sequenceParameterSetLength) sequenceParameterSetNALUnit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">8</span>)</span> numOfPictureParameterSets</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numOfPictureParameterSets; i++) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span><span class="params">(<span class="number">16</span>)</span> pictureParameterSetLength</span>;</span><br><span class="line">    bit(<span class="number">8</span> * pictureParameterSetLength) pictureParameterSetNALUnit;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因此上面的示例代码中的Data部分应为：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例二进制片段</span></span><br><span class="line"><span class="number">0900002</span>A <span class="number">00000000</span> <span class="number">00000017</span> <span class="number">00000000</span> <span class="number">014</span>D401F FFE10016 <span class="number">674</span>D401F </span><br><span class="line">DA014016 E8400000 <span class="number">03004000</span> <span class="number">000</span>C83C6 <span class="number">0</span>CA80100 <span class="number">0468</span>EF3C <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x01: configurationVersion</span></span><br><span class="line"><span class="comment">// 0x4D: AVCProfileIndication</span></span><br><span class="line"><span class="comment">//       enum profile_e &#123; // AVCProfileIndication</span></span><br><span class="line"><span class="comment">//          PROFILE_BASELINE = 66,</span></span><br><span class="line"><span class="comment">//          PROFILE_MAIN     = 77,</span></span><br><span class="line"><span class="comment">//          PROFILE_HIGH    = 100,</span></span><br><span class="line"><span class="comment">//          PROFILE_HIGH10  = 110,</span></span><br><span class="line"><span class="comment">//          PROFILE_HIGH422 = 122,</span></span><br><span class="line"><span class="comment">//          PROFILE_HIGH444_PREDICTIVE = 244,</span></span><br><span class="line"><span class="comment">//      &#125;;</span></span><br><span class="line"><span class="comment">// 0x40: profile_compatibility</span></span><br><span class="line"><span class="comment">// 0x1F: AVCLevelIndication</span></span><br><span class="line"><span class="comment">// 用于声明H.264的level。level决定了解码器的解码能力，即最大多大的分辨率、帧率、码率。实际设置时，就是level值乘以10，例如level 1.0，设置值就是0x0A。level 3.0，设置值就是0x1E。比较例外的是level 1b，设置值是0x09</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0xFF: 6bits(111111) reserved &amp; lengthSizeMinusOne=4</span></span><br><span class="line"><span class="comment">// 0xE1: 3bits(111) reserved &amp; numOfSequenceParameterSets=1</span></span><br><span class="line"><span class="comment">// 0x0016: sequenceParameterSetLength=22</span></span><br><span class="line"><span class="comment">// 0x674D ~ 0CA8: sequenceParameterSetNALUnit</span></span><br><span class="line"><span class="comment">// 0x01: numOfPictureParameterSets=1</span></span><br><span class="line"><span class="comment">// 0x0004: pictureParameterSetLength=4</span></span><br><span class="line"><span class="comment">// 0x68EF3C 80: pictureParameterSetNALUnit</span></span><br></pre></td></tr></table></figure>
<h2 id="SPS-amp-PPS"><a href="#SPS-amp-PPS" class="headerlink" title="SPS &amp; PPS"></a>SPS &amp; PPS</h2><p>SPS：包含了初始化H.264解码器所需要的信息参数，包括编码所用的profile，level，视频分辨率，帧率，图像采样方式等。</p>
<p>PPS：一般没什么用，没有任何可以取用的视频信息。<br>关于SPSParser这一块，可以参考雷教主的<a href="http://blog.csdn.net/leixiaohua1020/article/details/45001033" target="_blank" rel="noopener">FFmpeg的H.264解码器源代码简单分析：解析器（Parser）</a>中的<code>ff_h264_decode_seq_parameter_set</code></p>
<h2 id="AVCVideoData"><a href="#AVCVideoData" class="headerlink" title="AVCVideoData"></a>AVCVideoData</h2><p>由上文的，<code>lengthSizeMinusOne</code>可知，NAL包长度为4，所以前面4个字节是长度。第5个字节的前五位为NAL包的类型，如下：</p>
<ul>
<li>NALU_TYPE_SLICE 1</li>
<li>NALU_TYPE_DPA 2</li>
<li>NALU_TYPE_DPB 3</li>
<li>NALU_TYPE_DPC 4</li>
<li>NALU_TYPE_IDR 5</li>
<li>NALU_TYPE_SEI 6</li>
<li>NALU_TYPE_SPS 7</li>
<li>NALU_TYPE_PPS 8</li>
<li>NALU_TYPE_AUD 9 // 访问分隔符</li>
<li>NALU_TYPE_EOSEQ 10</li>
<li>NALU_TYPE_EOSTREAM 11</li>
<li>NALU_TYPE_FILL 12<br>因此前面解析的时候，SPS头字节为67，<code>0x67 &amp; 0x1F</code>为7；PPS头字节为68，<code>0x68 &amp; 0x1F</code>为8。<code>0x6F &amp; 0x1F</code>为5，I帧；<code>0x41 &amp; 0x1F</code>为1，P帧。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例二进制片段</span></span><br><span class="line"><span class="comment">// Video Tag Data</span></span><br><span class="line"><span class="number">17010000</span> <span class="number">0000023</span>E <span class="number">66658882</span> <span class="number">02</span>BFF89C F12749F8 <span class="number">097290</span>A6 </span><br><span class="line">F881DD1A <span class="number">8E65</span>A5B4 <span class="number">89922</span>C82 B31F13D4 <span class="number">1E6</span>F996B DCCC7828 ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0x17010000 00: 上文有介绍，Video Tag参数之类的</span></span><br><span class="line"><span class="comment">// 0x00023E 66: NAL length=147046</span></span><br><span class="line"><span class="comment">// 0x65: 0x6F &amp; 0x1F=5，I帧</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>目前为止，flv的格式分析已经结束。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC" target="_blank" rel="noopener">H.264/MPEG-4 AVC - Wikipedia</a></li>
<li><a href="https://www.adobe.com/content/dam/acom/en/devnet/flv/video_file_format_spec_v10.pdf" target="_blank" rel="noopener">video_file_format_spec_v10</a>；</li>
<li><a href="http://guoh.org/lifelog/2013/10/exp-golomb-coding/" target="_blank" rel="noopener">Exponential-Golomb coding – 夏天人字拖</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-flv之VideoTag(1)[转]]]></title>
      <url>https://lucius0.github.io/2018/01/08/archivers/media-study-05/</url>
      <content type="html"><![CDATA[<p>初次学习有关音视频这一块的开发，主要是基于 <strong><a href="https://github.com/Bilibili/flv.js" target="_blank" rel="noopener">flv.js</a></strong> 的学习。这一块的知识概念实在是太多太深了，所以本人是先在本地做记录，后面会整理慢慢地上传与各位分享，假如有地方说错，请勘误。谢谢指点。</p>
<p>这里主要讲的是FLV的视频格式H.264，而H.264跟MPEG-4 Part 10、ISO/IEC 14496-10、MPEG-4 AVC其实都是同一个视频格式，也就是我们常说的H.264或AVC。那么我们常说的MPEG-4其实是指MPEG-4 Part 2(注意跟MPEG-2是两个概念)。更多的细节可以查看<a href="https://zh.wikipedia.org/wiki/MPEG-4" target="_blank" rel="noopener">MPEG-4 - 维基百科，自由的百科全书</a>、<a href="https://zh.wikipedia.org/wiki/H.264/MPEG-4_AVC" target="_blank" rel="noopener">H.264/MPEG-4 AVC - 维基百科，自由的百科全书</a>。总的来讲，H.264具有高压缩比，同时也对网络的兼容性好。</p>
<p>以下内容转自<a href="https://maxwellqi.github.io/ios-h264-summ/" target="_blank" rel="noopener">H.264码流以及H.264编解码的基本概念</a>。</p>
<h2 id="软编码和硬编码的概念"><a href="#软编码和硬编码的概念" class="headerlink" title="软编码和硬编码的概念"></a>软编码和硬编码的概念</h2><p>软编码：使用CPU进行编码。</p>
<p>硬编码：不使用CPU进行编码，使用显卡GPU,专用的DSP、FPGA、ASIC芯片等硬件进行编码。</p>
<h2 id="软编码和硬编码的比较"><a href="#软编码和硬编码的比较" class="headerlink" title="软编码和硬编码的比较"></a>软编码和硬编码的比较</h2><p>软编码：实现直接、简单，参数调整方便，升级易，但CPU负载重，性能较硬编码低，低码率下质量通常比硬编码要好一点。</p>
<p>硬编码：性能高，低码率下通常质量低于硬编码器，但部分产品在GPU硬件平台移植了优秀的软编码算法（如X264）的，质量基本等同于软编码。</p>
<h2 id="H-264编码原理以及I帧B帧P帧"><a href="#H-264编码原理以及I帧B帧P帧" class="headerlink" title="H.264编码原理以及I帧B帧P帧"></a>H.264编码原理以及I帧B帧P帧</h2><h3 id="H-264编码原理"><a href="#H-264编码原理" class="headerlink" title="H.264编码原理"></a>H.264编码原理</h3><p>H264是新一代的编码标准，以高压缩高质量和支持多种网络的流媒体传输著称，在编码方面，我理解的他的理论依据是：参照一段时间内图像的统计结果表明，在相邻几幅图像画面中，一般有差别的像素只有10%以内的点,亮度差值变化不超过2%，而色度差值的变化只有1%以内。所以对于一段变化不大图像画面，我们可以先编码出一个完整的图像帧A，随后的B帧就不编码全部图像，只写入与A帧的差别，这样B帧的大小就只有完整帧的1/10或更小！B帧之后的C帧如果变化不大，我们可以继续以参考B的方式编码C帧，这样循环下去。这段图像我们称为一个序列（序列就是有相同特点的一段数据），当某个图像与之前的图像变化很大，无法参考前面的帧来生成，那我们就结束上一个序列，开始下一段序列，也就是对这个图像生成一个完整帧A1，随后的图像就参考A1生成，只写入与A1的差别内容。</p>
<p>在H264协议里定义了三种帧，完整编码的帧叫I帧，参考之前的I帧生成的只包含差异部分编码的帧叫P帧，还有一种参考前后的帧编码的帧叫B帧。</p>
<p>H264采用的核心算法是帧内压缩和帧间压缩，帧内压缩是生成I帧的算法，帧间压缩是生成B帧和P帧的算法。</p>
<h3 id="对序列的说明"><a href="#对序列的说明" class="headerlink" title="对序列的说明"></a>对序列的说明</h3><p>在H264中图像以序列为单位进行组织，一个序列是一段图像编码后的数据流，以I帧开始，到下一个I帧结束。<br>一个序列的第一个图像叫做 IDR 图像（立即刷新图像），IDR 图像都是 I 帧图像。H.264 引入 IDR 图像是为了解码的重同步，当解码器解码到 IDR 图像时，立即将参考帧队列清空，将已解码的数据全部输出或抛弃，重新查找参数集，开始一个新的序列。这样，如果前一个序列出现重大错误，在这里可以获得重新同步的机会。IDR图像之后的图像永远不会使用IDR之前的图像的数据来解码。<br>一个序列就是一段内容差异不太大的图像编码后生成的一串数据流。当运动变化比较少时，一个序列可以很长，因为运动变化少就代表图像画面的内容变动很小，所以就可以编一个I帧，然后一直P帧、B帧了。当运动变化多时，可能一个序列就比较短了，比如就包含一个I帧和3、4个P帧。</p>
<h3 id="对三种帧的介绍"><a href="#对三种帧的介绍" class="headerlink" title="对三种帧的介绍"></a>对三种帧的介绍</h3><ul>
<li><p><strong>I帧</strong><br>为了更好地理解I帧的概念，我罗列了两种解释：</p>
<ul>
<li>帧内编码帧 ，I帧表示关键帧，你可以理解为这一帧画面的完整保留；解码时只需要本帧数据就可以完成（因为包含完整画面）。</li>
<li><p>帧内编码帧 又称intra picture，I 帧通常是每个 GOP（MPEG 所使用的一种视频压缩技术）的第一个帧，经过适度地压缩，做为随机访问的参考点，可以当成图象。I帧可以看成是一个图像经过压缩后的产物。</p>
<p><strong>I帧的特点：</strong></p>
<ul>
<li>它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输</li>
<li>解码时仅用I帧的数据就可重构完整图像</li>
<li>I帧描述了图像背景和运动主体的详情</li>
<li>I帧不需要参考其他画面而生成</li>
<li>I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量)</li>
<li>I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧</li>
<li>I帧不需要考虑运动矢量</li>
<li>I帧所占数据的信息量比较大</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>P帧</strong><br>为了更好地理解P帧的概念，我也罗列了两种解释：</p>
<ul>
<li>前向预测编码帧。P帧表示的是这一帧跟之前的一个关键帧（或P帧）的差别，解码时需要用之前缓存的画面叠加上本帧定义的差别，生成最终画面。（也就是差别帧，P帧没有完整画面数据，只有与前一帧的画面差别的数据）</li>
<li><p>前向预测编码帧 又称predictive-frame，通过充分将低于图像序列中前面已编码帧的时间冗余信息来压缩传输数据量的编码图像，也叫预测帧</p>
<p><strong>P帧的预测与重构：</strong>P帧是以I帧为参考帧,在I帧中找出P帧“某点”的预测值和运动矢量,取预测差值和运动矢量一起传送。在接收端根据运动矢量从I帧中找出P帧“某点”的预测值并与差值相加以得到P帧“某点”样值,从而可得到完整的P帧。</p>
<p><strong>P帧特点:</strong></p>
<ul>
<li>P帧是I帧后面相隔1~2帧的编码帧</li>
<li>P帧采用运动补偿的方法传送它与前面的I或P帧的差值及运动矢量(预测误差)</li>
<li>解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像</li>
<li>P帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧</li>
<li>P帧可以是其后面P帧的参考帧,也可以是其前后的B帧的参考帧</li>
<li>由于P帧是参考帧,它可能造成解码错误的扩散</li>
<li>由于是差值传送,P帧的压缩比较高</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>B帧</strong><br>为了更好地理解P帧的概念，我依然罗列了两种解释：</p>
<ul>
<li>双向预测内插编码帧。B帧是双向差别帧，也就是B帧记录的是本帧与前后帧的差别（具体比较复杂，有4种情况，但我这样说简单些），换言之，要解码B帧，不仅要取得之前的缓存画面，还要解码之后的画面，通过前后画面的与本帧数据的叠加取得最终的画面。B帧压缩率高，但是解码时CPU会比较累。</li>
<li><p>双向预测内插编码帧 又称bi-directional interpolated prediction frame，既考虑与源图像序列前面已编码帧，也顾及源图像序列后面已编码帧之间的时间冗余信息来压缩传输数据量的编码图像，也叫双向预测帧；</p>
<p><strong>B帧的预测与重构：</strong>B帧以前面的I或P帧和后面的P帧为参考帧,“找出”B帧“某点”的预测值和两个运动矢量,并取预测差值和运动矢量传送。接收端根据运动矢量在两个参考帧中“找出(算出)”预测值并与差值求和,得到B帧“某点”样值,从而可得到完整的B帧。</p>
<p><strong>B帧的特点：</strong></p>
<ul>
<li>B帧是由前面的I或P帧和后面的P帧来进行预测的</li>
<li>B帧传送的是它与前面的I或P帧和后面的P帧之间的预测误差及运动矢量</li>
<li>B帧是双向预测编码帧</li>
<li>B帧压缩比最高,因为它只反映丙参考帧间运动主体的变化情况,预测比较准确</li>
<li>B帧不是参考帧,不会造成解码错误的扩散</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>I、B、P各帧是根据压缩算法的需要，是人为定义的,它们都是实实在在的物理帧。一般来说，I帧的压缩率是7（跟JPG差不多），P帧是20，B帧可以达到50。可见使用B帧能节省大量空间，节省出来的空间可以用来保存多一些I帧，这样在相同码率下，可以提供更好的画质。</p>
<h3 id="对压缩算法的说明"><a href="#对压缩算法的说明" class="headerlink" title="对压缩算法的说明"></a>对压缩算法的说明</h3><p>h264的压缩方法:</p>
<ol>
<li>分组:把几帧图像分为一组(GOP，也就是一个序列),为防止运动变化,帧数不宜取多。</li>
<li>定义帧:将每组内各帧图像定义为三种类型,即I帧、B帧和P帧;</li>
<li>预测帧:以I帧做为基础帧,以I帧预测P帧,再由I帧和P帧预测B帧;</li>
<li>数据传输:最后将I帧数据与预测的差值信息进行存储和传输。</li>
</ol>
<p>帧内（Intraframe）压缩也称为空间压缩（Spatial compression）。当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，这实际上与静态图像压缩类似。帧内一般采用有损压缩算法，由于帧内压缩是编码一个完整的图像，所以可以独立的解码、显示。帧内压缩一般达不到很高的压缩，跟编码jpeg差不多。</p>
<p>帧间（Interframe）压缩的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点。也即连续的视频其相邻帧之间具有冗余信息,根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。帧间压缩也称为时间压缩（Temporal compression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩一般是无损的。帧差值（Frame differencing）算法是一种典型的时间压缩法，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。</p>
<p>顺便说下有损（Lossy ）压缩和无损（Lossy less）压缩。无损压缩也即压缩前和解压缩后的数据完全一致。多数的无损压缩都采用RLE行程编码算法。有损压缩意味着解压缩后的数据与压缩前的数据不一致。在压缩的过程中要丢失一些人眼和人耳所不敏感的图像或音频信息,而且丢失的信息不可恢复。几乎所有高压缩的算法都采用有损压缩,这样才能达到低数据率的目标。丢失的数据率与压缩比有关,压缩比越小，丢失的数据越多,解压缩后的效果一般越差。此外,某些有损压缩算法采用多次重复压缩的方式,这样还会引起额外的数据丢失。</p>
<h3 id="三种帧的不同"><a href="#三种帧的不同" class="headerlink" title="三种帧的不同"></a>三种帧的不同</h3><ul>
<li>I frame:自身可以通过视频解压算法解压成一张单独的完整的图片。</li>
<li>P frame：需要参考其前面的一个I frame 或者P frame来生成一张完整的图片。</li>
<li>B frame:则要参考其前一个I或者P帧及其后面的一个P帧来生成一张完整的图片。</li>
<li>两个I frame之间形成一个GOP，在x264中同时可以通过参数来设定bf的大小，即：I和P或者两个P之间B的数量。</li>
<li>通过上述基本可以说明如果有B frame 存在的情况下一个GOP的最后一个frame一定是P.</li>
</ul>
<h3 id="DTS和PTS的不同"><a href="#DTS和PTS的不同" class="headerlink" title="DTS和PTS的不同"></a>DTS和PTS的不同</h3><p>DTS主要用于视频的解码,在解码阶段使用.PTS主要用于视频的同步和输出.在display的时候使用.在没有B frame的情况下.DTS和PTS的输出顺序是一样的。</p>
<p>例子:<br>下面给出一个GOP为15的例子,其解码的参照frame及其解码的顺序都在里面:<br><img src="/images/qiniu/180108004838.png" alt=""><br>如上图：I frame 的解码不依赖于任何的其它的帧.而p frame的解码则依赖于其前面的I frame或者P frame.B frame的解码则依赖于其前的最近的一个I frame或者P frame 及其后的最近的一个P frame.</p>
<h2 id="H-264流数据"><a href="#H-264流数据" class="headerlink" title="H.264流数据"></a>H.264流数据</h2><p>在H.264的语法中，有一个最基础的层，叫做Network Abstraction Layer, 简称为NAL。H.264流数据正是由一系列的NAL单元(NAL Unit, 简称NAUL)组成的。<br><img src="/images/qiniu/180108004954.png" alt=""><br>H264的码流由NALU单元组成,一个NALU可能包含有：</p>
<ul>
<li><p><strong>视频帧</strong><br>视频帧也就是视频片段，具体有 P帧, I帧，B帧<br><img src="/images/qiniu/180108005022.png" alt=""></p>
</li>
<li><p><strong>H.264属性合集-FormatDesc(包含 SPS和PPS)</strong><br>流数据中，属性集合可能是这样的：<br><img src="/images/qiniu/180108005131.png" alt=""></p>
</li>
</ul>
<h3 id="NALU-header"><a href="#NALU-header" class="headerlink" title="NALU header"></a>NALU header</h3><p>对于流数据来说，一个NAUL的Header中，可能是<code>0x00 00 01</code>或者是<code>0x00 00 00 01</code>作为开头(两者都有可能，下面以0x00 00 01作为例子)。0x00 00 01因此被称为开始码(Start code).<br><img src="/images/qiniu/180108005156.png" alt=""></p>
<p>总结以上知识，我们知道H264的码流由NALU单元组成，NALU单元包含视频图像数据和H264的参数信息。具体来说参数信息包含SPS（Sequence Parameter Set）和PPS（Picture Parameter Set）.如下图显示了一个H.264码流结构：<br><img src="/images/qiniu/180108005317.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-flv之AudioTag(2)]]></title>
      <url>https://lucius0.github.io/2018/01/03/archivers/media-study-04/</url>
      <content type="html"><![CDATA[<p>初次学习有关音视频这一块的开发，主要是基于 <strong><a href="https://github.com/Bilibili/flv.js" target="_blank" rel="noopener">flv.js</a></strong> 的学习。这一块的知识概念实在是太多太深了，所以本人是先在本地做记录，后面会整理慢慢地上传与各位分享，假如有地方说错，请勘误。谢谢指点。</p>
<p>上一篇讲解了AAC格式的音频格式，这篇就来讲解下MP3，不过现在几乎都是采取H.264 视频 + AAC音频，因为相似的码率来讲，AAC比MP3优秀（低码率下，MP3在高频段会经常发生丢失，而AAC则会有更高的高频延展），MP3的压缩率10：1 - 12：1，而AAC的压缩率18：1 - 20：1。<strong>MP3 文件的最小组成单位是帧。</strong></p>
<h2 id="MP3"><a href="#MP3" class="headerlink" title="MP3"></a>MP3</h2><p>mp3的<strong>Audio Tag Body</strong>的分析跟aac一样，这里无需多讲。mp3的文件结构图如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---------------</span><br><span class="line">|  ID3V2 Tag  |</span><br><span class="line">---------------</span><br><span class="line">|  MP3 Header | \</span><br><span class="line">---------------   帧结构(Frame)</span><br><span class="line">|  MP3 Data   | /</span><br><span class="line">---------------</span><br><span class="line">|  ......     |</span><br><span class="line">---------------</span><br><span class="line">|  MP3 Header |</span><br><span class="line">---------------</span><br><span class="line">|  MP3 Data   |</span><br><span class="line">---------------</span><br><span class="line">|  ID3V1 Tag  |</span><br><span class="line">---------------</span><br></pre></td></tr></table></figure></p>
<p>因此要从<strong>ID3V2 Tag</strong>，<strong>Frame</strong>，<strong>ID3V1 Tag</strong>这三方面入手。但是因为<strong>ID3V2</strong>经历了4个版本，而现代浏览器大多支持第3版，所以<strong>ID3V2</strong>一般指<strong>ID3V2.3</strong>。其中<strong>ID3V2</strong>是<strong>ID3V1</strong>的补充，并不是所有的MP3都有<strong>ID3V2</strong>补充，所以不是所有的MP3文件都有<strong>ID3V2</strong>。</p>
<p>示例片段：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">49443303</span> <span class="number">0000000</span>C <span class="number">462</span>C5453 <span class="number">53450000</span> <span class="number">000</span>D0000 <span class="number">004</span>C6176 <span class="number">6635362</span>E </span><br><span class="line"><span class="number">342E3130</span> <span class="number">3154504</span>F <span class="number">53000000</span> <span class="number">05000001</span> FFFE3100 <span class="number">5452434</span>B <span class="number">00000007</span> </span><br><span class="line"><span class="number">000001</span>FF FE320030 <span class="number">00415049</span> <span class="number">4300031</span>E C5000000 <span class="number">696</span>D6167 <span class="number">652</span>F6A70 </span><br><span class="line"><span class="number">67000000</span> FFD8FFE0 <span class="number">00104</span>A46 <span class="number">49460001</span> <span class="number">01010048</span> <span class="number">00480000</span> FFDB0043 </span><br><span class="line"><span class="number">00020101</span> <span class="number">01010102</span> <span class="number">01010102</span> <span class="number">02020202</span> <span class="number">04030202</span> <span class="number">02020504</span> <span class="number">04030406</span> </span><br><span class="line"><span class="number">05060606</span> <span class="number">05060606</span> <span class="number">07090806</span> <span class="number">07090706</span> <span class="number">06080</span>B08 <span class="number">090</span>A0A0A <span class="number">0</span>A0A0608 </span><br><span class="line"><span class="number">0B0</span>C0B0A <span class="number">0</span>C090A0A <span class="number">0</span>AFFDB00 <span class="number">43010202</span> <span class="number">02020202</span> <span class="number">05030305</span> <span class="number">0</span>A070607 </span><br><span class="line"><span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A </span><br><span class="line"><span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0A0A0A <span class="number">0</span>A0AFFC0 <span class="number">00110802</span> </span><br><span class="line"><span class="number">80028003</span> <span class="number">01110002</span> <span class="number">11010311</span> <span class="number">01</span>FFC400 <span class="number">1E000000</span> <span class="number">07010101</span> <span class="number">01000000</span> </span><br><span class="line"><span class="number">00000000</span> <span class="number">00000304</span> <span class="number">05060708</span> <span class="number">09020100</span> <span class="number">0</span>AFFC400 <span class="number">4</span>B100002 <span class="number">01020502</span></span><br></pre></td></tr></table></figure></p>
<h3 id="ID3V2-Tag"><a href="#ID3V2-Tag" class="headerlink" title="ID3V2 Tag"></a>ID3V2 Tag</h3><p>ID3V2是变长标签，这也给了它很好的扩展性，包含了作者，作曲，专辑等信息，扩展了ID3V1的信息量。大端序排序。</p>
<p><strong>标签头(10bytes)</strong></p>
<ul>
<li>标识：3个字节。头部信息，必须为‘ID3’，否则认为标签不存在，十六进制为<code>494433</code>。</li>
<li>版本号：1个字节。</li>
<li>副版本号：1个字节。</li>
<li>标志：1个字节。标志，如abc0 0000。<ul>
<li>a：非同步编码</li>
<li>b：扩展标签头（该例子为0，所以没有下面的扩展标签头）</li>
<li>c：测试指示为</li>
</ul>
</li>
<li>大小：4个字节。长度(包含标签帧)，格式如<code>0xxxxxxx 0xxxxxxx 0xxxxxxx 0xxxxxxx</code>。所以size的计算方式：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 000C462C</span></span><br><span class="line">total_size = </span><br><span class="line">    <span class="comment">// (0x00 &amp; 0x7F) * 0x200000 = 0</span></span><br><span class="line">    (Size[<span class="number">0</span>] &amp; <span class="number">0x7F</span>) * <span class="number">0x200000</span> </span><br><span class="line">    <span class="comment">// (0x0C &amp; 0x7F) * 0x4000 = 0x30000</span></span><br><span class="line">　　+(Size[<span class="number">1</span>] &amp; <span class="number">0x7F</span>) * <span class="number">0x4000</span> </span><br><span class="line">    <span class="comment">// (0x46 &amp; 0x7F) * 0x80 = 0x2300</span></span><br><span class="line">　　+(Size[<span class="number">2</span>] &amp; <span class="number">0x7F</span>) * <span class="number">0x80</span> </span><br><span class="line">    <span class="comment">// (0x2C &amp; 0x7F) = 0x2C</span></span><br><span class="line">　　+(Size[<span class="number">3</span>] &amp; <span class="number">0x7F</span>)</span><br><span class="line"><span class="comment">// 0x3232C = 205612</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>扩展标签头(10bytes)</strong></p>
<ul>
<li>大小：4个字节。size = byte0 <em> 0x200000 + byte1 </em> 0x4000 + byte2 * 0x80 + byte3</li>
<li>标志：2个字节。</li>
<li>补空大小    ：4个字节。你可以在所有的标签帧后面添加补空数据，也可以预留空间存放额外的帧，使得整个标签大小比标签头中的大小要更大，这里记录的就是增加的大小，一般不用。</li>
</ul>
<p><strong>标签帧</strong></p>
<ul>
<li><p>帧标识：4个字节</p>
<ul>
<li>TIT2=标题 表示内容为这首歌的标题，下同</li>
<li>TPE1=作者</li>
<li>TALB=专集</li>
<li>TRCK=音轨 格式：N/M 其中N为专集中的第N首，M为专集中共M首，N和M为ASCII码表示的数字</li>
<li>TYER=年代 是用ASCII码表示的数字</li>
<li>TCON=类型 直接用字符串表示</li>
<li>COMM=备注 格式：”eng\0备注内容”，其中eng表示备注所使用的自然语言<br>例子片段1为：<code>5453 5345 // TSSE</code>；<br>例子片段2为：<code>5450 4F53 // TPOS</code>。<br>……</li>
</ul>
</li>
<li><p>帧大小：4个字节。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">size = size[<span class="number">0</span>] * <span class="number">0x1000000</span> + </span><br><span class="line">    size[<span class="number">1</span>] * <span class="number">0x10000</span> + </span><br><span class="line">    size[<span class="number">2</span>] * <span class="number">0x100</span> + </span><br><span class="line">    size[<span class="number">3</span>]; <span class="comment">// 0x0D = 13</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>标志：2个字节。如：abc00000ijk00000</p>
<ul>
<li>a：标签保护标志，设置时认为此帧作废</li>
<li>b：文件保护标志，设置时认为此帧作废</li>
<li>c：只读标志，设置时认为此帧不能修改(但我没有找到一个软件理会这个标志)</li>
<li>i：压缩标志，设置时一个字节存放两个BCD 码表示数字</li>
<li>j：加密标志(没有见过哪个MP3 文件的标签用了加密)</li>
<li>k：组标志，设置时说明此帧和其他的某帧是一组</li>
</ul>
</li>
<li>帧数据：帧大小size个字节。(例子片段为：<code>004C6176 6635362E 342E3130 31</code>)</li>
</ul>
<h3 id="ID3V1-Tag"><a href="#ID3V1-Tag" class="headerlink" title="ID3V1 Tag"></a>ID3V1 Tag</h3><p>包含了作者，作曲，专辑等信息，固定长度为128bytes。</p>
<ul>
<li>Header：3bytes，为’TAG’</li>
<li>Title：30bytes</li>
<li>Artist：30bytes</li>
<li>Album：30bytes</li>
<li>Year：4bytes</li>
<li>Comment：28bytes</li>
<li>Reserve：1byte，保留</li>
<li>Track：1byte</li>
<li>Genre：1byte</li>
</ul>
<h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><p>每个帧都是独立的，它由帧头、附加信息和声音数据组成，其长度随位率的不同而不等，通常每个帧的播放时间为26ms秒，且音频长度为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Length(MAIN_DATA) = ((version == MPEG1) ? 144 : 72) * bitrate / frequency + padding;</span><br></pre></td></tr></table></figure></p>
<p>MP3帧结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-------------------------</span><br><span class="line">| 帧 |    帧头(4bytes)   |</span><br><span class="line">|    | ------------------</span><br><span class="line">| 结 |  CRC,可选(2bytes) |</span><br><span class="line">|    | ------------------</span><br><span class="line">| 构 |      音频数据     |</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure></p>
<p>所以帧头（AAAAAAAA  AAABBCCD  EEEEFFGH  IIJJKLMM ）结构如下：<br>sync：11位。帧同步数据，可以通过查找同步位来确定帧的起始位置，通常情况下全部被设置为1</p>
<ul>
<li>version：2位。MPEG音频版本号<ul>
<li>00：MPEG 2.5，非官方版本</li>
<li>01：保留</li>
<li>10：MPEG 2</li>
<li>11：MPEG 1</li>
</ul>
</li>
<li>layer：2位。层<ul>
<li>00：保留</li>
<li>01：Layer 3</li>
<li>10：Layer 2</li>
<li>11：Layer 1</li>
</ul>
</li>
<li>errorProtection：1位。CRC校验位。0则会有2个字节的CRC校验位；1则无</li>
<li>bitRateIndex：4位。比特率索引值，单位kbps。<br><img src="/images/180103001123.png" alt=""></li>
<li>sampleRateIndex：2位。采样率索引，单位Hz。<br><img src="/images/180103001206.png" alt=""></li>
<li>padding：1位。补充位。0表示无填充，1则有填充。对于Layer 1，填充位长度为4个字节；Layer2 和Layer3 的填充位长度则有1个字节。</li>
<li>extension：1位。私有标志位。</li>
<li>channelMode：2位。声道模式。<ul>
<li>00：立体声</li>
<li>01：联合立体声</li>
<li>10：双声道</li>
<li>11：单声道</li>
</ul>
</li>
<li>modeExtension：2位。模式的扩展，只有声道为联合立体声时才有意义。</li>
<li>copyright：1位。版权标志。</li>
<li>original：1位。原版标志。</li>
<li>emphasis：强调方式。</li>
</ul>
<h2 id="关于flv-js"><a href="#关于flv-js" class="headerlink" title="关于flv.js"></a>关于flv.js</h2><p>我在第一篇的时候说过，flv是音频格式只有aac，而f4v的音频格式才有了支持aac跟mp3。然后我在<a href="http://download.macromedia.com/f4v/video_file_format_spec_v10_1.pdf" target="_blank" rel="noopener">video_file_format_spec</a>却没有找到关于mp3的解析，反而通过了分析工具才获知假如音频为mp3，则是不需要解析ID3那部分的，直接解析<strong>Frame</strong>这一部分。所以flv.js代码片段为，而这部分的解释参考上面<strong>Frame</strong>部分：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (array[<span class="number">0</span>] !== <span class="number">0xFF</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ver = (array[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x03</span>;</span><br><span class="line"><span class="keyword">let</span> layer = (array[<span class="number">1</span>] &amp; <span class="number">0x06</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bitrate_index = (array[<span class="number">2</span>] &amp; <span class="number">0xF0</span>) &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line"><span class="keyword">let</span> sampling_freq_index = (array[<span class="number">2</span>] &amp; <span class="number">0x0C</span>) &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> channel_mode = (array[<span class="number">3</span>] &gt;&gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x03</span>;</span><br><span class="line"><span class="keyword">let</span> channel_count = channel_mode !== <span class="number">3</span> ? <span class="number">2</span> : <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> sample_rate = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> bit_rate = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> object_type = <span class="number">34</span>;  <span class="comment">// Layer-3, listed in MPEG-4 Audio Object Types</span></span><br><span class="line"><span class="keyword">let</span> codec = <span class="string">'mp3'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(ver) &#123;</span><br><span class="line">	sample_rate = <span class="keyword">this</span>._mpegAudioV25SampleRateTable[sampling_freq_index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(layer) &#123;</span><br><span class="line">	bit_rate = <span class="keyword">this</span>._mpegAudioL3BitRateTable[bitrate_index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://wiki.gimoo.net/view/10352.html" target="_blank" rel="noopener">ID3_技术百科</a></li>
<li><a href="http://blog.csdn.net/u014294166/article/details/53153507" target="_blank" rel="noopener">分析ID3格式 - CSDN博客</a></li>
<li><a href="http://blog.csdn.net/u013904227/article/details/52184038" target="_blank" rel="noopener">MP3文件格式全解 - YellowMax        - CSDN博客</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-flv之AudioTag(1)]]></title>
      <url>https://lucius0.github.io/2017/12/27/archivers/media-study-03/</url>
      <content type="html"><![CDATA[<p>初次学习有关音视频这一块的开发，主要是基于 <strong><a href="https://github.com/Bilibili/flv.js" target="_blank" rel="noopener">flv.js</a></strong> 的学习。这一块的知识概念实在是太多太深了，所以本人是先在本地做记录，后面会整理慢慢地上传与各位分享，假如有地方说错，请勘误。谢谢指点。</p>
<p>在第一篇<a href="https://lucius0.github.io/2017/12/25/archivers/media-study-01/">flv初认识</a>，我们可以知道，解析<strong>Tag Header</strong>的其实无论是ScriptTag，AudioTag，还是VideoTag，实际上的规范都是一样的，都是11个字节的<strong>Tag Header</strong>，唯一区分类型的就是。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tagType = v.getUint8(<span class="number">0</span>); <span class="comment">// 0x08表示音频Tag</span></span><br></pre></td></tr></table></figure></p>
<p><strong>Audio Tag Body</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> soundSpec = v.getUint8(<span class="number">0</span>); <span class="comment">// 第1个字节，音频参数格式</span></span><br><span class="line"><span class="keyword">let</span> soundFormat = soundSpec &gt;&gt;&gt; <span class="number">4</span>; <span class="comment">// 前4位，标识音频数据的格式，这里只对AAC跟MP3做处理。</span></span><br><span class="line"><span class="keyword">let</span> soundRateIndex = (soundSpec &amp; <span class="number">12</span>) &gt;&gt;&gt; <span class="number">2</span>; <span class="comment">// 5、6位，音频采样率，flv</span></span><br><span class="line"><span class="keyword">if</span> (soundRateIndex &gt;= <span class="number">0</span> &amp;&amp; soundRateIndex &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">    soundRate = [<span class="number">5500</span>, <span class="number">11025</span>, <span class="number">22050</span>, <span class="number">44100</span>, <span class="number">48000</span>][soundRateIndex];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> soundSize = (soundSpec &amp; <span class="number">2</span>) &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">// 第7位，采样精度</span></span><br><span class="line"><span class="keyword">let</span> soundType = (soundSpec &amp; <span class="number">1</span>); <span class="comment">// 第8位，音频类型</span></span><br></pre></td></tr></table></figure></p>
<p>这里我产生疑问了。flv不是只支持5500, 11025, 22050, 44100的采样率吗？为什么作者还多加了一个48000？ 这里可以查到采样率的信息<a href="https://www.adobe.com/content/dam/acom/en/devnet/flv/video_file_format_spec_v10.pdf" target="_blank" rel="noopener">video_file_format_spec_v10</a>，@1。有知道的胖友麻烦告知一下，谢谢。<br><img src="/images/qiniu/171227220536.png" alt=""></p>
<h2 id="AAC"><a href="#AAC" class="headerlink" title="AAC"></a>AAC</h2><blockquote>
<p>AAC是高级音频编码（Advanced Audio Coding）的缩写，出现于1997年，最初是基于MPEG-2的音频编码技术。由Fraunhofer IIS、Dolby Laboratories、AT&amp;T、Sony等公司共同开发，目的是取代MP3格式。2000年，MPEG-4标准出台，AAC重新集成了其它技术（PS,SBR），为区别于传统的MPEG-2 AAC(MPEG-2 Part7)，故含有SBR或PS特性的AAC又称为MPEG-4 AAC(MPEG-4 Part3)。<br>AAC是新一代的音频有损压缩技术，它通过一些附加的编码技术（比如PS,SBR等），衍生出了LC-AAC,HE-AAC,HE-AACv2三种主要的编码，LC-AAC就是比较传统的AAC。</p>
</blockquote>
<p>AAC即为上文提到的<code>soundFormat</code>为0xA的音频格式，而AACAudioData是在Flash Player 9以上支持的。<br><img src="/images/qiniu/171227220925.png" alt=""><br>代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 减去 soundSpec</span></span><br><span class="line">parseAACAudioData(arrayBuffer, dataOffset + <span class="number">1</span>, dataSize - <span class="number">1</span>); </span><br><span class="line"><span class="comment">// 0: AAC sequence header</span></span><br><span class="line"><span class="comment">// 1: AAC raw</span></span><br><span class="line"><span class="comment">// 一般Sequence Header为第一个Audio Tag，并且全文件只出现一次</span></span><br><span class="line">result.packetType = array[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 这里只针对了AAC sequence header作了处理，而AAC raw则就是Audio payload。dataOffset+1，跳过了上文提到的AACPacketType，1个字节</span></span><br><span class="line"><span class="comment">// ADTS</span></span><br><span class="line">parseAACAudioSpecificConfig(arrayBuffer, dataOffset + <span class="number">1</span>, dataSize - <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<p><strong>AAC sequence header</strong>包含了AudioSpecificConfig，有更详细音频的信息，但这种包只出现一次，而且是第一个Audio Tag，因为后面的音频ES流需要该header的ADST(Audio Data Transport Stream)头。<strong>AAC raw</strong>则包含音频ES流了，也就是audio payload，也就是说ADTS头可以看成AAC的frameheader。<a href="http://blog.csdn.net/tx3344/article/details/7414543" target="_blank" rel="noopener">【多媒体封装格式详解】— AAC ADTS格式分析</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------</span><br><span class="line">|                         ADTS AAC                           |</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">| ADTS_header	| AAC ES |     ...    | ADTS_header | AAC ES |</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>
<p>关于Audio Specific Config，可以看<a href="http://read.pudn.com/downloads98/doc/comm/401153/14496/ISO_IEC_14496-3%20Part%203%20Audio/C036083E_SUB1.PDF" target="_blank" rel="noopener">ISO 14496-3</a>，也可以在ffmpeg中找到对应的解析函数，<code>ff_mpeg4audio_get_config()</code><br><img src="/images/qiniu/171227221451.png" alt=""><br>Audio Object Types和Sampling Frequency Index在<a href="https://wiki.multimedia.cx/index.php?title=MPEG-4_Audio" target="_blank" rel="noopener">MPEG-4_Audio</a>文章中有详细描述。</p>
<h3 id="Audio-Object-Types"><a href="#Audio-Object-Types" class="headerlink" title="Audio Object Types"></a>Audio Object Types</h3><ul>
<li>0: Null</li>
<li>1: AAC Main</li>
<li>2: AAC LC (Low Complexity)</li>
<li>3: AAC SSR (Scalable Sample Rate)</li>
<li>4: AAC LTP (Long Term Prediction)</li>
<li>5: HE-AAC / AAC SBR (Spectral Band Replication)</li>
<li>6: AAC Scalable</li>
<li>7: TwinVQ</li>
<li>…</li>
</ul>
<h3 id="Sampling-Frequency-Index"><a href="#Sampling-Frequency-Index" class="headerlink" title="Sampling Frequency Index"></a>Sampling Frequency Index</h3><ul>
<li>0: 96000 Hz</li>
<li>1: 88200 Hz</li>
<li>2: 64000 Hz</li>
<li>3: 48000 Hz</li>
<li>4: 44100 Hz</li>
<li>5: 32000 Hz</li>
<li>6: 24000 Hz</li>
<li>7: 22050 Hz</li>
<li>8: 16000 Hz</li>
<li>9: 12000 Hz</li>
<li>10: 11025 Hz</li>
<li>11: 8000 Hz</li>
<li>12: 7350 Hz</li>
<li>13: Reserved</li>
<li>14: Reserved</li>
<li>15: frequency is written explicitly</li>
</ul>
<h3 id="Channel-Configurations"><a href="#Channel-Configurations" class="headerlink" title="Channel Configurations"></a>Channel Configurations</h3><ul>
<li>0: Defined in AOT Specifc Config    </li>
<li>1: 1 channel: front-center</li>
<li>2: 2 channels: front-left, front-right</li>
<li>3: 3 channels: front-center, front-left, front-right</li>
<li>4: 4 channels: front-center, front-left, front-right, back-center</li>
<li>5: 5 channels: front-center, front-left, front-right, back-left, back-right</li>
<li>6: 6 channels: front-center, front-left, front-right, back-left, back-right, LFE-channel</li>
<li>7: 8 channels: front-center, front-left, front-right, side-left, side-right, back-left, back-right, LFE-channel</li>
<li>8-15: Reserved</li>
</ul>
<p>伪代码为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> bits: object type</span><br><span class="line"><span class="number">4</span> bits: frequency index</span><br><span class="line"><span class="keyword">if</span> (frequency index == <span class="number">15</span>)</span><br><span class="line">    <span class="number">24</span> bits: frequency</span><br><span class="line"><span class="number">4</span> bits: channel configuration</span><br><span class="line"><span class="number">1</span> bit: frame length flag</span><br><span class="line"><span class="number">1</span> bit: dependsOnCoreCoder</span><br><span class="line"><span class="number">1</span> bit: extensionFlag</span><br><span class="line"></span><br><span class="line"><span class="number">5</span> bits: <span class="number">2</span> (<span class="number">00010</span>) <span class="comment">// Audio Object Type - AAC LC</span></span><br><span class="line"><span class="number">4</span> bits: <span class="number">4</span> (<span class="number">0100</span>)  <span class="comment">// Sampling Frequency Index - 44kHz</span></span><br><span class="line"><span class="number">4</span> bits: <span class="number">2</span> (<span class="number">0010</span>)  <span class="comment">// Channel - left，right</span></span><br><span class="line"><span class="number">3</span> bits: <span class="number">0</span> (<span class="number">000</span>)   <span class="comment">// Reserved</span></span><br><span class="line"></span><br><span class="line">Byte <span class="number">1</span>: <span class="number">00010010</span></span><br><span class="line">Byte <span class="number">2</span>: <span class="number">00010000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 bytes</span></span><br><span class="line"><span class="number">00010</span>|<span class="number">010</span> <span class="number">0</span>|<span class="number">0010</span>|<span class="number">000</span></span><br><span class="line"> [<span class="number">2</span>]   [<span class="number">4</span>]   [<span class="number">2</span>] [<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p>
<p>现在我们再来看看flv.js对于这一块的处理。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5 bits Audio Object Type</span></span><br><span class="line">audioObjectType = originalAudioObjectType = array[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 4 bits Sampling Frequency Index</span></span><br><span class="line">samplingIndex = ((array[<span class="number">0</span>] &amp; <span class="number">0x07</span>) &lt;&lt; <span class="number">1</span>) | (array[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">7</span>);</span><br><span class="line"><span class="comment">// 4 bits Channel Config</span></span><br><span class="line">channelConfig = (array[<span class="number">1</span>] &amp; <span class="number">0x78</span>) &gt;&gt;&gt; <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p>
<p>针对各设备的兼容性处理，<code>audioObjectType</code>的处理可以参考这里<a href="https://cconcolato.github.io/media-mime-support/" target="_blank" rel="noopener">Media MIME Support</a>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// firefox - firefox: freq less than 24kHz = AAC SBR (HE-AAC)</span></span><br><span class="line"><span class="comment">// Android: always use AAC</span></span><br><span class="line"><span class="comment">// for other browsers (Chrome/Vivaldi/Opera ...): always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)</span></span><br></pre></td></tr></table></figure></p>
<p>而<code>extensionSamplingIndex</code>，这里其实我也很迷糊为什么要这么处理，精力有限也没有深入去找资料了，有知道的朋友请教一下。谢谢了。唯一清楚找到的是在hlsjs中也有相关的代码，作者这一块是参考hlsjs的。 @2</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 音频帧采样时间要跟采样率有关的值一致。否则，浏览器将强制调整播放时间戳以使音频无缝播放，这可能导致A / V异步。</span></span><br><span class="line">meta.refSampleDuration = <span class="number">1024</span> / meta.audioSampleRate * meta.timescale</span><br></pre></td></tr></table></figure>
<p>可以参考下图：<br><img src="/images/qiniu/171227222007.png" alt=""></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.adobe.com/content/dam/acom/en/devnet/flv/video_file_format_spec_v10.pdf" target="_blank" rel="noopener">video_file_format_spec_v10</a></li>
<li><a href="https://xiaozhuanlan.com/topic/6253091478" target="_blank" rel="noopener">AAC Audio Data</a></li>
<li><a href="https://wiki.multimedia.cx/index.php/Understanding_AAC" target="_blank" rel="noopener">Understanding_AAC</a></li>
<li><a href="https://wiki.multimedia.cx/index.php?title=MPEG-4_Audio" target="_blank" rel="noopener">MPEG-4_Audio</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%80%B2%E9%9A%8E%E9%9F%B3%E8%A8%8A%E7%B7%A8%E7%A2%BC" target="_blank" rel="noopener">高级音频编码 - 维基百科，自由的百科全书</a></li>
<li><a href="https://stackoverflow.com/questions/18603605/what-are-the-limitations-of-html5-audio-on-android-and-ios" target="_blank" rel="noopener">html - What are the limitations of HTML5 audio on Android and iOS? - Stack Overflow</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-flv之ScriptTag]]></title>
      <url>https://lucius0.github.io/2017/12/26/archivers/media-study-02/</url>
      <content type="html"><![CDATA[<p>初次学习有关音视频这一块的开发，主要是基于 <strong><a href="https://github.com/Bilibili/flv.js" target="_blank" rel="noopener">flv.js</a></strong> 的学习。这一块的知识概念实在是太多太深了，所以本人是先在本地做记录，后面会整理慢慢地上传与各位分享，假如有地方说错，请勘误。谢谢指点。</p>
<h2 id="解析FLV-Header-9bytes"><a href="#解析FLV-Header-9bytes" class="headerlink" title="解析FLV-Header(9bytes)"></a>解析FLV-Header(9bytes)</h2><p>在<a href="https://lucius0.github.io/2017/12/25/archivers/media-study-01/">上一篇</a>中我们得知，FLV-Header其实很好解析，无非就是读出前面的9个字节。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);<span class="comment">// buffer为读取的二进制缓冲区</span></span><br><span class="line">data[<span class="number">0</span>]; <span class="comment">// 0x46</span></span><br><span class="line">data[<span class="number">1</span>]; <span class="comment">// 0x4C</span></span><br><span class="line">data[<span class="number">2</span>]; <span class="comment">// 0x56</span></span><br><span class="line">data[<span class="number">3</span>]; <span class="comment">// 0x01</span></span><br><span class="line"><span class="comment">// 以上四个字节就是前文提到的，分别代表类型标志符'F','L','V'及版本号0x01</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">4</span>]; <span class="comment">// 0x05表示音视频tag都有，0x04表示只有音频tag，0x01表示只有视频tag</span></span><br><span class="line"><span class="comment">// hasAudio = (data[4] &amp; 0x04 === 4)</span></span><br><span class="line"><span class="comment">// hasVideo = (data[4] &amp; 0x01 === 1)</span></span><br><span class="line"></span><br><span class="line">data.slice(<span class="number">5</span>, <span class="number">5</span> + <span class="number">4</span>); <span class="comment">// 0x09，四个字节，HeaderSize</span></span><br></pre></td></tr></table></figure></p>
<h2 id="解析FLV-Body"><a href="#解析FLV-Body" class="headerlink" title="解析FLV-Body"></a>解析FLV-Body</h2><h3 id="Previous-Tag-Size-0"><a href="#Previous-Tag-Size-0" class="headerlink" title="Previous Tag Size #0"></a>Previous Tag Size #0</h3><p>因为第一个<code>Previous Tag Size</code>基本上都是固定的，占用4个字节，可以略过的了。关于大端小端：<a href="http://imweb.io/topic/57fe263b2a25000c315a3d8a" target="_blank" rel="noopener">网络序？本地序？傻傻分不清楚</a>，而flv是采取大端序的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> <span class="built_in">DataView</span>(chunk, offset);</span><br><span class="line"><span class="keyword">let</span> prevTagSize0 = v.getUint32(<span class="number">0</span>, !le); <span class="comment">// 4个字节，并且以大端读取</span></span><br><span class="line"><span class="comment">// v.getUint32(0, false); // 也是表示以大端读取</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Tag-1-ScriptTag"><a href="#Tag-1-ScriptTag" class="headerlink" title="Tag # 1( ScriptTag )"></a>Tag # 1( ScriptTag )</h3><p><strong>Tag Header(11bytes)</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 11bytes</span></span><br><span class="line"><span class="keyword">let</span> tagType = v.getUint8(<span class="number">0</span>); <span class="comment">// 从第1个字节读取一个8位无符号整数</span></span><br><span class="line"><span class="keyword">let</span> dataSize = v.getUint32(<span class="number">0</span>, !le) &amp; <span class="number">0x00FFFFFF</span>; <span class="comment">// 大端读取，截取3个字节</span></span><br><span class="line"><span class="comment">// 获取 timestamp</span></span><br><span class="line"><span class="keyword">let</span> ts2 = v.getUint8(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> ts1 = v.getUint8(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> ts0 = v.getUint8(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">let</span> ts3 = v.getUint8(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">let</span> timestamp = ts0 | (ts1 &lt;&lt; <span class="number">8</span>) | (ts2 &lt;&lt; <span class="number">16</span>) | (ts3 &lt;&lt; <span class="number">24</span>);</span><br><span class="line"><span class="comment">// 获取streamId</span></span><br><span class="line"><span class="keyword">let</span> streamId = v.getUint32(<span class="number">7</span>, !le) &amp; <span class="number">0x00FFFFFF</span>;</span><br></pre></td></tr></table></figure></p>
<p><strong>Tag Body</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面的字节总共为11个字节，所以offset + 11，应该为24</span></span><br><span class="line"><span class="keyword">let</span> dataOffset = offset + <span class="number">11</span>;</span><br></pre></td></tr></table></figure></p>
<p>根据上一篇的结构图，这里就是ScriptTag的Tag Data中的key，关于<a href="https://en.wikipedia.org/wiki/Action_Message_Format" target="_blank" rel="noopener">AMF</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AMFParser</span></span><br><span class="line"><span class="keyword">let</span> name = AMF.parseValue(arrayBuffer, dataOffset, dataSize);</span><br><span class="line">------------------------ parseValue ------------------------</span><br><span class="line"><span class="comment">// 由上一篇知道，第1个字节type为AMF String类型，0x02</span></span><br><span class="line"><span class="keyword">let</span> offset = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">let</span> type = v.getUint8(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">let</span> value;</span><br><span class="line"><span class="keyword">let</span> amfstr = AMF.parseString(arrayBuffer, dataOffset + <span class="number">1</span>, dataSize - <span class="number">1</span>); <span class="comment">// 除去type长度</span></span><br><span class="line">value = amfstr.data;</span><br><span class="line">offset += amfstr.size;</span><br><span class="line">------------------------ parseString ------------------------</span><br><span class="line"><span class="keyword">let</span> v = <span class="keyword">new</span> <span class="built_in">DataView</span>(arrayBuffer, dataOffset, dataSize);</span><br><span class="line"><span class="comment">// 长度占据2个字节，0x0000A</span></span><br><span class="line"><span class="comment">// 大于且包括两个字节一般都需要指定存储方式</span></span><br><span class="line"><span class="keyword">let</span> length = v.getUint16(<span class="number">0</span>, !le); </span><br><span class="line"><span class="comment">// 读取key值，第一个为onMetaData。</span></span><br><span class="line">str = decodeUTF8(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(arrayBuffer, dataOffset + <span class="number">2</span>, length));</span><br></pre></td></tr></table></figure></p>
<p>ScriptTag的Tag Data中的value。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = AMF.parseValue(arrayBuffer, dataOffset + name.size, dataSize - name.size);</span><br><span class="line">------------------------ parseValue ------------------------</span><br><span class="line"><span class="keyword">let</span> offset = <span class="number">1</span>; </span><br><span class="line"><span class="keyword">let</span> value = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> type = v.getUint8(<span class="number">0</span>); <span class="comment">// 0x08，ECMA array</span></span><br><span class="line">offset += <span class="number">4</span>;  <span class="comment">// ECMAArrayLength(UI32)</span></span><br><span class="line"><span class="keyword">let</span> terminal = <span class="number">0</span>;  <span class="comment">// workaround for malformed MixedArrays which has missing ScriptDataObjectEnd（作者已经说明了，这一块是为了解决有些混合数组缺失ScriptDataObjectEnd数据，因此在下面对terminal以及offset作了兼容处理)</span></span><br><span class="line"><span class="comment">// 上一篇已经说了，最后的3个字节固定值0x000009表示value值结束</span></span><br><span class="line"><span class="keyword">if</span> ((v.getUint32(dataSize - <span class="number">4</span>, !le) &amp; <span class="number">0x00FFFFFF</span>) === <span class="number">9</span>) &#123;</span><br><span class="line">    terminal = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)</span></span><br><span class="line"><span class="keyword">while</span> (offset &lt; dataSize - <span class="number">8</span>) &#123;  </span><br><span class="line">    <span class="keyword">let</span> amfvar = AMF.parseVariable(arrayBuffer, dataOffset + offset, dataSize - offset - terminal);</span><br><span class="line">    <span class="keyword">if</span> (amfvar.objectEnd) <span class="keyword">break</span>;</span><br><span class="line">    value[amfvar.data.name] = amfvar.data.value;</span><br><span class="line">    offset += amfvar.size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>后面即为各元素的封装，为一一对应的键值对，常见的MetaData如下：</p>
<ul>
<li>duration：时长</li>
<li>width：视频宽度</li>
<li>height：视频高度</li>
<li>videodatarate：视频码率</li>
<li>framerate：视频帧率</li>
<li>videocodecid：视频编码方式</li>
<li>audiosamplerate：音频采样率</li>
<li>audiosamplesize：音频采样精度</li>
<li>stereo：是否为立体声</li>
<li>audiocodecid：音频编码方式</li>
<li>filesize：文件大小</li>
</ul>
<p>最后用3个字节的固定值0000 09表示value值结束。</p>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频学习-flv初认识]]></title>
      <url>https://lucius0.github.io/2017/12/25/archivers/media-study-01/</url>
      <content type="html"><![CDATA[<p>初次学习有关音视频这一块的开发，主要是基于 <strong><a href="https://github.com/Bilibili/flv.js" target="_blank" rel="noopener">flv.js</a></strong> 的学习。这一块的知识概念实在是太多太深了，所以本人是先在本地做记录，后面会整理慢慢地上传与各位分享，假如有地方说错，请勘误。谢谢指点。</p>
<h2 id="什么是FLV？"><a href="#什么是FLV？" class="headerlink" title="什么是FLV？"></a>什么是FLV？</h2><blockquote>
<p>Flash Video（简称FLV），是一种网络视频格式，用作串流媒体格式，它的出现有效地解决了视频文件导入Flash后，使导出的SWF文件体积庞大，不能在网络上有效使用等缺点。<br>一般FLV文件包在SWF PLAYER的壳里，并且FLV可以很好的保护原始地址，不容易被下载到，从而起到保护版权的作用。但还是有些视频格式转换软件将FLV转成一般的视频格式，如中国的软件格式工厂。随着视频网站的丰富，在2008年时这个格式已经非常普及，包括YouTube、NICONICO动画、Google Video、Yahoo! Video、MySpace，以及中国的优酷、酷6等大部分视频分享网站均采用这个格式。——- wiki百科</p>
</blockquote>
<h2 id="FLV的分类"><a href="#FLV的分类" class="headerlink" title="FLV的分类"></a>FLV的分类</h2><p>除了 flv（H264视频格式、AAC音频格式），还有 f4v，主要是为了突破 flv 的限制。 f4v 支持 H.264 视频格式之外，还支持 GIF、PNG 以及 JPEG；音频格式则有 AAC 以及 MP3 。<br><strong>PS：</strong> Adobe的规范中，UB 表示Unsigned Bit，UB(2)表示2个bit，UI 表示Unsigned Integer，UI24 表示24位整数，也就是3个Byte。</p>
<h2 id="FLV的结构"><a href="#FLV的结构" class="headerlink" title="FLV的结构"></a>FLV的结构</h2><p>先看一下flv的一小片段，这是一份二进制文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">464</span>c <span class="number">5601</span> <span class="number">0500</span> <span class="number">0000</span> <span class="number">0900</span> <span class="number">0000</span> <span class="number">0012</span> <span class="number">0000</span></span><br><span class="line"><span class="number">3</span>f00 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0200</span> <span class="number">0</span>a6f <span class="number">6e4</span>d <span class="number">6574</span></span><br><span class="line"><span class="number">6144</span> <span class="number">6174</span> <span class="number">6108</span> <span class="number">0000</span> <span class="number">0002</span> <span class="number">0008</span> <span class="number">6475</span> <span class="number">7261</span></span><br><span class="line"><span class="number">7469</span> <span class="number">6</span>f6e <span class="number">0040</span> <span class="number">27</span>c8 b439 <span class="number">5810</span> <span class="number">6200</span> <span class="number">0</span>c76</span><br><span class="line"><span class="number">6964</span> <span class="number">656</span>f <span class="number">636</span>f <span class="number">6465</span> <span class="number">6369</span> <span class="number">6400</span> <span class="number">4000</span> <span class="number">0000</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0900</span> <span class="number">0000</span> <span class="number">4</span>a08 <span class="number">0000</span> <span class="number">0400</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> af00 <span class="number">1208</span> <span class="number">0000</span> <span class="number">000</span>f <span class="number">0900</span></span><br><span class="line"><span class="number">0043</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0017</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0142</span></span><br><span class="line"><span class="number">001</span>f <span class="number">0301</span> <span class="number">002</span>f <span class="number">6742</span> <span class="number">801</span>f <span class="number">9652</span> <span class="number">0283</span> f602</span><br><span class="line">a100 <span class="number">0003</span> <span class="number">0001</span> <span class="number">0000</span> <span class="number">0300</span> <span class="number">32e0</span> <span class="number">6003</span> <span class="number">0</span>d40</span><br><span class="line"><span class="number">0046</span> <span class="number">30</span>ff <span class="number">18e3</span> <span class="number">0300</span> <span class="number">186</span>a <span class="number">0002</span> <span class="number">3187</span> f8c7</span><br><span class="line"><span class="number">0</span>ed0 a152 <span class="number">4001</span> <span class="number">0004</span> <span class="number">68</span>cb <span class="number">8</span>d48 <span class="number">0000</span> <span class="number">004</span>e</span><br><span class="line"><span class="number">0900</span> <span class="number">0</span>d1c <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0017</span> <span class="number">0100</span> <span class="number">029</span>d</span><br><span class="line"><span class="number">0000</span> <span class="number">0</span>d13 <span class="number">6588</span> <span class="number">8040</span> <span class="number">0</span>db1 <span class="number">185</span>c <span class="number">0008</span> <span class="number">2</span>d1f</span><br><span class="line"><span class="number">7893</span> de24 f789 f785 c2c4 f8a6 d3e2 <span class="number">43</span>fa</span><br><span class="line">f177 <span class="number">85</span>ea f377 a930 f991 ea7c <span class="number">4</span>f2a f0b9</span><br></pre></td></tr></table></figure></p>
<p>它的结构图是这样的。<br><img src="/images/qiniu/171225224159.png" alt=""></p>
<p>FLV Header自然时不用多说，上面的结构图都一目了然。重点讲下Flv Body下的Tag的三种类型。</p>
<h3 id="Script-Tag"><a href="#Script-Tag" class="headerlink" title="Script Tag"></a>Script Tag</h3><p><strong>KEY</strong><br>1、第1个字节为AMF类型，一般有以下的类型：</p>
<ul>
<li>0 = Number</li>
<li>1 = Boolean</li>
<li>2 = String</li>
<li>3 = Object</li>
<li>4 = MovieClip (reserved, not supported)</li>
<li>5 = Null</li>
<li>6 = Undefined</li>
<li>7 = Reference</li>
<li>8 = ECMA array</li>
<li>9 = Object end marker</li>
<li>10 = Strict array</li>
<li>11 = Date</li>
<li>12 = Long string</li>
</ul>
<p>因此第一个Tag Data <code>onMetaData</code> 的类型为0x02。</p>
<p>2、第2-3个字节表示标识字符串的长度，所以第一个为0x0000A。</p>
<p>3、接着是为key的具体字符串，因此第一个为<code>onMetaData</code>。</p>
<p><strong>Value</strong><br>1、紧接着后面则为ScriptTag的value值，第1个字节同样也是AMF类型，一般为0x08，表示ECMA Array。</p>
<p>2、第2-5个字节表示数组元素的个数。</p>
<p>3、后面即为各元素的封装，为一一对应的键值对，常见的MetaData如下：</p>
<ul>
<li>duration：时长</li>
<li>width：视频宽度</li>
<li>height：视频高度</li>
<li>videodatarate：视频码率</li>
<li>framerate：视频帧率</li>
<li>videocodecid：视频编码方式</li>
<li>audiosamplerate：音频采样率</li>
<li>audiosamplesize：音频采样精度</li>
<li>stereo：是否为立体声</li>
<li>audiocodecid：音频编码方式</li>
<li>filesize：文件大小</li>
</ul>
<p>4、最后用3个字节的固定值0000 09表示value值结束。</p>
<h3 id="Audio-Tag"><a href="#Audio-Tag" class="headerlink" title="Audio Tag"></a>Audio Tag</h3><p>Audio Tag Data开始的第一个字节包含了音频数据的参数信息，第二个字节开始为音频流数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------</span><br><span class="line">|                    音频参数(8bit)                 | 音频数据 |</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">|音频编码类型(4bit)| 采样率(2bit)|精度(1bit)|类型(1bit)|   数据  |</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure>
<p><strong>第1字节：</strong><br>1、前4位标识音频数据的格式，如：0x2表示的是MP3数据，当前合法的数值为0，1，2，3，4，5，6，7，8，9，10，11，14，15（7，8，14，15保留为内部使用）</p>
<ul>
<li>0：Linear PCM，platform endian</li>
<li>1：ADPCM</li>
<li>2：MP3</li>
<li>3：Linear PCM，little endian</li>
<li>4：Nellymoser 16-kHz mono</li>
<li>5：Nellymoser 8-kHz mono</li>
<li>6：Nellymoser</li>
<li>7：G.711 A-law logarithmic PCM</li>
<li>8：G.711 mu-law logarithmic PCM</li>
<li>9：reserved</li>
<li>10：AAC</li>
<li>14：MP3 8-Khz</li>
<li>15：Device-specific sound</li>
</ul>
<p>2、第5，6位bit表示采样率（AAC，总是3）</p>
<ul>
<li>0：5.5kHz</li>
<li>1：11KHz</li>
<li>2：22 kHz</li>
<li>3：44 kHz</li>
</ul>
<p>3、第7位，采样精度， 0为8bits， 1为16bits</p>
<p>4、第8位，音频类型，mono=0， stereo=1</p>
<h3 id="Video-Tag"><a href="#Video-Tag" class="headerlink" title="Video Tag"></a>Video Tag</h3><p>和音频一样，其第一个字节包含的是视频参数信息，第二字节开始为视频流数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------</span><br><span class="line">|                    视频参数(8bit)                 | 视频数据 |</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">|     标识帧类型(4bit)     |    标识视频编码(4bit)     |   数据  |</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure></p>
<p><strong>第1字节：</strong></p>
<ul>
<li>前4位标识帧类型。<ul>
<li>1：keyframe (for AVC, a seekable frame)； </li>
<li>2：inter frame (for AVC, a nonseekable frame)； </li>
<li>3：disposable inter frame (H.263 only)； </li>
<li>4：generated keyframe (reserved for server use only)； </li>
<li>5：video info/command frame</li>
</ul>
</li>
<li>后4位标识视频编码。<ul>
<li>1：JPEG (currently unused) ；</li>
<li>2：Sorenson H.263； </li>
<li>3：Screen video； </li>
<li>4：On2 VP6； </li>
<li>5：On2 VP6 with alpha channel；</li>
<li>6：Screen video version 2； </li>
<li>7：AVC</li>
</ul>
</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.adobe.com/content/dam/acom/en/devnet/flv/video_file_format_spec_v10.pdf" target="_blank" rel="noopener">video_file_format_spec</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于html元素的尺寸以及位置的问题]]></title>
      <url>https://lucius0.github.io/2017/06/01/archivers/html-element-dimensions-and-position/</url>
      <content type="html"><![CDATA[<h2 id="Position-pageX-clientX-screenX-offsetX"><a href="#Position-pageX-clientX-screenX-offsetX" class="headerlink" title="Position (pageX/clientX/screenX/offsetX)"></a>Position (pageX/clientX/screenX/offsetX)</h2><h3 id="pageX-pageY"><a href="#pageX-pageY" class="headerlink" title="pageX/pageY"></a>pageX/pageY</h3><p>鼠标相对于整个页面的X/Y坐标。如页宽1000px，页高10000px，那么pageX最大值则为1000px，pageY则为10000px。</p>
<h3 id="clientX-clientY"><a href="#clientX-clientY" class="headerlink" title="clientX/clientY"></a>clientX/clientY</h3><p>事件发生时鼠标在浏览器内容区域的X/Y坐标（不包含滚动条）。即可视区域。(放大缩小也会改变这个值，而且值得注意的是，IE的最小值不是0而是2）</p>
<h3 id="screenX-screenY"><a href="#screenX-screenY" class="headerlink" title="screenX/screenY"></a>screenX/screenY</h3><p>鼠标在屏幕上的坐标。screenX,screenY的最大值不会超过屏幕分辨率。</p>
<h3 id="offsetX-offsetY"><a href="#offsetX-offsetY" class="headerlink" title="offsetX/offsetY"></a>offsetX/offsetY</h3><p>鼠标相对于事件源元素（srcElement）的X,Y坐标，只有IE事件有这2个属性，标准事件没有对应的属性。</p>
<h2 id="Dimensions-offsetWidth-clientWidth-scrollWidth"><a href="#Dimensions-offsetWidth-clientWidth-scrollWidth" class="headerlink" title="Dimensions(offsetWidth/clientWidth/scrollWidth)"></a>Dimensions(offsetWidth/clientWidth/scrollWidth)</h2><p>CSS 盒模型是相当复杂的，特别是在滚动内容的时候。当浏览器使用你给的css样式来绘制盒模型时，那如果你只有css，用js来确定所有的尺寸则不是那么的直截了当。</p>
<p>这就是为什么为了你的使用方便，每个元素都拥有6种DOM属性：<code>offsetWidth</code>，<code>offsetHeight</code>，<code>clientWidth</code>，<code>clientHeight</code>，<code>scrollWidth</code>，<code>scrollHeight</code>。这些表示当前视图布局的属性是不能修改的，即只读，并且还全都是整数（因此    很有可能会受到四舍五入的误差影响）</p>
<p>让我们来详细的了解一下：</p>
<ul>
<li><p><code>offsetWidth</code>，<code>offsetHeight</code>：该视图盒子包含了所有的边界大小(border)。假如该元素为<code>display: block</code>，我们还可以通过<code>width/height</code> + <code>paddings</code> + <code>borders</code>来计算出该元素的<code>offsetWidth/offsetHeight</code>。</p>
</li>
<li><p><code>clientWidth</code>，<code>clientHeight</code>：该盒子的视觉部分，不仅不包括边界(border)，同时也不包括滚动条(scroll)，但是包括内边距(padding)。不能直接的通过CSS来计算，依赖于系统滚动条的尺寸。</p>
</li>
<li><p><code>scrollWidth</code>，<code>scrollHeight</code>：所有盒子的内容尺寸，包括溢出滚动区域的隐藏部分。同样也是不能直接通过CSS计算，依赖于内容部分。</p>
</li>
</ul>
<p><img src="/images/javascript/js-29.png" alt=""></p>
<p>尝试一下：<a href="http://jsfiddle.net/y8Y32/25/" target="_blank" rel="noopener">jsFiddle</a></p>
<p>由于<code>clientWidht</code>把 scroll bar 的宽度也计算在哪，我们可以通过以下公式计算出滚动条的宽度</p>
<p><code>scrollbarWidth = offsetWidth - clientWidth - getComputedStyle().borderLeftWidth - getComputedStyle().borderRightWidth</code></p>
<p>不幸的是，我们可能会受到四舍五入的误差影响，因为<code>offsetWidth</code>和<code>clientWidth</code>总是整数，而实际的大小可能是小数，缩放级别不是1。</p>
<p>注意这个：</p>
<p><code>scrollbarWidth = getComputedStyle().width + getComputedStyle().paddingLeft + getComputedStyle().paddingRight - clientWidth</code></p>
<p>这个在chrome中无法可靠的运行，因为chrome返回来的<code>width</code>已经减去了scrollbar的部分（此外，chrome还会将paddingBottom填充到滚动内容的底部，但是其他的浏览器则不会这样）。    </p>
<h2 id="获取页面元素的位置"><a href="#获取页面元素的位置" class="headerlink" title="获取页面元素的位置"></a>获取页面元素的位置</h2><p>相对位置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> X = <span class="keyword">this</span>.getBoundingClientRect().left;</span><br><span class="line"><span class="keyword">var</span> Y = <span class="keyword">this</span>.getBoundingClientRect().top;</span><br></pre></td></tr></table></figure>
<p>绝对位置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> X = <span class="keyword">this</span>.getBoundingClientRect().left + <span class="built_in">document</span>.documentElement.scrollLeft || <span class="built_in">document</span>.body.scrollLeft;</span><br><span class="line"><span class="keyword">var</span> Y = <span class="keyword">this</span>.getBoundingClientRect().top + <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong> 在文档使用了DTD时，<code>document.body.scrollTop</code>的值为0，此时需要使用<code>document.documentElement.scrollTop</code>来获取滚动条滚过的长度；在未使用DTD定义文档时，使用<code>document.body.scrollTop</code>获取值。</p>
<p>参考：</p>
<ul>
<li><p><a href="http://www.cnblogs.com/xesam/archive/2011/12/08/2280509.html" target="_blank" rel="noopener">http://www.cnblogs.com/xesam/archive/2011/12/08/2280509.html</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" target="_blank" rel="noopener">Understanding offsetWidth, clientWidth, scrollWidth and -Height, respectively</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[streaming media]]></title>
      <url>https://lucius0.github.io/2017/05/21/archivers/streaming-media/</url>
      <content type="html"><![CDATA[<blockquote>
<p>所谓流媒体是指采用流式传输的方式在Internet播放的媒体格式。 流媒体又叫流式媒体，它是指商家用一个视频传送服务器把节目当成数据包发出，传送到网络上。用户通过解压设备对这些数据进行解压后，节目就会像发送前那样显示出来。 – 来自《百度百科》</p>
</blockquote>
<p>简单来说，流媒体跟媒体文件的区别就在于，前者是需要服务器支持的，如RTSP、http流媒体服务器，通过解码，然后逐包的发送给播放器进行播放，<strong>边下边放</strong>，而后者则是不依赖网络，也不依赖服务器，只要有对应解码器的播放器就可以了。</p>
<h2 id="流式传输"><a href="#流式传输" class="headerlink" title="流式传输"></a>流式传输</h2><p>流媒体指在Internet/Intranet中使用流式传输技术的连续时基媒体，如：音频、视频或多媒体文件。流式媒体在播放前并不下载整个文件，只将开始部分内容存入内存，流式媒体的数据流随时传送随时播放，只是在开始时有一些延迟。流媒体实现的关键技术就是流式传输。</p>
<h2 id="顺序流式传输"><a href="#顺序流式传输" class="headerlink" title="顺序流式传输"></a>顺序流式传输</h2><p>顺序流式传输是顺序下载，在下载文件的同时用户可观看在线媒体，在给定时刻，用户只能观看已下载的那部分，而不能跳到还未下载的前头部分，顺序流式传输不象实时流式传输在传输期间根据用户连接的速度做调整。由于标准的HTTP服务器可发送这种形式的文件，也不需要其他特殊协议，它经常被称为HTTP流式传输。顺序流式传输不适合长片段和有随机访问要求的视频。</p>
<h2 id="实时流式传输"><a href="#实时流式传输" class="headerlink" title="实时流式传输"></a>实时流式传输</h2><p>实时流式传输指保证媒体信号带宽与网络连接配匹，使媒体可被实时观看到。实时流与HTTP流式传输不同，他需要专用的流媒体服务器与传输协议。实时流式传输总是实时传送，特别适合现场事件，也支持随机访问，用户可快进或后退以观看前面或后面的内容。这样会很依赖网络环境，一旦网络拥挤则会造成画像信息丢失或者图像质量差。实时流式传输还需要特殊网络协议，如：RTSP (Realtime Streaming Protocol)或MMS (Microsoft Media Server)。这些协议在有防火墙时有时会出现问题，导致用户不能看到一些地点的实时内容。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先，多媒体数据进行预处理才能适合流式传输，这是因为目前的网络带宽对多媒体巨大的数据流量来说还显得远远不够。预处理主要包括两方面：一是降低质量；二是采用先进高效的压缩算法。</p>
<p>其次，流式传输的实现需要缓存。这是因为Internet以包传输为基础进行连续的异步传输，对一个实时A/V源或存储的A/V文件，在传输中它们要被分解为许多包，由于网络是动态变化的，每个包选择的路由可能不尽相同，故到达客户端的时间延迟也就不等，甚至先发的数据包还有可能后到。为此，使用缓存系统来弥补延迟和抖动的影响，并保证数据包的顺序正确，从而使媒体数据能连续输出，而不会因为网络暂时阻塞使播放出现停顿。通常高速缓存所需容量并不大。这是因为高速缓存使用环行链表结构来存储数据：通过丢弃已经播放的内容，”流”可以重新利用空出的高速缓存空间来缓存后续尚未播放的内容。</p>
<p>再次，流式传输的实现需要合适的传输协议。WWW技术是以HTTP协议为基础的，而HTTP又建立在TCP协议基础之上。由于TCP需要较多的开销，故不太适合传输实时数据，在流式传输的实现方案中，一般采用HTTP/TCP来传输控制信息，而用RTP/UDP来传输实时声音数据。</p>
<h2 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h2><table>
<thead>
<tr>
<th>名称</th>
<th>推出机构</th>
<th>传输层协议</th>
<th>客户端</th>
</tr>
</thead>
<tbody>
<tr>
<td>RTSP+RTP</td>
<td>IETF</td>
<td>TCP+UDP</td>
<td>VLC, WMP</td>
</tr>
<tr>
<td>RTMP</td>
<td>Adobe Inc.</td>
<td>TCP</td>
<td>Flash</td>
</tr>
<tr>
<td>RTMFP</td>
<td>Adobe Inc.</td>
<td>UDP</td>
<td>Flash</td>
</tr>
<tr>
<td>MMS</td>
<td>Microsoft Inc.</td>
<td>TCP/UDP</td>
<td>WMP</td>
</tr>
<tr>
<td>HTTP</td>
<td>WWW+IETF</td>
<td>TCP</td>
<td>Flash</td>
</tr>
<tr>
<td>HLS</td>
<td>Apple</td>
<td>TCP</td>
<td>IOS/部分Android</td>
</tr>
</tbody>
</table>
<h2 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h2><ul>
<li><p>在网络上观看视频，则需要：解协议，解封装，解码视音频，视音频同步。</p>
</li>
<li><p>在本地上观看视频，则需要：解封装，解码视音频，视音频同步。</p>
</li>
</ul>
<p><strong>参考资料：</strong></p>
<ul>
<li><p><a href="http://baike.baidu.com/link?url=KmhsT7Th2RZN1I-eCn2at0u71EvDsVbNBe7Xy7uqPzQPJYEJarUsPpd7_N7JT1D3DB5XuPYAXd_PF1k4aprfRGWx6OCDHcRXmRW1JFaTSJSH60pj1pwefMWaCW6-ji4i" target="_blank" rel="noopener">百度百科</a></p>
</li>
<li><p><a href="http://www.kuqin.com/stream-media/20070904/864.html" target="_blank" rel="noopener">http://www.kuqin.com/stream-media/20070904/864.html</a></p>
</li>
<li><p><a href="https://github.com/ossrs/srs/wiki/v1_CN_RTMP.PK.HTTP" target="_blank" rel="noopener">RTMP VS HTTP</a></p>
</li>
<li><p><a href="http://blog.ucloud.cn/archives/author/usmd" target="_blank" rel="noopener">关于直播，所有的技术细节都在这里了</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> media </category>
            
        </categories>
        
        
        <tags>
            
            <tag> media </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[axio-form data问题]]></title>
      <url>https://lucius0.github.io/2017/05/16/archivers/axio-form-data/</url>
      <content type="html"><![CDATA[<p>今日在用<code>axio</code>请求数据时，遇到一个问题，即<code>post</code>时，data为对象，但是在请求时的请求数据一直是<code>request payload</code>，而不是我想要的<code>form data</code>，并且请求体为表单形式，即<code>a=1&amp;b=2&amp;c=3</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">	url: <span class="string">`<span class="subst">$&#123;API.URL&#125;</span>`</span>,</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    data,</span><br><span class="line">    responseType: <span class="string">'json'</span>,</span><br><span class="line">    withCredentials: <span class="literal">true</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/images/javascript/js-25.jpeg" alt=""></p>
<p><img src="/images/javascript/js-26.jpeg" alt=""></p>
<p><strong>解决方案1：</strong></p>
<p>在node环境中可以使用<code>qs</code>模块的<code>qs.stringify(data)</code>来处理，即</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</span><br><span class="line">axios(&#123;</span><br><span class="line">	...</span><br><span class="line">	headers: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span><br><span class="line">	data: qs.stringify(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>解决方案2：</strong></p>
<p>在非node环境下可以使用<code>axios</code>的一个请求配置项<code>transformRequest</code>，即</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">  ...</span><br><span class="line">  headers: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</span><br><span class="line">  transformRequest: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(data, it)) &#123;</span><br><span class="line">        ret = <span class="string">`<span class="subst">$&#123;ret + <span class="built_in">encodeURIComponent</span>(it)&#125;</span>=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(data[it])&#125;</span>&amp;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;],</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>
<p><img src="/images/javascript/js-27.jpeg" alt=""></p>
<p><img src="/images/javascript/js-28.jpeg" alt=""></p>
<p><strong>总结：</strong></p>
<p><code>headers: { &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39; }</code>是将请求类型<code>request payload</code>转换成<code>form data</code>。而<code>qs</code>模块跟<code>transformRequest</code>则是将对象格式<code>{a: &#39;1&#39;, b: &#39;2&#39;, c: &#39;3&#39;}</code>转为表单格式<code>a=1&amp;b=2&amp;c=3</code>。</p>
<p>axios：<a href="https://www.awesomes.cn/repo/mzabriskie/axios" target="_blank" rel="noopener">https://www.awesomes.cn/repo/mzabriskie/axios</a></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> axio </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 鼠标从不同方向移入移出判断]]></title>
      <url>https://lucius0.github.io/2017/05/08/archivers/mouse-direction/</url>
      <content type="html"><![CDATA[<p><img src="/images/workshop/004.gif" alt=""></p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>关于这个我在网上找到了答案，常见的解法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = (e.pageX - <span class="keyword">this</span>.offsetLeft - (w / <span class="number">2</span>)) * (w &gt; h ? (h / w) : <span class="number">1</span>); </span><br><span class="line"><span class="keyword">var</span> y = (e.pageY - <span class="keyword">this</span>.offsetTop - (h / <span class="number">2</span>)) * (h &gt; w ? (w / h) : <span class="number">1</span>); </span><br><span class="line"><span class="keyword">var</span> direction = <span class="built_in">Math</span>.round((((<span class="built_in">Math</span>.atan2(y, x) * (<span class="number">180</span> / <span class="built_in">Math</span>.PI)) + <span class="number">180</span>) / <span class="number">90</span>) + <span class="number">3</span>) % <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// e.pageX 			鼠标的x坐标</span></span><br><span class="line"><span class="comment">// this.offsetLeft 	移动的容器距离左边的位置，也可以说x坐标</span></span><br></pre></td></tr></table></figure>
<p>解题思路：</p>
<p><img src="/images/javascript/js-23.png" alt=""></p>
<p>1、主要是将这个问题化为角度来算；</p>
<p>2、我们将P设为原点<code>(this.offetLeft, this.offetTop)</code>，o设为圆心<code>（this.offsetLeft + (w / 2), this.offsetTop + (h / 2)）</code>；</p>
<p>3、鼠标移入该容器相对于圆心o的坐标为<code>（e.pageX - o.x, e.pageY - o.y）</code>，即上文的<code>(e.pageX - this.offsetLeft - (w / 2))</code>与<code>(e.pageY - this.offsetTop - (h / 2))</code>；</p>
<p>4、<code>(w &gt; h ? (h / w) : 1)</code>与<code>(h &gt; w ? (w / h) : 1)</code>的意思就是将<strong>矩形换算为正方形</strong>，例如有一个宽3x，高是x的矩形，相对原点P的右下角坐标就是{x:3x,y:1x}，换算成正方形，即坐标点为正方形的右下角，矩形的四个角即一一对一个正方形的四个角形成正方形ABCD；</p>
<p>5、<code>Math.atan2(x, y)</code>返回角度值，换算成弧度则为<code>((Math.atan2(y, x) * (180 / Math.PI))</code>，结果为(-180, 180)，加上180，就是(0, 360)。</p>
<p>6、除以90，即跟4一样道理，AoD，DoC，CoB，BoA都是90度角，目的就是将矩阵的角度跟方形的角度做个换算。</p>
<p>7、加3是因为想让计算的顺序为上，之前我们的角度区间是从右边开始，那么加3就会从上开始计算，也就是上，右，下，左的顺序；</p>
<p>8、Math.round以及4取模使得计算结果为0，1，2，3，为什么要这么做呢？Math.round使得坐标轴45度角划分四个象限，而4取模就可以知道鼠标移入移出是在计算过后的哪个象限了。</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>根据斜率，转自<a href="http://www.cnblogs.com/lyzg/p/5689761.html" target="_blank" rel="noopener">http://www.cnblogs.com/lyzg/p/5689761.html</a></p>
<p><img src="/images/javascript/js-24.png" alt=""></p>
<p>1、上图以浏览器可视区域左上角为原点建立坐标系，坐标系与数学坐标系方向一致，往右表示x轴正方向，往下表示y轴负方向；</p>
<p>2、图中点(x1,y1)代表元素框左上角，(x4,y4)代表元素框右下角，(x0,y0)代表元素框的中心点，（x,y）表示鼠标移入移出时与元素框的边的交点；</p>
<p>3、根据下面的公式：(y2 - y1) / (x2 - x1)</p>
<p>可得(x1,y1)与（x4,y4)这条对角线的斜率为 k = (y1-y4)/(x1-x4)。由于对称性，元素框另外一条对角线的斜率一定是 -k。</p>
<p>同时由于(x1,y1)与（x4,y4)这条对角线在坐标系中一定经过的是第二和第四象限，所以k肯定是负值，而 -k一定是正值。</p>
<p>4、根据同样的公式，当鼠标移入移出时的瞬间，与元素边框的交点与元素框中心点的斜率 k1 = (y-y0)/(x-x0)。</p>
<p>5、由图可知，当 k &lt; k1 &lt; –k时，鼠标一定是从元素的左右方向移动的；反之，一定是从上下方向移动的。</p>
<p>当鼠标是从左右方向移动时，如果x &gt; x0，那么鼠标就是从右边移动的，反之就是从左边移动的；</p>
<p>当鼠标是从上下方向移动时，如果y &gt; y0时，那么鼠标就是从上边移动的，反之就是从下边移动的。</p>
<p>注意：坐标系中所有的y值都是负的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个模块完成鼠标方向判断的功能</span></span><br><span class="line"><span class="keyword">var</span> MouseDirection = <span class="function"><span class="keyword">function</span> (<span class="params">element, opts</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> $element = $(element);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//enter leave代表鼠标移入移出时的回调</span></span><br><span class="line">    opts = $.extend(&#123;&#125;, &#123;</span><br><span class="line">        enter: $.noop,</span><br><span class="line">        leave: $.noop</span><br><span class="line">    &#125;, opts || &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dirs = [<span class="string">'top'</span>, <span class="string">'right'</span>, <span class="string">'bottom'</span>, <span class="string">'left'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span> (<span class="params">element, e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/*以浏览器可视区域的左上角建立坐标系*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示左上角和右下角及中心点坐标</span></span><br><span class="line">        <span class="keyword">var</span> x1, y1, x4, y4, x0, y0;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示左上角和右下角的对角线斜率</span></span><br><span class="line">        <span class="keyword">var</span> k;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用getBoundingClientRect比较省事，而且它的兼容性还不错</span></span><br><span class="line">        <span class="keyword">var</span> rect = element.getBoundingClientRect();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!rect.width) &#123;</span><br><span class="line">            rect.width = rect.right - rect.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!rect.height) &#123;</span><br><span class="line">            rect.height = rect.bottom - rect.top;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求各个点坐标 注意y坐标应该转换为负值，因为浏览器可视区域左上角为(0,0)，整个可视区域属于第四象限</span></span><br><span class="line">        x1 = rect.left;</span><br><span class="line">        y1 = -rect.top;</span><br><span class="line"></span><br><span class="line">        x4 = rect.left + rect.width;</span><br><span class="line">        y4 = -(rect.top + rect.height);</span><br><span class="line"></span><br><span class="line">        x0 = rect.left + rect.width / <span class="number">2</span>;</span><br><span class="line">        y0 = -(rect.top + rect.height / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//矩形不够大，不考虑</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(x1 - x4) &lt; <span class="number">0.0001</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算对角线斜率</span></span><br><span class="line">        k = (y1 - y4) / (x1 - x4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> range = [k, -k];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示鼠标当前位置的点坐标</span></span><br><span class="line">        <span class="keyword">var</span> x, y;</span><br><span class="line"></span><br><span class="line">        x = e.clientX;</span><br><span class="line">        y = -e.clientY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示鼠标当前位置的点与元素中心点连线的斜率</span></span><br><span class="line">        <span class="keyword">var</span> kk;</span><br><span class="line"></span><br><span class="line">        kk = (y - y0) / (x - x0);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果斜率在range范围内，则鼠标是从左右方向移入移出的</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isFinite</span>(kk) &amp;&amp; range[<span class="number">0</span>] &lt; kk &amp;&amp; kk &lt; range[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="comment">//根据x与x0判断左右</span></span><br><span class="line">            <span class="keyword">return</span> x &gt; x0 ? <span class="number">1</span> : <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//根据y与y0判断上下</span></span><br><span class="line">            <span class="keyword">return</span> y &gt; y0 ? <span class="number">0</span> : <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $element.on(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = calculate(<span class="keyword">this</span>, e);</span><br><span class="line">        opts.enter($element, dirs[r]);</span><br><span class="line">    &#125;).on(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = calculate(<span class="keyword">this</span>, e);</span><br><span class="line">        opts.leave($element, dirs[r]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>总结：我觉得第二种方法很简单更能理解，只是在实现起来代码量会更多点。</strong></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[h5播放器学习]]></title>
      <url>https://lucius0.github.io/2017/05/05/archivers/h5-video-learning/</url>
      <content type="html"><![CDATA[<p><code>video</code>的概念在h5已经是存在了很久了，但是等到小视频、短视频元年的大火大热之后，国内才慢慢的进入淘汰flash播放器加紧脚本学习h5播放器。然而在国外（YouTube）早已用上了h5播放器，因此我也不能落后，得加紧时间学习，不然就没饭吃了。</p>
<p>好了，在了解html5播放器的知识之前，我们需要了解一下以下的前置知识，当作扩充一下自己的知识库。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h3><p>将一些<strong>视频信息</strong>，<strong>音频信息</strong>，<strong>时间码</strong>，<strong>编码器信息</strong>，打包成一个文件，便于管理以及编辑，常见的有AVI，RMVB，MOV，MP4，FLV等。为什么要有这么多封装格式呢？可以想下为什么图片有那么多封装格式呢？如PNG，JPG，GIF等，道理是一个样的。</p>
<h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><p>简单来说，编码方式就是我们压缩或者解压音视频数据的一个算法。MPEG 2，MPEG 4，Prores 422，Prores 444，H.265 以及常用的 H.264。不同的编码方式会让视频呈现出不同的分辨率以及视频大小，封装格式以及编码方式都会影响视频的质量。</p>
<p>在每个影片容器中，音频和视频轨道都使用不同的编解码器来编码。编解码器决定了浏览器在播放时应该如何解码音频和视频。</p>
<h3 id="码率"><a href="#码率" class="headerlink" title="码率"></a>码率</h3><p>码率就是指视频或者音频每秒钟的数据量，单位是MBPS或者KBPS。码率越高视频就越清晰，但是码率同时会受分辨率和帧速率影响。</p>
<p>举个例子：</p>
<ul>
<li><p><em>一个视频分辨率为 1080P，码率为5MBPS</em> 会比 <em>一个视频分辨率为 4K，码率照样为5MBPS</em>的清晰。因为分辨率更高的同时，是需要高码率来做支撑的，也就是同码率的情况下，分辨率越高视频越不清晰。</p>
</li>
<li><p><em>一个视频帧速率为 30帧，码率为5MBPS</em> 会比 <em>一个视频帧速率为 60帧，码率照样为5MBPS</em>的清晰。因为帧速率更高的同时，是需要高码率来做支撑的，也就是同码率的情况下，帧速率越高视频越不清晰。</p>
</li>
</ul>
<p>码率分为：CBR（固定码率），VBR（可变码率）。</p>
<ul>
<li><p>CBR（固定码率）：指的是每一秒码率都是相同的。假如在网络观看视频且网速比较快的情况下，就不会出现卡顿的情况，但是，画面若比较单薄，画面信息比较少，突然颜色变丰富了，画面信息突然多了，那么这下子可能会出现模糊的情况。</p>
</li>
<li><p>VBR（可变码率）：指的是每一秒码率都是变化不固定的。可变码率会根据你视频当中画面的信息量，来自动调整码率，这样就不会出现突然颜色变丰富导致的模糊现象。但是，当我们观看的视频对网速有一定的要求，码率忽高忽低时，那么可能就会造成卡顿的情况。</p>
</li>
</ul>
<h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>指的是单位长度内，视频包含的像素数量。常见的有 1280 x 720，1920 x 1080，2560 x 1440（2K），4096 x 2304（4K）。</p>
<p><strong>小结：</strong></p>
<p>一个完整的视频大概会拥有<em>meta信息，视频编码器(H.264, MPEG 4)，音频编码器(AAC,OGG)，字幕，描述信息等</em></p>
<h2 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h2><p>在h5没有出来之前，市面上的播放器几乎都是Flash来播放视频的。最开始是使用<code>embed</code>的方式嵌入播放器，其会调用系统的原生播放器，如windows的media player，mac的quick time等。</p>
<p><code>embed</code>虽然只需要一行代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"src/player.swf"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是它完全就像黑盒子，无法获取它里面的动态信息，甚至无法跟它交互。但是还可以用<code>object</code>的形式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span> <span class="attr">class</span>=<span class="string">"player"</span> <span class="attr">data</span>=<span class="string">"//static.hdslb.com/play.swf"</span> <span class="attr">width</span>=<span class="string">"950"</span> <span class="attr">height</span>=<span class="string">"482"</span> <span class="attr">id</span>=<span class="string">"player_placeholder"</span> <span class="attr">style</span>=<span class="string">"visibility: visible;"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"bgcolor"</span> <span class="attr">value</span>=<span class="string">"#ffffff"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowfullscreeninteractive"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowfullscreen"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"quality"</span> <span class="attr">value</span>=<span class="string">"high"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowscriptaccess"</span> <span class="attr">value</span>=<span class="string">"always"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"wmode"</span> <span class="attr">value</span>=<span class="string">"direct"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"flashvars"</span> <span class="attr">value</span>=<span class="string">"cid=17022717&amp;amp;aid=10303607&amp;amp;pre_ad=0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>flash播放flv，是因为flash本身就内建了H.264，而h5则需要浏览器产商如chrome去支持，但是，要想让嵌入的代码发挥作用，浏览器必须安装相对应的插件，而且还版本合适。插件是在一个封闭的环境中运行，通过脚本无法修改或者操作视频内容。如果插件没有提供API，那么插件运行环境无异于文档中一个独立王国。</p>
<h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><p>先上demo代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"src/player.mp4"</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">	您的浏览器不支持 video 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是目前<code>video</code>只支持的视频格式有：MP4(MPEG 4文件使用H264视频编解码器和AAC音频编解码器)，WebM(WebM文件使用VP8视频编解码器和Vorbis音频编解码器)，Ogg(Ogg文件使用Theoraship编解码器和Vorbis音频编解码器)，并且在不同浏览器上不同表现。实际上h5还可以支持m3u8，但m3u8是mac专有的视频格式，所以mac\ios下的浏览器都支持m3u8的播放，而其他浏览器则需要第三方支持解码。</p>
<h3 id="Browser-Support"><a href="#Browser-Support" class="headerlink" title="Browser Support"></a>Browser Support</h3><table>
<thead>
<tr>
<th>Browser</th>
<th>MP4</th>
<th>WebM</th>
<th>Ogg</th>
</tr>
</thead>
<tbody>
<tr>
<td>IE</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>Chrome</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Firefox</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Safari</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>Opera</td>
<td>YES(&gt;=25)</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody>
</table>
<p>注意：<code>video</code>可以添加多个source源来进行兼容适配，这样当第一个不兼容可以往下读取，同样也可以兼容flash播放器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"src/test.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"src/test.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">src</span>=<span class="string">"src/lyric.vtt"</span> <span class="attr">srclang</span>=<span class="string">"en"</span> <span class="attr">kind</span>=<span class="string">"subtitles"</span> <span class="attr">label</span>=<span class="string">"English"</span> <span class="attr">default</span>&gt;</span> <span class="comment">&lt;!-- 字幕 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"flowplayer"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">data</span>=<span class="string">"player.swf"</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span>=<span class="string">"player.swf"</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"flashvars"</span> <span class="attr">value</span>=<span class="string">'config=&#123;"url":"src/test.mp4"&#125;'</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>您的浏览器不支持此视频<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Media-Type"><a href="#Media-Type" class="headerlink" title="Media Type"></a>Media Type</h3><table>
<thead>
<tr>
<th>File Format</th>
<th>Media Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>MP4</td>
<td>video/mp4</td>
</tr>
<tr>
<td>WebM</td>
<td>video/webm</td>
</tr>
<tr>
<td>Ogg</td>
<td>video/ogg</td>
</tr>
</tbody>
</table>
<h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>因为pc、android、ios存在差异性，在这里只罗列pc的事件</p>
<table>
<thead>
<tr>
<th>#</th>
<th>event(PC)</th>
<th>readyState</th>
<th>视频状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>loadstart</td>
<td>NOTHING</td>
<td>-</td>
</tr>
<tr>
<td>2</td>
<td>suspend</td>
<td>NOTHING</td>
<td>-</td>
</tr>
<tr>
<td>3</td>
<td>play</td>
<td>NOTHING</td>
<td>-</td>
</tr>
<tr>
<td>4</td>
<td>waiting</td>
<td>NOTHING</td>
<td>-</td>
</tr>
<tr>
<td>5</td>
<td>durationchange</td>
<td>METADATA</td>
<td>获取到视频长度</td>
</tr>
<tr>
<td>6</td>
<td>loadedmetadata</td>
<td>METADATA</td>
<td>获取到元数据</td>
</tr>
<tr>
<td>7</td>
<td>loadeddata</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>8</td>
<td>canplay</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>9</td>
<td>playing</td>
<td>ENOUGHDATA</td>
<td>开始播放</td>
</tr>
<tr>
<td>10</td>
<td>canplaythrough</td>
<td>ENOUGHDATA</td>
<td>可以流畅播放</td>
</tr>
<tr>
<td>11</td>
<td>progress</td>
<td>ENOUGHDATA</td>
<td>持续下载</td>
</tr>
<tr>
<td>12</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>播放进度变化</td>
</tr>
<tr>
<td>..</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>23</td>
<td>progress</td>
<td>ENOUGHDATA</td>
<td>下载完毕</td>
</tr>
<tr>
<td>24</td>
<td>suspend</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>25</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>继续播放中</td>
</tr>
<tr>
<td>..</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>48</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>49</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>50</td>
<td>seeking</td>
<td>METADATA</td>
<td>-</td>
</tr>
<tr>
<td>51</td>
<td>waiting</td>
<td>METADATA</td>
<td>-</td>
</tr>
<tr>
<td>52</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>53</td>
<td>seeked</td>
<td>ENOUGHDATA</td>
<td>播放完毕进度回到起点</td>
</tr>
<tr>
<td>54</td>
<td>canplay</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>55</td>
<td>playing</td>
<td>ENOUGHDATA</td>
<td>循环播放</td>
</tr>
<tr>
<td>56</td>
<td>canplaythrough</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>57</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>..</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-013/index.html" target="_blank" rel="noopener">github ==&gt; </a></strong></p>
<p><strong>参考资料：</strong></p>
<ul>
<li><p><a href="http://ask.dcloud.net.cn/article/569" target="_blank" rel="noopener">http://ask.dcloud.net.cn/article/569</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000006461476" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006461476</a></p>
</li>
<li><p><a href="https://www.w3schools.com/html/html5_video.asp" target="_blank" rel="noopener">https://www.w3schools.com/html/html5_video.asp</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/HTML5_video" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/HTML5_video</a></p>
</li>
<li><p><a href="http://www.xuanfengge.com/html5-video-play.html" target="_blank" rel="noopener">http://www.xuanfengge.com/html5-video-play.html</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/20997688" target="_blank" rel="noopener">https://www.zhihu.com/question/20997688</a></p>
</li>
<li><p><a href="http://yanhaijing.com/html/2016/03/12/html5-video/" target="_blank" rel="noopener">http://yanhaijing.com/html/2016/03/12/html5-video/</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> video </tag>
            
            <tag> html5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css常见的前端布局]]></title>
      <url>https://lucius0.github.io/2017/05/01/archivers/css-layouts/</url>
      <content type="html"><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="margin-定宽"><a href="#margin-定宽" class="headerlink" title="margin + 定宽"></a>margin + 定宽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  margin: 0 auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>适用定宽</li>
</ul>
<h3 id="table-margin"><a href="#table-margin" class="headerlink" title="table + margin"></a>table + margin</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: table;</span></span><br><span class="line"><span class="undefined">  margin: 0 auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>display: table</code> 表现类似<code>block</code>，但是宽度为<strong>内容宽</strong></p>
</li>
<li><p>无需设置父元素样式（支持IE8及其以上版本，IE8以下则需要嵌入<code>&lt;table&gt;</code></p>
</li>
</ul>
<h3 id="inline-block-text-align"><a href="#inline-block-text-align" class="headerlink" title="inline-block + text-align"></a>inline-block + text-align</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    Demo</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: inline-block;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">  text-align: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>兼容IE6</li>
</ul>
<h3 id="absolute-margin-left"><a href="#absolute-margin-left" class="headerlink" title="absolute + margin-left"></a>absolute + margin-left</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span>  &#123;</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  left: 50%;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">margin-left</span>: <span class="selector-tag">-50px</span>; <span class="comment">/* width/2 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>固定宽度</p>
</li>
<li><p>相比<code>transform</code>，兼容性更好</p>
</li>
</ul>
<h3 id="absolute-transform"><a href="#absolute-transform" class="headerlink" title="absolute + transform"></a>absolute + transform</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  left: 50%;</span></span><br><span class="line"><span class="undefined">  transform: translateX(-50%);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>绝对定位脱离文档流，不会对后续布局造成影响</p>
</li>
<li><p><code>transform</code>为CSS3属性，存在兼容问题</p>
</li>
</ul>
<h3 id="flex-justify-content"><a href="#flex-justify-content" class="headerlink" title="flex + justify-content"></a>flex + justify-content</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span>  &#123;</span></span><br><span class="line"><span class="undefined">  display: flex;</span></span><br><span class="line"><span class="undefined">  justify-content: center;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>只需要设置父节点</p>
</li>
<li><p><code>flex</code>有兼容问题</p>
</li>
</ul>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="table-cell-vertical-align"><a href="#table-cell-vertical-align" class="headerlink" title="table-cell + vertical-align"></a>table-cell + vertical-align</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: table-cell;</span></span><br><span class="line"><span class="undefined">  vertical-align: middle;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>兼容性好，IE8以下版本需要调整页面结构<code>table</code></li>
</ul>
<h3 id="absolute-transform-1"><a href="#absolute-transform-1" class="headerlink" title="absolute + transform"></a>absolute + transform</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 50%;</span></span><br><span class="line"><span class="undefined">    transform: translateY(-50%);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>绝对定位脱离文档流，但<strong>绝对定位元素师唯一的元素则父元素会失去高度</strong></p>
</li>
<li><p><code>transform</code>有兼容问题</p>
</li>
<li><p>同水平居中也可以使用<code>margin-top实现</code></p>
</li>
</ul>
<h3 id="flex-align-items"><a href="#flex-align-items" class="headerlink" title="flex + align-items"></a>flex + align-items</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>flex</code>有兼容问题</li>
</ul>
<h3 id="top-margin-height-2"><a href="#top-margin-height-2" class="headerlink" title="top + margin(-height / 2)"></a>top + margin(-height / 2)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span> Content goes here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  top: 50%;</span></span><br><span class="line"><span class="undefined">  height: 240px;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">margin-top</span>: <span class="selector-tag">-120px</span>; <span class="comment">/* negative half of the height */</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>绝对定位且固定高度</p>
</li>
<li><p>若content太多则会出现溢出，<code>overflow:auto</code>则会出现滚动条</p>
</li>
<li><p>虽然适用所有浏览器，但是假如没有足够的空间，content则会消失</p>
</li>
</ul>
<h3 id="height-50-margin-bottom-contentheight"><a href="#height-50-margin-bottom-contentheight" class="headerlink" title="height:50% + margin-bottom: -contentheight"></a>height:50% + margin-bottom: -contentheight</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"floater"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>Content here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#floater</span> &#123;</span></span><br><span class="line"><span class="undefined">  float: left;</span></span><br><span class="line"><span class="undefined">  height: 50%;</span></span><br><span class="line"><span class="undefined">  margin-bottom: -120px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">  clear: both;</span></span><br><span class="line"><span class="undefined">  height: 240px;</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>适用所有浏览器</p>
</li>
<li><p>没有足够空间时(例如：窗口缩小) content 不会被截断，滚动条出现</p>
</li>
</ul>
<h3 id="margin-auto-top-amp-bottom"><a href="#margin-auto-top-amp-bottom" class="headerlink" title="margin:auto + top &amp; bottom"></a>margin:auto + top &amp; bottom</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span> Content here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  bottom: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">  right: 0;</span></span><br><span class="line"><span class="undefined">  margin: auto;</span></span><br><span class="line"><span class="undefined">  height: 240px;</span></span><br><span class="line"><span class="undefined">  width: 70%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>同样若空间小，则 content 会消失</p>
</li>
<li><p>存在 IE 不兼容的问题</p>
</li>
</ul>
<h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span> Content here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#content</span> &#123;</span></span><br><span class="line"><span class="undefined">  height: 100px;</span></span><br><span class="line"><span class="undefined">  line-height: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>只对文本有效</p>
</li>
<li><p>多行时，断词比较糟糕</p>
</li>
</ul>
<h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="absolute-transform-2"><a href="#absolute-transform-2" class="headerlink" title="absolute + transform"></a>absolute + transform</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    left: 50%;</span></span><br><span class="line"><span class="undefined">    top: 50%;</span></span><br><span class="line"><span class="undefined">    transform: translate(-50%, -50%);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>绝对定位脱离文档流</p>
</li>
<li><p><code>transform</code>有兼容问题</p>
</li>
</ul>
<h3 id="inline-block-text-align-table-cell-vertical-align"><a href="#inline-block-text-align-table-cell-vertical-align" class="headerlink" title="inline-block + text-align + table-cell + vertical-align"></a>inline-block + text-align + table-cell + vertical-align</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    display: table-cell;</span></span><br><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>兼容好</li>
</ul>
<h3 id="flex-justify-content-align-items"><a href="#flex-justify-content-align-items" class="headerlink" title="flex + justify-content + align-items"></a>flex + justify-content + align-items</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>; <span class="comment">/* 水平居中 */</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>; <span class="comment">/*垂直居中*/</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>只需要设置父节点</p>
</li>
<li><p><code>flex</code>有兼容问题</p>
</li>
</ul>
<h2 id="一列定宽，一列自适应"><a href="#一列定宽，一列自适应" class="headerlink" title="一列定宽，一列自适应"></a>一列定宽，一列自适应</h2><h3 id="float-margin"><a href="#float-margin" class="headerlink" title="float + margin"></a>float + margin</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">  float: left;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">  margin-left: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>IE 6 有3像素的BUG，解决<strong>可以在<code>.left</code>加入<code>margin-left:-3px</code></strong>，当然也有其他的解决方法，如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-fix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">  float: left;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.right-fix</span> &#123;</span></span><br><span class="line"><span class="undefined">  float: right;</span></span><br><span class="line"><span class="undefined">  width: 100%;</span></span><br><span class="line"><span class="undefined">  margin-left: -100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">  margin-left: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>此方法不会存在IE 6中3像素的问题，但<code>.left</code>不可选择，需要设置<code>.left {position: relation}</code></strong>来提高层级。</p>
<h3 id="float-overflow"><a href="#float-overflow" class="headerlink" title="float + overflow"></a>float + overflow</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">  float: left;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>设置<code>overflow: hidden</code>会触发BFC块级格式上下文，就是无论在BFC里面做什么操作，外面都不会受影响。但是此方法不被IE 6支持。</strong></p>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"paren"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: table;</span></span><br><span class="line"><span class="undefined">  width: 100%;</span></span><br><span class="line"><span class="undefined">  table-layout: fixed;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: table-cell;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: table-cell;</span></span><br><span class="line"><span class="css">  <span class="comment">/*宽度为剩余宽度*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><code>table</code> 的显示特性为每列的单元格宽度和一定等与表格宽度。 <code>table-layout: fixed</code> 可加速渲染，也是设定布局优先。<code>table-cell</code> 中不可以设置 <code>margin</code> 但是可以通过 <code>padding</code> 来设置间距</strong></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: flex;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  margin-left: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">  flex: 1;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>兼容问题</li>
</ul>
<h2 id="等分布局"><a href="#等分布局" class="headerlink" title="等分布局"></a>等分布局</h2><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">  margin-left: -20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="undefined">  float: left;</span></span><br><span class="line"><span class="undefined">  width: 25%;</span></span><br><span class="line"><span class="undefined">  padding-left: 20px;</span></span><br><span class="line"><span class="undefined">  box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>兼容IE 8 以上版本</li>
</ul>
<h3 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: flex;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="undefined">  flex: 1;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.column</span> + <span class="selector-class">.column</span> &#123; <span class="comment">/* 相邻兄弟 */</span></span></span><br><span class="line"><span class="undefined">  margin-left: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="table-1"><a href="#table-1" class="headerlink" title="table"></a>table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent-fix"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent-fix</span>	&#123;</span></span><br><span class="line"><span class="undefined">	margin-left: -20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">	display: table;</span></span><br><span class="line"><span class="undefined">	width: 100%;</span></span><br><span class="line"><span class="css">    <span class="comment">/*可以布局优先，也可以单元格宽度平分在没有设置的情况下*/</span></span></span><br><span class="line"><span class="undefined">	table-layout: fixed;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="undefined">	display: table-cell;</span></span><br><span class="line"><span class="undefined">	padding-left: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="等高布局"><a href="#等高布局" class="headerlink" title="等高布局"></a>等高布局</h2><h3 id="table-2"><a href="#table-2" class="headerlink" title="table"></a>table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">	display: table;</span></span><br><span class="line"><span class="undefined">	width: 100%;</span></span><br><span class="line"><span class="undefined">	table-layout: fixed;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">	display: table-cell;</span></span><br><span class="line"><span class="undefined">	width: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">	display: table-cell;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>table</code> 的特性为每列等宽，每行等高可以用于解决此需求</li>
</ul>
<h3 id="flex-2"><a href="#flex-2" class="headerlink" title="flex"></a>flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">	display: flex;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">	width: 100px;</span></span><br><span class="line"><span class="undefined">	margin-left: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">  flex: 1;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意这里实际上使用了<code>align-items: stretch</code>，flex 默认的 <code>align-items</code>的值为 <code>stretch</code> </strong></p>
<h3 id="float-1"><a href="#float-1" class="headerlink" title="float"></a>float</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">  padding-bottom: 9999px;</span></span><br><span class="line"><span class="undefined">  margin-bottom: -9999px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="undefined">  float: left;</span></span><br><span class="line"><span class="undefined">  width: 100px;</span></span><br><span class="line"><span class="undefined">  margin-right: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>此方法只有背景显示高度相等，左右真实高度其实不想等，但兼容性较好。</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="http://www.xingxin.me/posts/590058affd9e613545f2d1f3" target="_blank" rel="noopener">http://www.xingxin.me/posts/590058affd9e613545f2d1f3</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css的一些小记]]></title>
      <url>https://lucius0.github.io/2017/03/19/archivers/css-notes/</url>
      <content type="html"><![CDATA[<h2 id="before-和-after"><a href="#before-和-after" class="headerlink" title=":before 和 :after"></a>:before 和 :after</h2><p>伪类<code>:before</code>和<code>:after</code>默认是一个行内元素，所以这个元素设置<code>width/height</code>是无效的，就像给<code>a</code>元素设置<code>width/height</code>一样，但是可以通过设置<code>position:absolute;</code>，对这个元素的<code>display</code>属性计算为<code>inline-block</code>值，但是设置了<code>width/height</code>针对的是<code>:before/:after</code>生成的匿名替换元素，而不是其中的<code>content</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 无效</span><br><span class="line">span:before &#123;</span><br><span class="line">    content: url(xxx.png);</span><br><span class="line">    width: 800px;</span><br><span class="line">    height: 600px;</span><br><span class="line">&#125;</span><br><span class="line">// 可以</span><br><span class="line">span:before &#123;</span><br><span class="line">    content: '';</span><br><span class="line">    background-image:url(xxx.png);</span><br><span class="line">    background-size:800px 600px;</span><br><span class="line">    width: 800px;</span><br><span class="line">    height: 600px;</span><br><span class="line">    position: absolute; // 设置定位类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h2><h3 id="元素间隔"><a href="#元素间隔" class="headerlink" title="元素间隔"></a>元素间隔</h3><p><code>inline-block</code>使得元素水平排列，但如果两个<code>inline-block</code>元素之间存在<strong>空格</strong>或者<strong>换行</strong>就会出现奇怪的元素间隔，即使使用了<code>{padding: 0; margin: 0}</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#text p &#123; display: inline-block; padding: 10px; background-color: red; color: #fff;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/css/css-27.png" alt=""></p>
<p>常见的解决方法：</p>
<p>1、元素之间不要存在<strong>空格</strong>或者<strong>换行符</strong>；</p>
<p>2、父容器的<code>font-size:0</code>。</p>
<p>去除<code>inline-block</code>之间的间隔有很多种方法，可以参考张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="noopener">去除inline-block元素间间距的N种方法</a></p>
<h3 id="元素对齐问题"><a href="#元素对齐问题" class="headerlink" title="元素对齐问题"></a>元素对齐问题</h3><p>两<code>inline-block</code>元素，不存在文本的情况下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#test p &#123;display: inline-block;&#125;</span><br><span class="line">.c1, .c2 &#123;width: 100px; height: 100px;&#125;</span><br><span class="line">.c1 &#123;border: 1px solid #f00;&#125;</span><br><span class="line">.c2 &#123;border: 1px solid #000;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/css/css-28.png" alt=""></p>
<p>两<code>inline-block</code>元素存在文本的情况下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#test p &#123;display: inline-block;&#125;</span><br><span class="line">.c1, .c2 &#123;width: 100px; height: 100px;&#125;</span><br><span class="line">.c1 &#123;border: 1px solid #f00;&#125;</span><br><span class="line">.c2 &#123;border: 1px solid #000;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/css/css-29.png" alt=""></p>
<p>常见的解决方法：</p>
<p>给图片或者背景设置<code>vertical-align: top</code>即可，或者给有文本的元素设置<code>overflow:hidden</code></p>
<p>出现这种的原因是因为<code>inline-block</code>的默认属性是<code>vertical-align: baseline</code>，即以父元素的基线对齐，但当出现文本的时候，则会影响了对齐的基线。</p>
<p>来自官方的答案：<a href="https://link.zhihu.com/?target=http%3A//www.w3.org/TR/CSS21/visudet.html%23leading" target="_blank" rel="noopener">“Visual formatting model details”</a></p>
<blockquote>
<p>The baseline of an ‘inline-block’ is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its ‘overflow’ property has a computed value other than ‘visible’, in which case the baseline is the bottom margin edge.</p>
</blockquote>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>页面上的每一个元素都可以看成一个盒模型。</p>
<p><img src="/images/css/css-30.png" alt=""></p>
<p>可以知道盒模型由四部分组成<code>content + padding + border + margin</code>，因此一个元素的宽度应该是：<code>总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</code>。</p>
<p>但是以上有问题的是，在<strong>IE(低于IE 9)</strong>的宽度为：<code>总宽度 = width + margin-right + margin-left</code>。因此出现了<code>box-sizing: border-box</code>的属性，当设置<code>box-sizing: border-box</code>属性时，<code>border</code> 和 <code>padding</code> 就被包含在了宽高之内，和 IE 之前的标准是一样的。</p>
<h2 id="Chrome-小于12号字体"><a href="#Chrome-小于12号字体" class="headerlink" title="Chrome 小于12号字体"></a>Chrome 小于12号字体</h2><p>相对于其他的浏览器，chrome的默认最小字体只能是<code>12px</code>，无论你设置再小也是只能是<code>12px</code>，那假如有一个需求是要你兼容其他平台，包括chrome的字体表现小于<code>12px</code>的呢？可以使用css3的一个属性<code>transform: scale(n)</code>。</p>
<h2 id="text-overflow-ellipsis"><a href="#text-overflow-ellipsis" class="headerlink" title="text-overflow: ellipsis"></a>text-overflow: ellipsis</h2><p><strong>多行文本</strong>在当前标准是不支持<code>text-overflow: ellipsis</code>。在草案中有一个不规范的属性<code>-webkit-line-clamp: &lt;number&gt;</code> <a href="http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-UnsupportedProperties" target="_blank" rel="noopener">(unsupported WebKit property)</a>倒是可以支持这一需求，但是目前也只是在草案中。<code>text-overflow: ellipsis</code>需要<code>overflow: hidden</code>跟<code>white-space: nowrap</code>的支持，在IE 6还需要给元素设置<strong>宽度</strong>，至于多行文本，可以用<em>Jquery插件</em>的<em>Jquery-dotdotdot</em>，或者通过伪元素<code>:after</code>也可以很巧妙的解决这个问题。</p>
<p>在此帖一下张老师的分析以及他的方案：<a href="http://www.zhangxinxu.com/wordpress/2009/09/%E5%85%B3%E4%BA%8E%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9%E6%BA%A2%E5%87%BA%E7%94%A8%E7%82%B9%E7%82%B9%E7%82%B9-%E7%9C%81%E7%95%A5%E5%8F%B7%E8%A1%A8%E7%A4%BA/" target="_blank" rel="noopener">关于文字内容溢出用点点点(…)省略号表示</a></p>
<h2 id="letter-spacing-无法居中的问题"><a href="#letter-spacing-无法居中的问题" class="headerlink" title="letter-spacing 无法居中的问题"></a>letter-spacing 无法居中的问题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">letter-spacing</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">text-indent</span>: 20<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</span><br></pre></td></tr></table></figure>
<h2 id="blur"><a href="#blur" class="headerlink" title="blur"></a>blur</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">-webkit-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">-moz-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">-o-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">-ms-filter</span>: <span class="selector-tag">blur</span>(10<span class="selector-tag">px</span>);</span><br><span class="line">filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius="4");</span><br></pre></td></tr></table></figure>
<h2 id="work-wrap-amp-amp-work-break"><a href="#work-wrap-amp-amp-work-break" class="headerlink" title="work-wrap &amp;&amp; work-break"></a>work-wrap &amp;&amp; work-break</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    666 asdjkhaksdhksdhkjahskajhsdasdasdaaskashdkasdhkad 872934729347</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">span &#123;</span><br><span class="line">    word-wrap: break-word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/css/css-31.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">    666 asdjkhaksdhksdhkjahskajhsdasdasdaaskashdkasdhkad 872934729347</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">span &#123;</span><br><span class="line">    word-break: break-all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/css/css-32.png" alt=""></p>
<p><code>word-wrap: break-word</code> 会把过长的字符串换行再折断溢出部分，而<code>word-break: break-all</code> 会把过长的字符串在该行就将溢出的折断。</p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七个你可能不了解的CSS单位]]></title>
      <url>https://lucius0.github.io/2017/03/19/archivers/7-css-units-you-might-not-know-about/</url>
      <content type="html"><![CDATA[<p>我们很容易无法摆脱的使用我们所熟悉的CSS技术，当新的问题出现，这样会使我们处于不利的地位。</p>
<p>随着Web继续的发展，对新的解决方案的需求也会继续增大。因此，作为网页设计师和前端开发人员，我们别无选择，只有去了解我们的工具集并且熟悉它。</p>
<p>这意味着我们还要了解一些特殊的工具-那些不经常使用的，但是当需要它们的时候，它们恰恰是最正确的工具。</p>
<p>今天，我将要向你介绍一些你以前可能不知道的CSS工具。这些工具都是计量单位，就像像素或者相对单位,但是很可能你从来没听说过它们！让我们一探究竟吧。</p>
<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>我们将从你已经熟悉的东西开始。<code>em</code>单位被定义为当前字体大小。例如，如果你在<code>body</code>元素上设置一个字体大小，那么在<code>body</code>元素内的任何子元素的<code>em</code>值都等于这个字体大小。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">body &#123; font-size: 14px; &#125; </span><br><span class="line">div &#123; font-size: 1.2em; // calculated at 14px * 1.2, or 16.8px &#125;</span><br></pre></td></tr></table></figure>
<p>在这里，我们说这个<code>div</code>将有一个<code>1.2em</code>的<code>font-size</code>。它是所继承的字体大小的<code>1.2</code>倍，在这个例子中为<code>14px</code>。结果为<code>16.8px</code>.</p>
<p>但是，当你在每个元素内都级联<code>em</code>定义的字体大小将会发生什么？在下面的代码片段中我们应用和上面一模一样的CSS.每个<code>div</code>从它们的父节点继承字体大小，带给我们逐渐增加的字体大小。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">        Test <span class="comment">&lt;!-- 14 * 1.2 = 16.8px --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">            Test <span class="comment">&lt;!-- 16.8 * 1.2 = 20.16px --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">                Test <span class="comment">&lt;!-- 20.16 * 1.2 = 24.192px --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p data-height="300" data-theme-id="0" data-slug-hash="xbZQRQ" data-user="Envato Tuts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/tutsplus/pen/xbZQRQ" target="_blank" rel="noopener">Custom Flexbox Alignment With Auto Margins</a> forked by Envato Tuts(<a href="http://codepen.io" target="_blank" rel="noopener">@Envato Tuts</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>虽然在某些情况下可能需要这个，但是通常你可能想基于一个唯一的度量标准来按比例缩放。在这种情况下，你应该用<code>rem</code>。<code>rem</code>中的”<code>r</code>“代表”<code>root</code>“；这等同于<code>font-size</code>基于根元素进行设置；在大多数情况下根元素为<code>html</code>元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html &#123; font-size: 14px; &#125; </span><br><span class="line">div &#123; font-size: 1.2rem; &#125;</span><br></pre></td></tr></table></figure>
<p>在上一个示例中三个嵌套的<code>div</code>的字体大小计算结果都为<code>16.8px</code>。</p>
<h3 id="对网格布局的好处"><a href="#对网格布局的好处" class="headerlink" title="对网格布局的好处"></a>对网格布局的好处</h3><p><code>rem</code>不是只对定义字体大小有用。比如，你可以使用<code>rem</code>把整个网格系统或者UI样式库基于HTML根元素的字体大小上,然后在特定的地方使用<code>em</code>比例缩放。这将带给你更加可预测的字体大小和比例缩放。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.container &#123; </span><br><span class="line">    width: 70rem; // 70 * 14px = 980px </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从概念上讲，像这样一个策略背后的想法是为了允许你的界面随着你的内容按比例缩放。然而，这可能不一定对每个案例都有意义。</p>
<p>“<a href="http://caniuse.com/#feat=rem" target="_blank" rel="noopener">rem(root em)单位</a>“的兼容性列表。</p>
<h2 id="vh和vw"><a href="#vh和vw" class="headerlink" title="vh和vw"></a>vh和vw</h2><p>响应式网页设计技术很大程度上依赖于比例规则。然而，CSS比例不总是每个问题的最佳解决方案。CSS宽度是相对于最近的包含父元素。如果你想使用显示窗口的宽度或高度而不是父元素的宽度将会怎么样？这正是<code>vh</code>和<code>vw</code>单位所提供的。</p>
<p><code>vh</code>等于viewport高度的<code>1/100</code>.例如，如果浏览器的高是<code>900px</code>,<code>1vh</code>求得的值为<code>9px</code>。同理，如果显示窗口宽度为<code>750px</code>,<code>1vw</code>求得的值为<code>7.5px</code>。</p>
<p>这些规则表面上看起来有无尽的用途。例如，做一个占满高度的或者接近占满高度的幻灯片，可以用一个非常简单的方法实现，只要用一行CSS：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.slide &#123;</span><br><span class="line">    height: 100vh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设想你想要一个占满屏幕宽度的标题。为做到这一点，你将会用<code>vw</code>来设置一个字体大小。这个大小将会随着浏览器的宽度按比例缩放。</p>
<p data-height="300" data-theme-id="0" data-slug-hash="gbPQga" data-user="Envato Tuts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/tutsplus/pen/gbPQga" target="_blank" rel="noopener">Custom Flexbox Alignment With Auto Margins</a> forked by Envato Tuts(<a href="http://codepen.io" target="_blank" rel="noopener">@Envato Tuts</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p><a href="http://caniuse.com/#feat=viewport-units" target="_blank" rel="noopener">视窗单位: vw, vh</a>的兼容性列表。</p>
<h2 id="vmin-和-vmax"><a href="#vmin-和-vmax" class="headerlink" title="vmin 和 vmax"></a>vmin 和 vmax</h2><p><code>vh</code>和<code>vm</code>总是与视口的高度和宽度有关，与之不同的，<code>vmin</code>和<code>vmax</code>是与这次宽度和高度的最大值或最小值有关，取决于哪个更大和更小。例如，如果浏览器设置为<code>1100px</code>宽、<code>700px</code>高，<code>1vmin</code>会是<code>7px</code>,<code>1vmax</code>为<code>11px</code>。然而，如果宽度设置为<code>800px</code>，高度设置为<code>1080px</code>，<code>1vmin</code>将会等于<code>8px</code>而<code>1vmax</code>将会是<code>10.8px</code>。</p>
<p>所以你什么时候可能用到这些值？</p>
<p>设想你需要一个总是在屏幕上可见的元素。使用高度和宽度设置为低于<code>100</code>的<code>vmin</code>值将可以实现这个效果。例如，一个正方形的元素总是至少接触屏幕的两条边可能是这样定义的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123; </span><br><span class="line">    height: 100vmin; width: 100vmin; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/css/css-24.png" alt=""></p>
<p>如果你需要一个总是覆盖可视窗口的正方形(一直接触屏幕的四条边),使用相同的规则只是把单位换成<code>vmax</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123; </span><br><span class="line">    height: 100vmax; width: 100vmax; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/css/css-25.png" alt=""></p>
<p>这些规则的组合提供了一个非常灵活的方式，用新的、令人兴奋的方式利用你的可视窗口的大小。</p>
<p><a href="http://caniuse.com/#feat=viewport-units" target="_blank" rel="noopener">Viewport units: vmin, vmax</a> “兼容列表。</p>
<h2 id="ex和ch"><a href="#ex和ch" class="headerlink" title="ex和ch"></a>ex和ch</h2><p><code>ex</code>和<code>ch</code>单位，与<code>em</code>和<code>rem</code>相似，依赖于当前字体和字体大小。然而，与<code>em</code>和<code>rem</code>不同的是，这两个单位只也依赖于<code>font-family</code>，因为它们被定为基于特殊字体的法案。</p>
<p><code>ch</code>单位，或者字符单位被定义为0字符的宽度的“先进的尺寸”。在”Eric Meyer’s的博客”中可以找到一些非常有趣的讨论关于这意味着什么，但是基本的概念是，给定一个等宽字体的字体，一个N个字符单位宽的盒子，比如<code>width：40ch;</code>,可以一直容纳一个有40个字符的应用那个特定字体的字符串。虽然这个特殊规则的传统用途与列出盲文有关，但是这里创造性的可行性一定会超越这些简单的用途。</p>
<p><code>ex</code>单位被定义为”当前字体的x-height或者一个<code>em</code>的一半”。给定的字体的<code>x-height</code>是指那个字体的小写x的高度。通常，这是这个字体的中间的标志。</p>
<p><img src="/images/css/css-26.png" alt=""></p>
<p>对于这种单位有很多的用途，大多数是用于排版的微调。例如，<code>sup</code>元素,代表上标，可以用相对定位和一个<code>1ex</code>的底部值在行内被推高。类似地，你可以拉低一个下标元素。浏览器默认支持这些利用上标和下标特性的<code>vertical-align</code>规则，但是如果你想要更精细的控制，你可以像这样更明确的处理样式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sup &#123; </span><br><span class="line">    position: relative; bottom: 1ex; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">sub &#123; </span><br><span class="line">    position: relative; bottom: -1ex; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ex</code>单位在<a href="http://www.w3.org/TR/REC-CSS1/#length-units" target="_blank" rel="noopener">CSS1</a>中已经存在，但是你不会找到对<code>ch</code>单位有像这样坚实的支持。具体支持，在Eric Meyer’s 的博客中查看<a href="http://www.quirksmode.org/css/units-values/" target="_blank" rel="noopener">CSS单位和值</a>。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>密切关注CSS的持续发展和扩张是非常重要的，一边在你的工具集里知道所有的工具。也许你会遇到一个特殊的问题需要一个意想不到的解决方案，利用这些更隐蔽的计量单位之一。花时间去阅读新规范，记录来自好的资源的新闻资讯！</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://webdesign.tutsplus.com/articles/taking-the-erm-out-of-ems--webdesign-12321" target="_blank" rel="noopener">Taking the “Erm..” Out of Ems</a></li>
<li><a href="https://webdesign.tutsplus.com/articles/taking-ems-even-further--webdesign-12543" target="_blank" rel="noopener">Taking Ems Even Further</a></li>
<li><a href="http://caniuse.com/#feat=viewport-units" target="_blank" rel="noopener">Caniuse Viewport units</a></li>
<li><a href="http://www.w3cplus.com/css/css-font-sizing.html" target="_blank" rel="noopener">CSS的font-size属性</a></li>
<li><a href="http://www.w3cplus.com/css/r-i-p-rem-viva-css-reference-pixel.html" target="_blank" rel="noopener">Rem VS Px</a></li>
<li><a href="http://www.w3cplus.com/css/the-lengths-of-css.html" target="_blank" rel="noopener">CSS的长度单位</a></li>
<li><a href="http://www.w3cplus.com/css3/define-font-size-with-css3-rem" target="_blank" rel="noopener">CSS3的REM设置字体大小</a></li>
<li><a href="http://www.w3cplus.com/css/px-to-em" target="_blank" rel="noopener">CSS中强大的EM</a></li>
</ul>
<script src="http://codepen.io/assets/embed/ei.js"> </script>

<p>转自：<a href="https://www.w3cplus.com/css/7-css-units-you-might-not-know-about.html" target="_blank" rel="noopener">https://www.w3cplus.com/css/7-css-units-you-might-not-know-about.html</a></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS - relative 和 absolute 小记]]></title>
      <url>https://lucius0.github.io/2017/03/02/archivers/relative-absolute-note/</url>
      <content type="html"><![CDATA[<p>我在之前翻译过有关于css定位的文章 <a href="/2016/10/30//archivers/5-things-you-should-know-about-css/" title="《5件你需要知道的css定位》">《5件你需要知道的css定位》</a>。那么这次是看了张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2010/12/css-%E7%9B%B8%E5%AF%B9%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="noopener">相对定位和绝对定位</a>之后的小记，巩固下基础知识。</p>
<h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><h3 id="包裹性"><a href="#包裹性" class="headerlink" title="包裹性"></a>包裹性</h3><p><code>position: absolute</code>跟<code>float: left</code>一样具有包裹性，即让元素<code>inline-block</code>化，例如div标签默认宽度100%显示，一旦有了包裹性，即100%默认宽度就会成了自适应内部元素的宽度。<a href="http://www.zhangxinxu.com/study/201012/position-absolute-inline-block.html" target="_blank" rel="noopener">absolute的inline-block化demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.div &#123; padding:20px; margin-bottom:10px; background-color:#f0f3f9; &#125;</span><br><span class="line">.abs &#123; position:absolute; &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>无absolute<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div abs"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>absolute后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>float 也是 <code>inline-block</code>元素，可以利用 float 使得一些内联元素如 span 支持 width 属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以下目的都是一样的 --&gt;</span></span><br><span class="line">span &#123; display:block; width:100px; &#125;</span><br><span class="line">span &#123; float:left; width:100px; &#125;</span><br><span class="line">span &#123; position:absolute; width:100px; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="破坏性"><a href="#破坏性" class="headerlink" title="破坏性"></a>破坏性</h3><p>float 会使<strong>高度</strong>失效，之所以<strong>宽度</strong>还在，是因为还在DOM tree，位置还是；而 absolute 因为脱离文档流，所以宽高都失效。<a href="http://www.zhangxinxu.com/study/201012/position-absolute-destroy.html" target="_blank" rel="noopener">absolute的破坏性demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.div &#123; padding:20px; margin:10px 0 0 10px; background-color:#f0f3f9; float:left; &#125;</span><br><span class="line">.abs &#123; position:absolute; &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片无absolute<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"abs"</span> <span class="attr">data-src</span>=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片absolute后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="常见absolute布局的替代实现方案"><a href="#常见absolute布局的替代实现方案" class="headerlink" title="常见absolute布局的替代实现方案"></a>常见absolute布局的替代实现方案</h3><p><strong>margin替换</strong></p>
<p>margin 可以代替 absolute 对其元素定位，如B相对于A元素右下角定位，常见的就是用B元素 absolute 定位并且使用 bottom 跟 right 属性定位。这样会存在问题，一是当父容器为 static 时候，B会定位错乱，二是当父容器的宽度改变，那么B的定位也随之改变。而利用 margin 的做法是怎样的呢？A跟B不在同一个 inline-block 里，可以让A表现为 block 属性，并且使B裹上一个表现为 inline-block 的容器，这样B元素就可以使用 margin 来灵活定位到右下角了。<a href="http://www.zhangxinxu.com/study/201012/position-absolute-replace-method-2.html" target="_blank" rel="noopener">absolute/margin定位布局对比demo</a></p>
<h3 id="absolute正业之元素隐藏"><a href="#absolute正业之元素隐藏" class="headerlink" title="absolute正业之元素隐藏"></a>absolute正业之元素隐藏</h3><p>除了使用<code>display: none</code>和<code>display:block/inline</code>来控制DOM元素显隐，还可以利用 absolute ，且有三个好处：<strong>页面可用性，回流与渲染，配合JavaScript的控制。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.hidden&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:-9999em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hidden&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    visibility:hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.hidden&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    clip: rect(1px 1px 1px 1px); /* IE6, IE7 */</span><br><span class="line">    clip: rect(1px, 1px, 1px, 1px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1、可用性隐藏：</strong>“选项卡内容”，“更多收起展开”这些会不利于盲人这类需要借助屏幕阅读器的用户，但是可用性隐藏也存在一个问题，就是响应键盘焦点Tab切换的时候，假如你用的是 absolute 隐藏的时候，是可以被响应焦点的。</p>
<p><strong>2、回流与渲染：</strong>使用<code>display:none</code>会造成重绘跟回流，详细可以看“<a href="http://www.zhangxinxu.com/wordpress/?p=311" target="_blank" rel="noopener">最小化浏览器中的回流(reflow)</a>”和“<a href="http://www.zhangxinxu.com/wordpress/?p=600" target="_blank" rel="noopener">回流与重绘：CSS性能让JavaScript变慢？</a>”</p>
<p><strong>3、配合JavaScript的控制：</strong> 隐藏可以看上面的，但是显示我们只需要<code>dom.style.position = &quot;static&quot;;</code>，就无需担心原本标签的是inline水平还是block水平。</p>
<h3 id="absolute与等高布局"><a href="#absolute与等高布局" class="headerlink" title="absolute与等高布局"></a>absolute与等高布局</h3><p><a href="http://www.zhangxinxu.com/wordpress/?p=694" target="_blank" rel="noopener">纯CSS实现侧边栏/分栏高度自动相等</a> 与 <a href="http://www.zhangxinxu.com/wordpress/?p=1187" target="_blank" rel="noopener">我所知道的几种display:table-cell的应用</a> 均可以实现等高布局。</p>
<p>现在是利用 absolute 来实现等高布局，应用了<code>position: absolute</code>元素无宽度无高度。<a href="http://www.zhangxinxu.com/study/201103/absolute-equal-height-layout.html" target="_blank" rel="noopener">绝对定位与等高布局demo</a></p>
<p>核心代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.equal_height&#123;width:100%; height:999em; position:absolute; left:0; top:0;&#125;</span><br></pre></td></tr></table></figure>
<p>同时，满足以下条件：</p>
<ol>
<li><p>高度999em的绝对定位层位于侧栏容器内，侧栏<code>position</code>为<code>relative</code></p>
</li>
<li><p>该栏实际元素内容用一个与absolute绝对定位层为兄弟关系的标签层包裹，<code>position</code>为<code>relative</code>，<code>z-index</code>值1或其他</p>
</li>
<li><p>左右栏的父标签需设置<code>overflow:hidden</code>，同时为了兼容IE6/7，需设置<code>position</code>为<code>relative</code></p>
</li>
</ol>
<p><img src="/images/css/css-23.png" alt=""></p>
<p><strong>原理：</strong>由于绝对定位元素无高度的特性无宽度的特性，我们可以伪造一个高度足够高的绝对定位层（设置背景色，边框等属性），同时设置父标签溢出隐藏，那么其多出来的高度就不会显示了，也就实现了看上去的等高布局效果了。</p>
<h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>1、定位</p>
<p>relative 与 absolute 不同的是，relative 相对于自身位移，而 absolute 是相对于容器位移，张老师形象的称为“幻影位移“，什么这么说呢？因为 relative 是不会脱离文档流的，即就算你离开了自己本来的位置，那个位置还在，还是属于你的，只是你的”幻影“离开了原来的位置，表现也就变了。<a href="http://www.zhangxinxu.com/study/201108/css-relative-skill-move.html" target="_blank" rel="noopener">relative属性幻影瞬移技能demo</a></p>
<p>2、z-index</p>
<p>relative 跟 absolute 一样拥有 <code>z-index</code> 属性</p>
<p>3、限制 absolute</p>
<p>当 absolute 的父容器的定位是 relative 时，absolute 元素也就只能在 relative 限制下移动了，即 absolute 的<code>top\left</code>则是相对于 relative 移动的。</p>
<h3 id="relative-最小化影响"><a href="#relative-最小化影响" class="headerlink" title="relative 最小化影响"></a>relative 最小化影响</h3><p><a href="http://www.zhangxinxu.com/study/201108/css-relative-mini-effect-rule-unfollow.html" target="_blank" rel="noopener">未遵循最小化影响原则实现demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.test &#123;width:25em; margin:2em auto;&#125;</span><br><span class="line">.box &#123; padding:2em; border:1px solid #beceeb; border-radius:2px; background-color:#f0f3f9; position:relative; &#125;</span><br><span class="line">.ok &#123; color:green; font-size:6em; position:absolute; right:-11px; bottom:-.5em; &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        CSS relative相对定位的最小化影响原则</span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"ok"</span>&gt;</span>√<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="http://www.zhangxinxu.com/study/201108/css-relative-mini-effect-rule.html" target="_blank" rel="noopener">遵循最小化影响原则实现demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.test &#123;width:25em; margin:2em auto;&#125;</span><br><span class="line">.box &#123; padding:2em; border:1px solid #beceeb; border-radius:2px; background-color:#f0f3f9; &#125;</span><br><span class="line">.rel &#123; position:relative; &#125;</span><br><span class="line">.ok &#123; color:green; font-size:6em; position:absolute; right:-10px; top:-1em; &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>CSS relative相对定位的最小化影响原则<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rel"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"ok"</span>&gt;</span>√<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>absolute+margin</code>（左上角元素定位，作用于当前元素）、<code>float+relative</code>（右上角元素定位，作用于当前元素）和<code>relative+absolute</code>（右下角元素定位，直接父标签+当前定位元素）。而目前web届大肆使用的外层div层设置relative属性，里面一些absolute元素定位的方法是不推荐的。</p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue - 生命周期和钩子]]></title>
      <url>https://lucius0.github.io/2017/02/27/archivers/vue-life-cycle-and-hook/</url>
      <content type="html"><![CDATA[<p>生命周期的示例图，可以参考 <a href="/2017/01/08//archivers/vue-beginning/" title="《Vue.js 初体验》">《Vue.js 初体验》</a> 中的<strong>生命周期</strong>。</p>
<p>结合上面给的生命周期示例图，我们大致清楚Vue从创建到销毁的整个过程，接下来我们来利用代码讲解下具体每个钩子的实际作用。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"refHook"</span> &gt;</span>this is refHook<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        message : <span class="string">"this is data message"</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">     beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   beforeCreate'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); <span class="comment">//undefined </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  <span class="comment">//undefined </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   created'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  <span class="comment">//已被初始化 </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   beforeMount'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  <span class="comment">//已被初始化 </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   mounted'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  <span class="comment">//已被初始化 </span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); <span class="comment">//已被初始化</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   beforeUpdate'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); </span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   updated'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); </span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   beforeDestroy'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);   </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); </span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   destroyed'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);   </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如下图我们看到从创建到挂载的整个流程，特别注意的是，在<code>beforeMount</code>时，我们可以看到<code>el</code>还是<code>[[ message ]]</code>(<em>ps: 这里的 [ 指的是花括弧，因为hexo会把花括弧给视为关键字符</em>)，这里就是运用到了<strong>visual dom</strong>的原理，直到<code>mounted</code>才把数据渲染进去。</p>
<p><img src="/images/vue/vue-15.png" alt=""></p>
<p><strong>小结：</strong></p>
<ol>
<li><p><code>beforecreated</code>：el 和 data 还未初始化，<del>但是refs已经初始化完成了</del>，refs也是只是拿到对象，属性方法还没渲染完毕([Vue warn]: Error in beforecreated hook)。</p>
</li>
<li><p><code>created</code>：完成了 data 数据的初始化，el没有</p>
</li>
<li><p><code>beforeMount</code>：完成了 el 和 data 初始化 </p>
</li>
<li><p><code>mounted</code>：完成挂载，refs的组件属性方法渲染完成</p>
</li>
</ol>
<p>在控制台输入<code>app.message = &#39;hello vue&#39;</code>，会看到vue触发<code>beforeUpdate</code>以及<code>updated</code>。</p>
<p><img src="/images/vue/vue-16.png" alt=""></p>
<p>至于销毁，<code>app.$destroy()</code>，会触发<code>beforeDestroy</code>和<code>destroyed</code>，但是销毁之后，我们重新修改<code>app.message = &#39;hello&#39;</code>是不会再生效的了，也就是原先的dom依旧存在，但是已经无法使用vue来控制dom元素的变化了。</p>
<p>那么组件的生命周期是什么样的呢？我们同样也来做一下简单的模拟。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">child-com</span> <span class="attr">:child-msg</span>=<span class="string">"childMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">'childCom'</span>, &#123;</span></span><br><span class="line"><span class="xml">  template: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;childMsg&#125;&#125; - &#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>",</span></span><br><span class="line"><span class="javascript">  props: [<span class="string">'childMsg'</span>],</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">"this is child data message"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child beforeCreate'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"props  : "</span> + <span class="keyword">this</span>.childMsg, <span class="keyword">this</span>.childMsg);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child created'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"props  : "</span> + <span class="keyword">this</span>.childMsg, <span class="keyword">this</span>.childMsg);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child beforeMount'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"props  : "</span> + <span class="keyword">this</span>.childMsg, <span class="keyword">this</span>.childMsg);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child mounted'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"props  : "</span> + <span class="keyword">this</span>.childMsg, <span class="keyword">this</span>.childMsg);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child beforeUpdate'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child updated'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child beforeDestroy'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child destroyed'</span>);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">        message : <span class="string">"this is data message"</span>,</span></span><br><span class="line"><span class="javascript">        childMsg: <span class="string">"this is childMsg"</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">     beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent beforeCreate'</span>);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent created'</span>);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent beforeMount'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent mounted'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent beforeUpdate'</span>);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent updated'</span>);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent beforeDestroy'</span>);</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent destroyed'</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到，<code>props</code>的数据是跟<code>data</code>的出现周期是一样的，组件是在父容器执行<code>beforeMount</code>时初始化的，在<code>beforeCreate</code>操作<code>props</code>数据则会报错，因为那个时候还没挂载到app实例化对象上。还有注意一下<code>parent beforeMount</code>，这个跟之前说的虚拟dom的原理一样，先占坑，然后再挂载。</p>
<p><img src="/images/vue/vue-17.png" alt=""></p>
<p>在<code>created</code>时，组件的<code>props</code>数据出来了，注意组件的<code>el</code>在<code>beforeMount</code>时，是不会像父容器那样先占坑的，而是等到<code>mounted</code>之后才把数据渲染上去，之后返回父容器的<code>mounted</code>方法，才会把组件数据都渲染到dom上面去。</p>
<p><img src="/images/vue/vue-18.png" alt=""></p>
<p><strong>总结：</strong></p>
<blockquote>
<p>beforecreate : 举个栗子：可以在这加个loading事件<br>created ：在这结束loading，还做一些初始化，实现函数自执行<br>mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情<br>beforeDestory： 你确认删除XX吗？<br>destoryed ：当前组件已被删除，清空相关内容</p>
</blockquote>
<p>参考资料：<a href="http://www.cnblogs.com/gagag/p/6246493.html" target="_blank" rel="noopener">http://www.cnblogs.com/gagag/p/6246493.html</a></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue - props]]></title>
      <url>https://lucius0.github.io/2017/02/24/archivers/vue-props/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue 2.x相比较Vue 1.x而言，升级变化除了实现了Virtual-Dom以外，给使用者最大不适就是移除的组件的<code>props</code>的双向绑定功能。以往在Vue1.x中利用<code>props</code>的<code>twoWay</code>和<code>.sync</code>绑定修饰符就可以实现<code>props</code>的双向绑定功能，但是在Vue2中彻底废弃了此功能，如果需要双向绑定需要自己来实现。</p>
<h2 id="Vue2的组件props通信方式"><a href="#Vue2的组件props通信方式" class="headerlink" title="Vue2的组件props通信方式"></a>Vue2的组件props通信方式</h2><p>在Vue2中组件的props的数据流动改为了只能单向流动，即只能由组件外（调用组件方）通过组件的DOM属性<code>attribute</code>传递<code>props</code>给组件内，组件内只能被动接收组件外传递过来的数据，并且在组件内，不能修改由外层传来的<code>props</code>数据。</p>
<p><img src="/images/vue/vue-12.jpg" alt=""></p>
<p>关于这一点的修改官方给的解释：</p>
<blockquote>
<p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</p>
</blockquote>
<p>虽然废弃了props的双向绑定对于整个项目整体而言是有利且正确的，但是在某些时候我们确实需要从组件内部修改props的需求</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>假设我要做一个iOS风格的开关按钮，需求就只有两个：</p>
<ol>
<li><p>点击按钮实现 开/关 状态切换</p>
</li>
<li><p>不点击按钮，也可以通过外部修改数据切换开关状态，比如级联联动开关。</p>
</li>
</ol>
<p><img src="/images/vue/vue-13.jpg" alt=""></p>
<p>代码大致是类似这样的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--开关组件--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">switchbtn</span> <span class="attr">:result</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">switchbtn</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--外部控制--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"change"</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开关组件代码</span></span><br><span class="line">Vue.component(<span class="string">"switchbtn"</span>,&#123;</span><br><span class="line">    template:<span class="string">"&lt;div @click='change'&gt;&#123;&#123;result?'开':'关'&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">    props:[<span class="string">"result"</span>],</span><br><span class="line">    methods:&#123;</span><br><span class="line">        change()&#123;</span><br><span class="line">            <span class="keyword">this</span>.result=!<span class="keyword">this</span>.result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        result:<span class="literal">true</span><span class="comment">//开关状态数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        change()&#123;</span><br><span class="line">            <span class="keyword">this</span>.result=!<span class="keyword">this</span>.result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>但是在vue2.0中上面的代码在点击开关时会报错：</p>
<blockquote>
<p>[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “result” (found in component )</p>
</blockquote>
<p>组件内不能修改props的值，同时修改的值也不会同步到组件外层，即调用组件方不知道组件内部当前的状态是什么</p>
<h2 id="实现组件属性的双向绑定方式"><a href="#实现组件属性的双向绑定方式" class="headerlink" title="实现组件属性的双向绑定方式"></a>实现组件属性的双向绑定方式</h2><h3 id="在组件内的data对象中创建一个props属性的副本"><a href="#在组件内的data对象中创建一个props属性的副本" class="headerlink" title="在组件内的data对象中创建一个props属性的副本"></a>在组件内的data对象中创建一个props属性的副本</h3><p>因为<code>result</code>不可写，所以需要在data中创建一个副本<code>myResult</code>变量，初始值为props属性<code>result</code>的值，同时在组件内所有需要调用props的地方调用这个data对象<code>myResult</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"switchbtn"</span>, &#123;</span><br><span class="line">    template: <span class="string">"&lt;div @click='change'&gt;&#123;&#123;myResult?'开':'关'&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">    props: [<span class="string">"result"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            myResult: <span class="keyword">this</span>.result<span class="comment">//data中新增字段</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="创建针对props属性的watch来同步组件外对props的修改"><a href="#创建针对props属性的watch来同步组件外对props的修改" class="headerlink" title="创建针对props属性的watch来同步组件外对props的修改"></a>创建针对props属性的watch来同步组件外对props的修改</h3><p>此时在组件外（父组件）修改了组件的props，会同步到组件内对应的props上，但是不会同步到你刚刚在data对象中创建的那个副本上，所以需要再创建一个针对props属性<code>result</code>的watch（监听），当props修改后对应data中的副本<code>myResult</code>也要同步数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"switchbtn"</span>, &#123;</span><br><span class="line">    template: <span class="string">"&lt;div @click='change'&gt;&#123;&#123;myResult?'开':'关'&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">    props: [<span class="string">"result"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            myResult: <span class="keyword">this</span>.result</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        result(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.myResult = val;<span class="comment">//新增result的watch，监听变更并同步到myResult上</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>
<h3 id="创建针对props副本的watch，通知到组件外"><a href="#创建针对props副本的watch，通知到组件外" class="headerlink" title="创建针对props副本的watch，通知到组件外"></a>创建针对props副本的watch，通知到组件外</h3><p>此时在组件内修改了props的副本<code>myResult</code>，组件外不知道组件内的props状态，所以需要再创建一个针对props副本<code>myResult</code>，即对应data属性的watch。<br>在组件内向外层（父组件）发送通知，通知组件内属性变更，然后由外层（父组件）自己来变更他的数据</p>
<p><strong>最终全部代码：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">switchbtn</span> <span class="attr">:result</span>=<span class="string">"result"</span> @<span class="attr">on-result-change</span>=<span class="string">"onResultChange"</span>&gt;</span><span class="tag">&lt;/<span class="name">switchbtn</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"change"</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">"switchbtn"</span>, &#123;</span><br><span class="line">    template: <span class="string">"&lt;div @click='change'&gt;&#123;&#123;myResult?'开':'关'&#125;&#125;&lt;/div&gt;"</span>,</span><br><span class="line">    props: [<span class="string">"result"</span>],</span><br><span class="line">    data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            myResult: <span class="keyword">this</span>.result<span class="comment">//①创建props属性result的副本--myResult</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        result(val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.myResult = val;<span class="comment">//②监听外部对props属性result的变更，并同步到组件内的data属性myResult中</span></span><br><span class="line">        &#125;,</span><br><span class="line">        myResult(val)&#123;</span><br><span class="line">            <span class="comment">//xxcanghai 小小沧海 博客园</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">"on-result-change"</span>,val);<span class="comment">//③组件内对myResult变更后向外部发送事件通知</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        change() &#123;</span><br><span class="line">            <span class="keyword">this</span>.myResult = !<span class="keyword">this</span>.myResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">"#app"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        result: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        change() &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = !<span class="keyword">this</span>.result;</span><br><span class="line">        &#125;,</span><br><span class="line">        onResultChange(val)&#123;</span><br><span class="line">            <span class="keyword">this</span>.result=val;<span class="comment">//④外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>至此，实现了组件内数据与组件外的数据的<strong>双向绑定</strong>，组件内外数据的同步。最后归结为一句话就是：组件内部自己变了告诉外部，外部决定要不要变。</p>
<p><img src="/images/vue/vue-14.jpg" alt=""></p>
<h3 id="什么样的props适合做双向绑定？"><a href="#什么样的props适合做双向绑定？" class="headerlink" title="什么样的props适合做双向绑定？"></a>什么样的props适合做双向绑定？</h3><p>首先要声明的是双向绑定的props肯定是不利于组件间的数据状态管理，尤其是在复杂的业务中更是如此，所以要尽可能的少用双向绑定，过于复杂的数据处理建议使用Vuex （<a href="http://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="noopener">http://vuex.vuejs.org/zh-cn/intro.html</a>）</p>
<p>但是在我们平时使用过程中又确实有props双向绑定的需求，个人认为只有在满足以下条件时再使用双向绑定的props。</p>
<ol>
<li><p>组件内部需要修改props。</p>
</li>
<li><p>组件需要可以由外部在运行时动态控制，而非单纯初始化。</p>
</li>
<li><p>组件外部需要读取组件内的状态来进行处理</p>
</li>
</ol>
<p>满足上述条件的有比如本例中的switch开关组件，需要外部控制开关状态；再比如Tab多标签页组件的activeIndex属性，需要可以由外部控制标签页当前打开哪一页等等。</p>
<h2 id="自动化的props双向绑定处理"><a href="#自动化的props双向绑定处理" class="headerlink" title="自动化的props双向绑定处理"></a>自动化的props双向绑定处理</h2><h3 id="Vue的mixin组件——propsync"><a href="#Vue的mixin组件——propsync" class="headerlink" title="Vue的mixin组件——propsync"></a>Vue的mixin组件——propsync</h3><p>通过上例也可以看出在Vue2.0中实现props的双向绑定很麻烦，如果有两个props需要做双向绑定上面的代码就要实现两遍，代码极其冗余。所以我写了一个mixin来自动化处理props的双向绑定的需求——<code>propsync</code>。</p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li><p>实现了在组件内自动创建所有prop对应的data属性，方便组件内修改prop使用。解决了vue2.0中不允许组件内直接修改prop的设计。</p>
</li>
<li><p>实现了组件外修改组件prop，组件内自动同步修改到data属性。</p>
</li>
<li><p>实现了组件内修改了data属性（由prop创建的），自动向组件外发出事件通知有内部prop修改。由组件外决定是否要将修改同步到组件外</p>
</li>
</ol>
<h3 id="propsync的使用方法"><a href="#propsync的使用方法" class="headerlink" title="propsync的使用方法"></a>propsync的使用方法</h3><h4 id="编写组件"><a href="#编写组件" class="headerlink" title="编写组件"></a>编写组件</h4><ol>
<li><p>对于编写组件时，如果需要props双向绑定，则直接引入mixin，并在配置中声明mixin即可： <code>mixins: [propsync]</code></p>
</li>
<li><p>此mixin会根据prop的名称生成对应的data属性名，默认为在prop属性名前面增加”p_”，即若prop中有字段名为<code>active</code>，则自动生成名为<code>p_active</code>的data字段（props到data的名称变更方法可自行修改，详见propsync源码开头配置）</p>
</li>
<li><p>propsync默认会将所有props创建双向绑定，可通过<code>propsync:false</code>来声明此props不需要创建双向绑定。</p>
</li>
</ol>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> propsync <span class="keyword">from</span> <span class="string">'./mixins/propsync'</span>;<span class="comment">//引入mixin文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">"tab"</span>,</span><br><span class="line">  mixins: [propsync],<span class="comment">//声明使用propsync的mixin (https://cn.vuejs.org/v2/api/#mixins)</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    active: &#123;</span><br><span class="line">      type: [<span class="built_in">String</span>, <span class="built_in">Number</span>],<span class="comment">//会被propsync自动实现双向绑定，在data中创建p_active变量</span></span><br><span class="line">    &#125;,</span><br><span class="line">    width: &#123;</span><br><span class="line">      type: [<span class="built_in">Number</span>, <span class="built_in">String</span>],</span><br><span class="line">      propsync:<span class="literal">false</span><span class="comment">//不会被propsync实现双向绑定</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setActive(page, index, e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.p_active = index;<span class="comment">//可以直接使用this.p_active</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="调用组件"><a href="#调用组件" class="headerlink" title="调用组件"></a>调用组件</h4><p>引入propsync后，会在内部双向绑定的data变更后触发一个<code>onPropsChange</code>事件。遂在调用组件处，增加一个事件监听 onPropsChange（可修改），当组件内修改了props时<code>propsync</code>会触发此事件，返回参与依次为：<strong>修改prop名称，修改后值，修改前值</strong>。可以由当前组件调用方（父组件）来决定是否要将组件内的变更同步到调用方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;tab :active=<span class="string">"active"</span> @onPropsChange=<span class="string">"change"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">tab</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">......略</span><br><span class="line">&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">   active:<span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">   change:<span class="function"><span class="keyword">function</span>(<span class="params">propName,newVal,oldVal</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>[propName]=newVal;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"组件tab的"</span> +propName+ <span class="string">"属性变更为"</span> +newVal);</span><br><span class="line">   &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Vue的mixin组件propsync已经托管至Github：<a href="https://github.com/xxcanghai/cnblogsFiles/blob/master/vue-mixins/propsync.js" target="_blank" rel="noopener">https://github.com/xxcanghai/cnblogsFiles/blob/master/vue-mixins/propsync.js</a></p>
<p>原文链接：<a href="http://www.cnblogs.com/xxcanghai/p/6124699.html" target="_blank" rel="noopener">http://www.cnblogs.com/xxcanghai/p/6124699.html</a></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git diff]]></title>
      <url>https://lucius0.github.io/2017/02/23/archivers/git-diff/</url>
      <content type="html"><![CDATA[<h2 id="change却未stage"><a href="#change却未stage" class="headerlink" title="change却未stage"></a>change却未stage</h2><p>常见的一种做法就是使用<code>git diff</code>来查看工作目录还未stage的文件差异。</p>
<p><strong>实验方法：</strong></p>
<ol>
<li><p>修改一下simplegit.rb，添加一个方法</p>
</li>
<li><p>然后在README文件中添加一个作者</p>
</li>
<li><p>然后我们用<code>git add</code>命令把README文件载入(stage)</p>
</li>
<li><p>运行<code>git status</code>会显示README载入了，而simplegit.rb只是修改了还未载入</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ vim lib/simplegit.rb</span><br><span class="line">$ vim README</span><br><span class="line">$ git add README</span><br><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</span><br><span class="line">#</span><br><span class="line"># modified:   README</span><br><span class="line">#</span><br><span class="line"># Changed but not updated:</span><br><span class="line">#   (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line">#</span><br><span class="line"># modified:   lib/simplegit.rb</span><br><span class="line">#</span><br></pre></td></tr></table></figure>
<p>那么，我现在想查看一下对simplegit.rb文件究竟做了什么改动？在我载入之前怎么查看这些改动的内容呢？答案是只需运行不带任何参数的<code>git diff</code>命令即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</span><br><span class="line">index dd5ecc4.<span class="number">.8</span>ac6604 <span class="number">100644</span></span><br><span class="line">--- a/lib/simplegit.rb</span><br><span class="line">+++ b/lib/simplegit.rb</span><br><span class="line">@@ <span class="number">-25</span>,<span class="number">6</span> +<span class="number">25</span>,<span class="number">10</span> @@ <span class="class"><span class="keyword">class</span> <span class="title">SimpleGit</span></span></span><br><span class="line">     command("git log -n 25 #&#123;treeish&#125;")</span><br><span class="line">   end</span><br><span class="line">+  def log_single(branch = <span class="string">'master'</span>)</span><br><span class="line">+    command(<span class="string">"git log --pretty=oneline #&#123;branch&#125;"</span>)</span><br><span class="line">+  end</span><br><span class="line">+</span><br><span class="line">   def blame(path)</span><br><span class="line">     command(<span class="string">"git blame #&#123;path&#125;"</span>)</span><br><span class="line">   end</span><br></pre></td></tr></table></figure>
<p>这样就可以看到我添加到文件中的内容，现在我可以决定是不是要将其载入了。注意，README文件的修改并没有显示出来。</p>
<h2 id="stage但未commit"><a href="#stage但未commit" class="headerlink" title="stage但未commit"></a>stage但未commit</h2><p>为了查看载入（staged）而并未提交（not committed）的内容差异，可以使用<code>git diff --stage</code>命令（在git 1.6之前的版本中，使用<code>--cached</code>）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --staged</span><br><span class="line">diff --git a/README b/README</span><br><span class="line">index c526f88.<span class="number">.879</span>f0d4 <span class="number">100644</span></span><br><span class="line">--- a/README</span><br><span class="line">+++ b/README</span><br><span class="line">@@ <span class="number">-8</span>,<span class="number">3</span> +<span class="number">8</span>,<span class="number">4</span> @@ It is an example <span class="keyword">for</span> the Git Peepcode book that I<span class="string">'m currently writin</span></span><br><span class="line"><span class="string"> Author : Scott Chacon (schacon@gmail.com)</span></span><br><span class="line"><span class="string">          Orange Peel Chacon (opchacon@gmail.com)</span></span><br><span class="line"><span class="string">          Magnus O. Chacon (mchacon@gmail.com)</span></span><br><span class="line"><span class="string">+         Josephine Chacon (jo.chacon@gmail.com)</span></span><br></pre></td></tr></table></figure>
<p>适应情形：在运行<code>git commit（不带&#39;-a&#39;）</code>之前，查看所有载入而未提交的变更内容。</p>
<h2 id="最后一次提交之后的所有变更"><a href="#最后一次提交之后的所有变更" class="headerlink" title="最后一次提交之后的所有变更"></a>最后一次提交之后的所有变更</h2><p>现在，如果你想查看最后一次提交之后工作目录中文件的变更，你可以在<code>git diff</code>之后加一个HEAD来进行比对：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD</span><br><span class="line">diff --git a/README b/README</span><br><span class="line">index c526f88.<span class="number">.879</span>f0d4 <span class="number">100644</span></span><br><span class="line">--- a/README</span><br><span class="line">+++ b/README</span><br><span class="line">@@ <span class="number">-8</span>,<span class="number">3</span> +<span class="number">8</span>,<span class="number">4</span> @@ It is an example <span class="keyword">for</span> the Git Peepcode book that I<span class="string">'m currently writin</span></span><br><span class="line"><span class="string"> Author : Scott Chacon (schacon@gmail.com)</span></span><br><span class="line"><span class="string">          Orange Peel Chacon (opchacon@gmail.com)</span></span><br><span class="line"><span class="string">          Magnus O. Chacon (mchacon@gmail.com)</span></span><br><span class="line"><span class="string">+         Josephine Chacon (jo.chacon@gmail.com)</span></span><br><span class="line"><span class="string">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</span></span><br><span class="line"><span class="string">index dd5ecc4..8ac6604 100644</span></span><br><span class="line"><span class="string">--- a/lib/simplegit.rb</span></span><br><span class="line"><span class="string">+++ b/lib/simplegit.rb</span></span><br><span class="line"><span class="string">@@ -25,6 +25,10 @@ class SimpleGit</span></span><br><span class="line"><span class="string">     command("git log -n 25 #&#123;treeish&#125;")</span></span><br><span class="line"><span class="string">   end</span></span><br><span class="line"><span class="string">+  def log_single(branch = '</span>master<span class="string">')</span></span><br><span class="line"><span class="string">+    command("git log --pretty=oneline #&#123;branch&#125;")</span></span><br><span class="line"><span class="string">+  end</span></span><br><span class="line"><span class="string">+</span></span><br><span class="line"><span class="string">   def blame(path)</span></span><br><span class="line"><span class="string">     command("git blame #&#123;path&#125;")</span></span><br><span class="line"><span class="string">   end</span></span><br></pre></td></tr></table></figure>
<p>适用情形：在运行<code>git commit -a</code>之前。显示所有载入的和未载入的变更。</p>
<h2 id="从一个特定点开始文件的修改情况"><a href="#从一个特定点开始文件的修改情况" class="headerlink" title="从一个特定点开始文件的修改情况"></a>从一个特定点开始文件的修改情况</h2><p>这也是最常见的一个问题。譬如，如何查看创建v1.6这个标签之后README文件所发生的修改呢，可以这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git diff v1<span class="number">.6</span><span class="number">.0</span> -- README </span><br><span class="line">diff --git a/README b/README</span><br><span class="line">index <span class="number">548142</span>c.<span class="number">.5</span>fa41b7 <span class="number">100644</span></span><br><span class="line">--- a/README</span><br><span class="line">+++ b/README</span><br><span class="line">@@ <span class="number">-24</span>,<span class="number">7</span> +<span class="number">24</span>,<span class="number">7</span> @@ It was originally written by Linus Torvalds <span class="keyword">with</span> help <span class="keyword">of</span> a group o</span><br><span class="line"> hackers around the net. It is currently maintained by Junio C Hamano.</span><br><span class="line"> Please read the file INSTALL <span class="keyword">for</span> installation instructions.</span><br><span class="line">-See Documentation/tutorial.txt to get started, then see</span><br><span class="line">+See Documentation/gittutorial.txt to get started, then see</span><br><span class="line"> Documentation/everyday.txt <span class="keyword">for</span> a useful minimum set <span class="keyword">of</span> commands,</span><br><span class="line"> and <span class="string">"man git-commandname"</span> <span class="keyword">for</span> documentation <span class="keyword">of</span> each command.</span><br></pre></td></tr></table></figure>
<p>上面就显示出了工作目录中README文件的版本差异–如果你做了本地修改，载入或未载入，都会在这次比对中显示出来。</p>
<h2 id="两次提交的差异比对"><a href="#两次提交的差异比对" class="headerlink" title="两次提交的差异比对"></a>两次提交的差异比对</h2><p>如果你想对两次快照做差异比对，也即项目的两个版本之间比对–直接在<code>git diff</code>后跟上要比对的两个版本号即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff v1<span class="number">.0</span> v1<span class="number">.1</span></span><br></pre></td></tr></table></figure>
<p>diff命令加这样的参数，显示某些统计数，下面是显示v1.6.1.1和v1.6.1.2两个版本之间差异的统计数字：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git diff v1<span class="number">.6</span><span class="number">.1</span><span class="number">.1</span> v1<span class="number">.6</span><span class="number">.1</span><span class="number">.2</span> --stat</span><br><span class="line"> Documentation/RelNotes<span class="number">-1.6</span><span class="number">.1</span><span class="number">.2</span>.txt |   <span class="number">39</span> +++++++++++++</span><br><span class="line"> Documentation/config.txt           |    <span class="number">4</span> +-</span><br><span class="line"> Documentation/git-ls-tree.txt      |    <span class="number">8</span> +++-</span><br><span class="line"> GIT-VERSION-GEN                    |    <span class="number">2</span> +-</span><br><span class="line"> RelNotes                           |    <span class="number">2</span> +-</span><br><span class="line"> builtin-commit.c                   |    <span class="number">6</span> ++</span><br><span class="line"> builtin-gc.c                       |    <span class="number">8</span> ++-</span><br><span class="line"> builtin-grep.c                     |   <span class="number">15</span> +++++-</span><br><span class="line"> builtin-log.c                      |   <span class="number">28</span> +++++++++-</span><br><span class="line"> builtin-ls-tree.c                  |    <span class="number">7</span> ++-</span><br><span class="line"> builtin-send-pack.c                |   <span class="number">43</span> +++++++--------</span><br><span class="line"> diffcore-rename.c                  |    <span class="number">9</span> +++-</span><br><span class="line"> git-sh-setup.sh                    |    <span class="number">2</span> +-</span><br><span class="line"> sha1_file.c                        |    <span class="number">3</span> +-</span><br><span class="line"> sha1_name.c                        |    <span class="number">2</span> +-</span><br><span class="line"> t/t2300-cd-to-toplevel.sh          |    <span class="number">4</span> +-</span><br><span class="line"> t/t4014-format-patch.sh            |   <span class="number">52</span> +++++++++++++++++-</span><br><span class="line"> t/t5519-push-alternates.sh         |  <span class="number">106</span> ++++++++++++++++++++++++++++++++++++</span><br><span class="line"> t/t7002-grep.sh                    |    <span class="number">7</span> +++</span><br><span class="line"> test-path-utils.c                  |    <span class="number">2</span> +-</span><br><span class="line"> <span class="number">20</span> files changed, <span class="number">306</span> insertions(+), <span class="number">43</span> deletions(-)</span><br></pre></td></tr></table></figure>
<p>还可以深入查看某个具体文件的变更比对：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git diff v1<span class="number">.6</span><span class="number">.1</span><span class="number">.1</span> v1<span class="number">.6</span><span class="number">.1</span><span class="number">.2</span> -- sha1_file.c</span><br><span class="line">diff --git a/sha1_file.c b/sha1_file.c</span><br><span class="line">index <span class="number">52</span>d1ead..ce5ea12 <span class="number">100644</span></span><br><span class="line">--- a/sha1_file.c</span><br><span class="line">+++ b/sha1_file.c</span><br><span class="line">@@ <span class="number">-2337</span>,<span class="number">7</span> +<span class="number">2337</span>,<span class="number">8</span> @@ <span class="keyword">static</span> int create_tmpfile(char *buffer, size_t bufsiz, <span class="keyword">const</span> c</span><br><span class="line"> <span class="keyword">static</span> int write_loose_object(<span class="keyword">const</span> unsigned char *sha1, char *hdr, int hdrlen,</span><br><span class="line">                              <span class="keyword">void</span> *buf, unsigned long len, time_t mtime)</span><br><span class="line"> &#123;</span><br><span class="line">-       int fd, size, ret;</span><br><span class="line">+       int fd, ret;</span><br><span class="line">+       size_t size;</span><br><span class="line">        unsigned char *compressed;</span><br><span class="line">        z_stream stream;</span><br><span class="line">        char *filename;</span><br></pre></td></tr></table></figure>
<p>执行之后会显示sha1_file.c文件在v1.6.1.1和v1.6.1.2两个版本之间的比对结果。</p>
<h2 id="在合并某分支前查看变更内容"><a href="#在合并某分支前查看变更内容" class="headerlink" title="在合并某分支前查看变更内容"></a>在合并某分支前查看变更内容</h2><p>这是个比较奇怪的问题，因为如果你开始是工作在一个主分支上，而后生成了两个分支，如果直接对比快照的话，结果只会显示从一个状态到另一个状态的差异比对结果。<br>举例来说，如果你创建了一个<code>dev</code>的分支，进入这个分支给<code>lib/simplegit.rb</code>添加了一个函数，然后回到了<code>master</code>分支，删除了README文件的一行，然后运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff master dev</span><br></pre></td></tr></table></figure>
<p>结果会显示你给某个文件中添加了方法，还往README文件添加了一行内容。为什么会这样？因为对<code>dev</code>分支来说，README文件还是原样，而在’master’上，你已经删掉了一行，这样直接对两个快照进行对比就好似’dev’分支添加了一行进去一样。你想查看的实际上是在创建dev分支之后在这条分支上的差异对比，所以应该执行这样的命令：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff master...dev</span><br></pre></td></tr></table></figure>
<p>这就不会拿master分支上最后一个快照和dev分支上最后一个快照进行比对–而是用dev与master所交的那个分歧点和现在的dev分支上最后一个快照进行比对。在我们这个例子中，这样比对的结果是显示对那个文件添加了一个函数。如果你目前正处在master分支上，你可以运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff ...dev</span><br></pre></td></tr></table></figure>
<p>跟上面的结果是一样的。所以，如果你想查看将要合并的某个分支会有什么样的变化，可以执行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff ...(branch)</span><br></pre></td></tr></table></figure>
<p>将branch替换为你想要合并的分支名即可。</p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js 2.0 源码学习]]></title>
      <url>https://lucius0.github.io/2017/01/20/archivers/code-review-for-vue/</url>
      <content type="html"><![CDATA[<h2 id="Vue2-0-介绍"><a href="#Vue2-0-介绍" class="headerlink" title="Vue2.0 介绍"></a>Vue2.0 介绍</h2><p>1.0版本正式发布后，就在业务中开始使用，将原先jQuery的功能逐步的进行迁移。16年10月1日，Vue2.0版本正式发布了，其中核心代码都进行了重写，于是就专门花时间，对Vue2.0的源码进行了学习。本篇文章就是2.0源码学习的总结。</p>
<p>先对Vue2.0的新特性做一个简单的介绍：</p>
<ul>
<li><p><strong>大小 &amp; 性能</strong>：Vue2.0的线上包gzip后只有12kb，而1.0需要22kb，react需要44kb。而且Vue2.0的性能在react等几个框架中，性能是最快的。</p>
</li>
<li><p><strong>VDOM</strong>：实现了virtual dom，并且将静态子树进行了提取，减少界面重绘时的对比。与1.0对比性能有明显提升。</p>
</li>
<li><p><strong>Server Render</strong>：2.0还对Server Render做了支持。</p>
</li>
</ul>
<p>Vue的最新源码可以去<a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a>获得。本文讲的是2.0.3版本，2.0.3可以去<a href="https://github.com/vuejs/vue/tree/v2.0.3" target="_blank" rel="noopener">https://github.com/vuejs/vue/tree/v2.0.3</a>这里获得。</p>
<p>下面开始进入正题，首先从生命周期开始。</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/images/vue/vue-07.png" alt=""></p>
<p>上图就是官方给出的Vue 2.0的生命周期图，其中包含了Vue对象生命周期过程中的几个核心步骤。了解这几个过程，可以很好帮助我们理解Vue的创建与销毁过程。从图中我们可以看出，生命周期分为4个周期：</p>
<ul>
<li><p><strong>create</strong>：<code>new Vue</code>时，会先进行create，创建出Vue对象。</p>
</li>
<li><p><strong>mount</strong>：根据<code>el，template，render</code>方法等属性，会生成DOM，并添加到对应位置。</p>
</li>
<li><p><strong>update</strong>：当数据发生变化后，会重新渲染DOM，并进行替换。</p>
</li>
<li><p><strong>destroy</strong>：销毁时触发。</p>
</li>
</ul>
<p>那么这4个过程在源码中是怎么实现的？我们从<code>new Vue</code>中开始。</p>
<h2 id="new-Vue"><a href="#new-Vue" class="headerlink" title="new Vue"></a>new Vue</h2><p>为了更好的理解new的过程，我整理了一个序列图：</p>
<p><img src="/images/vue/vue-08.jpg" alt=""></p>
<p>new Vue的过程主要涉及到三个对象：<code>vm、compiler、watcher</code>。其中，<code>vm</code>表示<code>Vue</code>的具体对象；<code>compiler</code>负责将<code>template</code>解析为<code>AST render</code>方法；<code>watcher</code>用于观察数据变化，以实现数据变化后进行<code>re-render</code>。</p>
<p>下面来分析下具体过程和代码：</p>
<p>首先，运行<code>new Vue()</code>的时候，会进入代码<code>src/core/instance/index.js</code>的Vue构造函数中，并执行<code>this._init()</code>方法。在<code>_init</code>中，会对各个功能进行初始化，并执行<code>beforeCreate</code>和<code>created</code>两个生命周期方法。核心代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">initLifecycle(vm)</span><br><span class="line">initEvents(vm)</span><br><span class="line">callHook(vm, <span class="string">'beforeCreate'</span>)</span><br><span class="line">initState(vm)</span><br><span class="line">callHook(vm, <span class="string">'created'</span>)</span><br><span class="line">initRender(vm)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个过程有一点需要注意：<code>beforeCreate</code>和<code>create</code>之间只有<code>initState</code>，和官方给出的生命周期并不完全一样。这里的<code>initState</code>是用于初始化<code>data，props</code>等的监听的。</p>
</blockquote>
<p>在<code>init</code>的最后，会运行<code>initRender</code>方法。在该方法中，会运行<code>vm.$mount</code>方法，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">  vm.$mount(vm.$options.el)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的<code>vm.$mount</code>可以在业务代码中调用，这样，<code>new</code> 过程和 <code>mount</code> 过程就可以根据业务情况进行分离。</p>
</blockquote>
<p>这里的<code>$mount</code>在<code>src/entries/web-runtime-with-compiler.js</code>中，主要逻辑是根据<code>el，template，render</code>三个属性来获得<code>AST render</code>方法。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!options.render) &#123;   <span class="comment">// 如果有render方法，直接运行mount</span></span><br><span class="line">  <span class="keyword">let</span> template = options.template</span><br><span class="line">  <span class="keyword">if</span> (template) &#123;  <span class="comment">// 如果有template， 获取template参数对于的HTML作为模板</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</span><br><span class="line">        template = idToTemplate(template)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</span><br><span class="line">      template = template.innerHTML</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        warn(<span class="string">'invalid template option:'</span> + template, <span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;  <span class="comment">// 如果没有template, 且存在el，则获取el的outerHTML作为模板</span></span><br><span class="line">    template = getOuterHTML(el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (template) &#123; <span class="comment">// 如果获取到了模板，则将模板转化为render方法</span></span><br><span class="line">    <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class="line">      warn,</span><br><span class="line">      shouldDecodeNewlines,</span><br><span class="line">      delimiters: options.delimiters</span><br><span class="line">    &#125;, <span class="keyword">this</span>)</span><br><span class="line">    options.render = render</span><br><span class="line">    options.staticRenderFns = staticRenderFns</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个过程有三点需要注意：<br>1、compile时，将最大的静态子树提取出来作为单独的AST渲染方法，以提升后面vNode对比时的性能。所以，当存在多个连续的静态标签时，可以在外边添加一个静态父节点，这样，staticRenderFns数目可以减少，从而提升性能。<br>2、Vue2.0 中的模板有三种引用方法：el，template，render(JSX)。其中优先级是render &gt; template &gt; el。<br>3、el，template两种写法，最后都会通过compiler转化为render(JSX)来运行，也就是说，直接写成render(JSX)的性能是最佳的。当然，如果使用了构建工具，最终生成的包就是使用的render(JSX)。这样子，在源码上就可以不用过多考虑这一块的性能了，直接用可维护性最好的方式就行。</p>
</blockquote>
<p>将模板转化为render，用到了<code>compileToFunction</code>方法，该方法最后会通过<code>src/compiler/index.js</code>文件中的<code>compile</code>方法，将模板转化为AST语法结构的render方法，并对静态子树进行分离。</p>
<p>完成<code>render</code>方法的生成后，会进入<code>_mount(src/core/instance/lifecycle.js)</code>中进行DOM更新。该方法的核心逻辑如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm._watcher = <span class="keyword">new</span> Watcher(vm, () =&gt; &#123;</span><br><span class="line">  vm._update(vm._render(), hydrating)</span><br><span class="line">&#125;, noop)</span><br></pre></td></tr></table></figure>
<p>首先会new一个watcher对象，在watcher对象创建后，会运行传入的方法<code>vm._update(vm._render(), hydrating)</code> (watcher的逻辑在下面的watcher小节中细讲)。其中的<code>vm._render()</code>主要作用就是运行前面的compile生成的render方法，并返回一个vNode对象。这里的vNode就是一个虚拟的DOM节点。</p>
<p>拿到vNode后，传入 <code>vm._update()</code> 方法，进行DOM更新。</p>
<h2 id="VDOM"><a href="#VDOM" class="headerlink" title="VDOM"></a>VDOM</h2><p>上面已经讲完了<code>new Vue</code>过程中的主要步骤，其中涉及到template如何转化为DOM的过程，这里单独拿出来讲下。先上序列图：</p>
<p><img src="/images/vue/vue-09.jpg" alt=""></p>
<p>从图中可以看出，从template到DOM，有三个过程：</p>
<ul>
<li><p><strong>template -&gt; AST render</strong> (compiler解析template)</p>
</li>
<li><p><strong>AST render -&gt; vNode</strong> (render方法运行)</p>
</li>
<li><p><strong>vNode -&gt; DOM</strong> (vdom.patch)</p>
</li>
</ul>
<p>首先template在compiler中解析为AST render方法的过程。上一节中有说到，<code>initState</code>后，会调用<code>src/entries/web-runtime-with-compiler.js</code>中的<code>Vue.prototype.$mount</code>方法。在<code>$mount</code>中，会获取template，然后调用<code>src/platforms/web/compiler/index.js</code>的<code>compilerToFunction</code>方法。在该方法中，会运行compile将template解析为多个render方法，也就是AST render。这里的compile在文件<code>src/compiler/index.js</code>中，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ast = parse(template.trim(), options)   <span class="comment">// 解析template为AST</span></span><br><span class="line">optimize(ast, options)  <span class="comment">// 提取static tree</span></span><br><span class="line"><span class="keyword">const</span> code = generate(ast, options)  <span class="comment">// 生成render 方法</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  ast,</span><br><span class="line">  render: code.render,</span><br><span class="line">  staticRenderFns: code.staticRenderFns</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，compile方法就是将template以AST的方式进行解析，并转化为render方法进行返回。</p>
<p>再看第二个过程，AST render -&gt; vNode。这个过程很简单，就是将AST render方法进行运行，获得返回的vNode对象。</p>
<p>最后一步，vNode -&gt; DOM。该过程中，存在vNode的对比以及DOM的添加修改操作。在上一节中，有讲到<code>vm._update()</code>方法中对DOM进行更新。<code>_update</code>的主要代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/instance/lifecycle.js</span></span><br><span class="line"><span class="keyword">if</span> (!prevVnode) &#123;</span><br><span class="line">  <span class="comment">// Vue.prototype.__patch__ is injected in entry points</span></span><br><span class="line">  <span class="comment">// based on the rendering backend used.</span></span><br><span class="line">  vm.$el = vm.__patch__(vm.$el, vnode, hydrating)  <span class="comment">// 首次添加</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  vm.$el = vm.__patch__(prevVnode, vnode)  <span class="comment">// 数据变化后触发的DOM更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，无论是首次添加还是后期的update，都是通过<code>__patch__</code>来更新的。这里的<code>__patch__</code>核心步骤是在<code>src/core/vdom/patch.js</code>中的patch方法进行实现，源码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!oldVnode) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">if</span> (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)  <span class="comment">// diff并更新DOM。</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elm = oldVnode.elm</span><br><span class="line">        parent = nodeOps.parentNode(elm)</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">          nodeOps.insertBefore(parent, vnode.elm, nodeOps.nextSibling(elm))  <span class="comment">// 添加element到DOM。</span></span><br><span class="line">          removeVnodes(parent, [oldVnode], <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>首先添加很简单，就是通过<code>insertBefore</code>将转换好的element添加到DOM中。如果update，则会调动<code>patchVNode()</code>。最后来看下<code>patchVNode</code>的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span> (<span class="params">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> elm = vnode.elm = oldVnode.elm</span><br><span class="line">  <span class="keyword">const</span> oldCh = oldVnode.children</span><br><span class="line">  <span class="keyword">const</span> ch = vnode.children</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;  <span class="comment">// 当都存在时，更新Children</span></span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;  <span class="comment">// 只存在新节点时，即添加节点</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">      addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;  <span class="comment">// 只存在老节点时，即删除节点</span></span><br><span class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;  <span class="comment">// 删除了textContent</span></span><br><span class="line">      nodeOps.setTextContent(elm, <span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123; <span class="comment">// 修改了textContent</span></span><br><span class="line">    nodeOps.setTextContent(elm, vnode.text)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中有调用了<code>updateChildren</code>来更新子节点，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span> (<span class="params">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isUndef(oldStartVnode)) &#123;</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx] <span class="comment">// Vnode has been moved left</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUndef(oldEndVnode)) &#123;</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></span><br><span class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)</span><br><span class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]</span><br><span class="line">      newEndVnode = newCh[--newEndIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></span><br><span class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)</span><br><span class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx]</span><br><span class="line">      newStartVnode = newCh[++newStartIdx]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到<code>updateChildren</code>中，又通过<code>patchVnode</code>来更新当前节点。梳理一下，<code>patch</code>通过<code>patchVnode</code>来更新根节点，然后通过<code>updateChildren</code>来更新子节点，具体子节点，又通过<code>patchVnode</code>来更新，通过一个类似于递归的方式逐个节点的完成对比和更新。</p>
<blockquote>
<p>Vue 2.0中如何去实现VDOM的思路是否清晰，通过4层结构，很好的实现了可维护性，也为实现server render，weex等功能提供了可能。拿server render举例，只需要将最后<code>vNode -&gt; DOM</code> 改成 <code>vNode -&gt; String</code> 或 <code>vNode -&gt; Stream</code>，就可以实现server render。剩下的compiler和Vue核心逻辑都不需要改。</p>
</blockquote>
<h2 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h2><p>我们都知道MVVM框架的特征就是当数据发生变化后，会自动更新对应的DOM节点。使用MVVM之后，业务代码中就可以完成不写DOM操作代码，不仅可以将业务代码聚焦在业务逻辑上，还可以提供业务的可维护性和可测试性。那么Vue2.0中是怎么实现对数据变化的监听呢？照例，先看序列图：</p>
<p><img src="/images/vue/vue-10.jpg" alt=""></p>
<p>可以看出，整个Watcher的过程可以分为三个过程。</p>
<ul>
<li><p>对state设置setter/getter</p>
</li>
<li><p>对vm设置好watcher，添加好state触发setter时的排序方法</p>
</li>
<li><p>state变化触发执行</p>
</li>
</ul>
<p>在前面有说过，在生命周期函数<code>beforeCreate</code>和<code>created</code>直接，会运行方法<code>initState()</code>。在<code>initState</code>中，会对props，data，computed等属性添加<code>setter/getter</code>。拿data举例，设置<code>setter/getter</code>的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// proxy data on instance</span></span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">  <span class="keyword">let</span> i = keys.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    ...</span><br><span class="line">    proxy(vm, keys[i])   <span class="comment">// 设置vm._data为代理</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// observe data</span></span><br><span class="line">  observe(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过调用<code>observe</code>方法，会对data添加好观察者，核心代码为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">  enumerable: <span class="literal">true</span>,</span><br><span class="line">  configurable: <span class="literal">true</span>,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value = getter ? getter.call(obj) : val</span><br><span class="line">    <span class="keyword">if</span> (Dep.target) &#123;</span><br><span class="line">      dep.depend()  <span class="comment">// 处理好依赖watcher</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;,</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    childOb = observe(newVal)  <span class="comment">// 对新数据重新observe</span></span><br><span class="line">    dep.notify()  <span class="comment">// 通知到dep进行数据更新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这个时候，对data的监听已经完成。可以看到，当data发生变化时，会运行dep.notify()。在notify方法中，会去运行watcher的update方法，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">update () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.lazy) &#123;</span><br><span class="line">    <span class="keyword">this</span>.dirty = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</span><br><span class="line">    <span class="keyword">this</span>.run()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    queueWatcher(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">run () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.get()</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>update</code> 方法中，<code>queueWatcher</code> 方法的目的是通过 <code>nextTicker</code> 来执行 <code>run</code> 方法，属于支线逻辑，就不分析了，这里直接看 <code>run</code> 的实现。<code>run</code> 方法其实很简单，就是简单的调用 <code>get</code> 方法，而 <code>get</code> 方法会通过执行 <code>this.getter()</code> 来更新DOM。</p>
<p>那么<code>this.getter</code>是什么呢？本文最开始分析<code>new Vue</code>过程时，有讲到运行<code>_mount</code>方法时，会运行如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm._watcher = <span class="keyword">new</span> Watcher(vm, () =&gt; &#123;</span><br><span class="line">  vm._update(vm._render(), hydrating)</span><br><span class="line">&#125;, noop)</span><br></pre></td></tr></table></figure>
<p>那么<code>this.getter</code>就是这里Watcher方法的第二参数。来看下<code>new Watcher</code>的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (</span><br><span class="line">    vm: Component,</span><br><span class="line">    expOrFn: string | Function,</span><br><span class="line">    cb: Function,</span><br><span class="line">    options?: Object = &#123;&#125;</span><br><span class="line">  ) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = expOrFn</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.getter = parsePath(expOrFn)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.lazy</span><br><span class="line">      ? <span class="literal">undefined</span></span><br><span class="line">      : <span class="keyword">this</span>.get()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，在new Vue过程中，Watcher会在构造完成后主动调用this.get()来触发this.getter()方法的运行，以达到更新DOM节点。</p>
<p>总结一下这个过程：首先_init时，会对Data设置好setter方法，setter方法中会调用dep.notify()，以便数据变化时通知DOM进行更新。然后new Watcher时，会更新DOM的方法进行设置，也就是Watcher.getter方法。最后，当Data发生变化时候，dep.notify()运行，运行到watcher.getter()时，就会去运行render和update逻辑，最终达到DOM更新的目的。</p>
<h2 id="总结和收获"><a href="#总结和收获" class="headerlink" title="总结和收获"></a>总结和收获</h2><p>刚开始觉得看源码，是因为希望能了解下Vue 2.0的实现，看看能不能得到一些从文档中无法知道的细节，用于提升运行效率。把主要流程理清楚后，的确了解到一些，这里做个整理：</p>
<ul>
<li><p>el属性传入的如果不是element，最后会通过<code>document.querySelector</code>来获取的，这个接口性能较差，所以，el传入一个element性能会更好。</p>
</li>
<li><p><code>$mount</code>方法中对html，body标签做了过滤，这两个不能用来作为渲染的根节点。</p>
</li>
<li><p>每一个组件都会从<code>_init</code>开始重新运行，所以，当存在一个长列表时，将子节点作为一个组件，性能会较差。</p>
</li>
<li><p><code>*.vue</code>文件会在构建时转化为render方法，而render方法的性能比指定template更好。所以，源码使用<code>*.vue</code>的方式，性能会更好。</p>
</li>
<li><p>如果需要自定义<code>delimiters</code>，每一个组件都需要单独指定。</p>
</li>
<li><p>如果是<code>*.vue</code>文件，制定<code>delimiters</code>是失效的，因为<code>vue-loader</code>对<code>*.vue</code>文件进行解析时，并没有将<code>delimiters</code>传递到<code>compiler.compile()</code>中。</p>
</li>
</ul>
<p>转自：<a href="https://segmentfault.com/a/1190000007484936" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007484936</a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p>下面是取自<a href="http://jiongks.name/blog/a-big-map-to-intro-vue-next/" target="_blank" rel="noopener">通过一张图走进 Vue 2.0</a>的Vue2.0的结构图</p>
<p><img src="/images/vue/vue-11.jpg" alt=""></p>
<hr>
<p><strong>参考资料</strong></p>
<p><a href="http://www.cnblogs.com/dh-dh/p/5606596.html" target="_blank" rel="noopener">详解vue的数据binding原理</a></p>
<p><a href="https://github.com/banama/aboutVue/blob/master/vue-event.md" target="_blank" rel="noopener">Vue的事件解读</a></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js 组件]]></title>
      <url>https://lucius0.github.io/2017/01/10/archivers/vue-component/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p>
<p><img src="/images/vue/vue-02.png" alt=""></p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p><code>Vue.component(tagName, options)</code></p>
<p>如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建组件构造器</span></span><br><span class="line"><span class="keyword">var</span> myComponent = Vue.extend(&#123;</span><br><span class="line">	template: <span class="string">'#template'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册组件</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, myComponent)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Vue实例作用范围内使用组件</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>通过使用组件实例选项注册，可以使组件<strong>仅在另一个实例/组件的作用域</strong>中可用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component&gt; 将只在父模板可用</span></span><br><span class="line">    <span class="string">'my-component'</span>: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>组件的<code>data</code>必须是<strong>函数</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span> : <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wrong </span></span><br><span class="line"><span class="keyword">var</span> c1 = Vue.extend(&#123;</span><br><span class="line">	data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// right</span></span><br><span class="line"><span class="keyword">var</span> c2 = Vue.extend(&#123;</span><br><span class="line">	data () &#123;</span><br><span class="line">		<span class="keyword">return</span> &#123; <span class="attr">a</span> : <span class="number">1</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="协同工作"><a href="#协同工作" class="headerlink" title="协同工作"></a>协同工作</h2><p>在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。</p>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>组件实例的作用域是<strong>孤立</strong>的，<code>props</code>是单向的，只能由父组件传递给子组件，反之则会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child'</span>, &#123;</span><br><span class="line">  <span class="comment">// 声明 props</span></span><br><span class="line">  props: [<span class="string">'message'</span>],</span><br><span class="line">  <span class="comment">// 就像 data 一样，prop 可以用在模板内</span></span><br><span class="line">  <span class="comment">// 同样也可以在 vm 实例中像 “this.message” 这样使用</span></span><br><span class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;child message=<span class="string">"hello!"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>1、html不区分大小写，<code>prop</code>会从 camelCase转为 kebab-case</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child'</span>, &#123;</span><br><span class="line">  <span class="comment">// camelCase in JavaScript</span></span><br><span class="line">  props: [<span class="string">'myMessage'</span>],</span><br><span class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- kebab-<span class="keyword">case</span> <span class="keyword">in</span> HTML --&gt;</span><br><span class="line">&lt;child my-message=<span class="string">"hello!"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>2、动态prop</p>
<p>可以用<code>v-bind</code>动态绑定props的值到父组件的数据中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;input v-model=<span class="string">"parentMsg"</span>&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;child v-bind:my-message=<span class="string">"parentMsg"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>3、字面量vs动态语法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递了一个字符串<span class="string">"1"</span> --&gt;</span><br><span class="line">&lt;comp some-prop=<span class="string">"1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span></span><br><span class="line">&lt;!-- 传递实际的数字 --&gt;</span><br><span class="line">&lt;comp v-bind:some-prop=<span class="string">"1"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>4、改变组件prop值</p>
<p>定义一个局部 data 属性，并将 prop 的初始值作为局部数据的初始值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="keyword">this</span>.initialCounter &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>prop 作为需要被转变的原始值传入，定义一个 computed 属性，此属性从 prop 的值计算得出</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、prop 检测</p>
<p>prop 可以添加检测机制，目前 type 有<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Function</code>、<code>Object</code>、<code>Array</code>，也可以自定义类型，使用<code>instanceof</code>检测。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础类型检测 （`null` 意思是任何类型都可以）</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必传且是字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数字，有默认值</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组／对象的默认值应当由一个工厂函数返回</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p><code>$on(eventName)</code>监听事件</p>
<p><code>$emit(eventName)</code>触发事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"counter-event-example"</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; total &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;!-- 监听事件：increment，监听函数：incrementTotal --&gt;</span></span><br><span class="line"><span class="regexp">  &lt;button-counter v-on:increment="incrementTotal"&gt;&lt;/</span>button-counter&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Vue.component('button-counter', &#123;</span></span><br><span class="line"><span class="regexp">  template: '&lt;button v-on:click="increment"&gt;&#123;&#123; counter &#125;&#125;&lt;/</span>button&gt;<span class="string">',</span></span><br><span class="line"><span class="string">  data: function () &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      counter: 0</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    increment: function () &#123;</span></span><br><span class="line"><span class="string">      this.counter += 1</span></span><br><span class="line"><span class="string">      this.$emit('</span>increment<span class="string">') // 抛出事件</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">new Vue(&#123;</span></span><br><span class="line">  el: '#counter-event-example',</span><br><span class="line">  data: &#123;</span><br><span class="line">    total: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.total += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>若想绑定<strong>原生事件</strong>，可以用<code>.native</code>修饰<code>v-on</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-on:click.native=<span class="string">"doTheThing"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="slot-内容分发"><a href="#slot-内容分发" class="headerlink" title="slot(内容分发)"></a>slot(内容分发)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;app&gt;</span><br><span class="line">  &lt;app-header&gt;<span class="xml"><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></span><br><span class="line">  &lt;app-footer&gt;&lt;/app-footer&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>1、<code>&lt;app&gt;</code> 组件不知道它的挂载点会有什么内容。挂载点的内容是由<code>&lt;app&gt;</code>的父组件决定的。</p>
<p>2、<code>&lt;app&gt;</code> 组件很可能有它自己的模版。</p>
<p><strong>编译作用域</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;child-component&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125; <span class="comment">// message 的数据是绑定在父组件而非子组件</span></span><br><span class="line">&lt;<span class="regexp">/child-component&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 无效 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;child-component v-show="someChildProperty"&gt;&lt;/</span>child-component&gt;</span><br></pre></td></tr></table></figure>
<p>上面例子出现无效的原因是：假定 <code>someChildProperty</code> 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。</p>
<p>如果要绑定子组件内的指令到一个组件的根节点，应当在它的模板内这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child-component'</span>, &#123;</span><br><span class="line">  <span class="comment">// 有效，因为是在正确的作用域内</span></span><br><span class="line">  template: <span class="string">'&lt;div v-show="someChildProperty"&gt;Child&lt;/div&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      someChildProperty: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>slot简单来说就在包装在子组件里的其他元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>渲染结果为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>动态组件</strong></p>
<p>使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code> 特性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentView: <span class="string">'home'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    home: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    posts: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    archive: &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;component v-bind:is=<span class="string">"currentView"</span>&gt;</span><br><span class="line">  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span><br><span class="line">&lt;<span class="regexp">/component&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>keep-alive</strong></p>
<p>切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component :is=<span class="string">"currentView"</span>&gt;</span><br><span class="line">    &lt;!-- 非活动组件将被缓存！ --&gt;</span><br><span class="line">  &lt;<span class="regexp">/component&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>keep-alive&gt;</span><br></pre></td></tr></table></figure>
<p>学习参考文章(v1.0)：</p>
<ul>
<li><p><a href="http://www.cnblogs.com/keepfool/p/5625583.html" target="_blank" rel="noopener">http://www.cnblogs.com/keepfool/p/5625583.html</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/keepfool/p/5637834.html" target="_blank" rel="noopener">http://www.cnblogs.com/keepfool/p/5637834.html</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js 初体验]]></title>
      <url>https://lucius0.github.io/2017/01/08/archivers/vue-beginning/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Vue.js 主要是利用到ECMAScript 5的特性，因此IE 8以下的浏览器都不支持，可以通过<a href="http://caniuse.com/#feat=es5" target="_blank" rel="noopener">caniuse</a>来查看浏览器的支持情况。</p>
<p><a href="http://doc.vue-js.com/v2/guide/index.html" target="_blank" rel="noopener">官方</a>的介绍是：</p>
<p>Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用<a href="http://doc.vue-js.com/v2/guide/single-file-components.html" target="_blank" rel="noopener">单文件组件</a>和<a href="http://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noopener">Vue生态系统支持的库</a>开发的复杂单页应用。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>如果你是有经验的前端开发者，想知道 Vue.js 与其它库/框架的区别，查看<a href="http://doc.vue-js.com/v2/guide/comparison.html" target="_blank" rel="noopener">对比其它框架</a>。</p>
<p><img src="/images/vue/vue-01.jpeg" alt=""></p>
<p>其中<code>view</code>对应如下类似dom代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>model</code>则为POJO，</p>
<p><code>var data = {msg: &#39;hello&#39;}</code></p>
<p>所以vue.js充当的就是vm，数据层以及视觉层的桥梁</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="string">'#app'</span>,</span><br><span class="line">	data: &#123;</span><br><span class="line">		msg: data.msg</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>组件系统</strong></p>
<p><img src="/images/vue/vue-02.png" alt=""></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="直接引入"><a href="#直接引入" class="headerlink" title="直接引入"></a>直接引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dir</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">	el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="通过vue-cli"><a href="#通过vue-cli" class="headerlink" title="通过vue-cli"></a>通过vue-cli</h3><p>全局安装vue-cli就可以了</p>
<p><code>npm install --global vue-cli</code></p>
<p>详细的可以<a href="http://doc.vue-js.com/v2/guide/installation.html" target="_blank" rel="noopener">查看</a></p>
<h2 id="基本属性及其方法"><a href="#基本属性及其方法" class="headerlink" title="基本属性及其方法"></a>基本属性及其方法</h2><p>可以查看<a href="http://doc.vue-js.com/v2/api/" target="_blank" rel="noopener">官网的API</a>，v1.0 跟 v2.0 有区别。建议好好研究一下，在这里就不再赘述了。</p>
<p>那么父节点，或者说是根结点的结构是怎么样的呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">	el: <span class="string">'#app'</span>,</span><br><span class="line">	components: &#123;</span><br><span class="line">		<span class="string">'header-component'</span>: headerComponent,</span><br><span class="line">		<span class="string">'body-component'</span>: bodyComponent,</span><br><span class="line">		<span class="string">'footer-component'</span>: footerComponent</span><br><span class="line">	&#125;,</span><br><span class="line">	data: &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;,</span><br><span class="line">	methods: &#123;</span><br><span class="line">		...</span><br><span class="line">	&#125;,</span><br><span class="line">	beforeCreate () &#123;&#125;,</span><br><span class="line">	created () &#123;&#125;,</span><br><span class="line">	beforeMount () &#123;&#125;,</span><br><span class="line">	...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>组件的组织结构</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> component = Vue.extend(&#123;</span><br><span class="line">	template: <span class="string">'#component'</span>,</span><br><span class="line">	components: &#123;</span><br><span class="line">		<span class="string">'child-header-component'</span>: childHeaderComponent</span><br><span class="line">	&#125;,</span><br><span class="line">	props: &#123;&#125;,</span><br><span class="line">	events: &#123;&#125;,</span><br><span class="line">	methods: &#123;&#125;,</span><br><span class="line">	...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="/images/vue/vue-03.png" alt=""></p>
<p>vue是通过数据劫持的方式来做数据绑定的，其核心方法就是通过<code>Object.defineProperty()</code>来实现对属性的劫持。前面有提到这就是为什么不能支持IE 8以下的版本。要实现mvvm，需要实现以下的条件：</p>
<ol>
<li><p>实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动根据新老值的对比进行更新；</p>
</li>
<li><p>实现一个指令解析器Compile，对元素节点的指令进行遍历并且解析，根据指令来替换数据，并且更新函数；</p>
</li>
<li><p>实现一个watcher，作为Observer以及Compile的桥梁，能够订阅并且接收属性变动的通知，执行指令绑定相对应的回调函数，从而刷新视图；</p>
</li>
<li><p>实现mvvm入口，组织上面的三个模块。</p>
</li>
</ol>
<p><img src="/images/vue/vue-04.jpeg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line">vm.a === data.a <span class="comment">// -&gt; true</span></span><br><span class="line"><span class="comment">// 设置属性也会影响到原始数据</span></span><br><span class="line">vm.a = <span class="number">2</span></span><br><span class="line">data.a <span class="comment">// -&gt; 2</span></span><br><span class="line"><span class="comment">// ... 反之亦然</span></span><br><span class="line">data.a = <span class="number">3</span></span><br><span class="line">vm.a <span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>以下是 v2.0 的生命周期图</p>
<p><img src="/images/vue/vue-05.png" alt=""></p>
<p>而这是 v1.0 的生命周期图</p>
<p><img src="/images/vue/vue-06.png" alt=""></p>
<p>所以说v1.0跟v2.0还是有很大的差别的。</p>
<table>
<thead>
<tr>
<th>v1.0</th>
<th>v2.0</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>init</td>
<td>beforeCreate</td>
<td>组件实例刚被创建，组件属性计算之前，如 data 属性等</td>
</tr>
<tr>
<td>created</td>
<td>created</td>
<td>组件实例创建完成，属性已绑定，但 DOM 还未生成，<code>$el</code> 属性还不存在</td>
</tr>
<tr>
<td>beforeCompile</td>
<td>beforeMount</td>
<td>模板编译/挂载之前</td>
</tr>
<tr>
<td>compiled</td>
<td>mounted</td>
<td>板编译/挂载之后</td>
</tr>
<tr>
<td>ready</td>
<td>mounted</td>
<td>模板编译/挂载之后（不保证组件已在 document 中）</td>
</tr>
<tr>
<td>-</td>
<td>beforeUpdate</td>
<td>组件更新之前</td>
</tr>
<tr>
<td>-</td>
<td>updated</td>
<td>组件更新之后</td>
</tr>
<tr>
<td>-</td>
<td>activated</td>
<td>for <code>keep-alive</code>，组件被激活时调用</td>
</tr>
<tr>
<td>-</td>
<td>deactivated</td>
<td>for <code>keep-alive</code>，组件被移除时调用</td>
</tr>
<tr>
<td>attached</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>detached</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>beforeDestory</td>
<td>beforeDestory</td>
<td>组件销毁前调用</td>
</tr>
<tr>
<td>destoryed</td>
<td>destoryed</td>
<td>组件销毁后调用</td>
</tr>
</tbody>
</table>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">普通文本：<span class="string">`&#123;&#123; &#125;&#125;`</span></span><br><span class="line"></span><br><span class="line">纯html：<span class="string">`&lt;div v-html="rawHtml"&gt;&lt;/div&gt;`</span></span><br><span class="line"></span><br><span class="line">*Mustache*不能用于html属性，应使用<span class="string">`v-bind`</span>指令</span><br><span class="line"></span><br><span class="line"><span class="string">`&lt;div v-bind:id="dynamicId"&gt;&lt;/div&gt;`</span></span><br><span class="line"></span><br><span class="line">javascript表达式</span><br><span class="line"></span><br><span class="line"><span class="string">`&#123;&#123; number + 1 &#125;&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`&#123;&#123; message.split('').reverse().join('') &#125;&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="string">`&lt;div v-bind:id="'list-' + id"&gt;&lt;/div&gt;`</span></span><br><span class="line"></span><br><span class="line">**注意：** Vue每个绑定只能包含**单个表达式**，如以下的则不会生效。</span><br><span class="line"></span><br><span class="line">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;&#125;</span><br><span class="line">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="keyword">return</span> message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul>
<li><p>v-text：更新元素的 <code>textContent</code>。如果要更新部分的 <code>textContent</code> ，需要使用  {{ Mustache }}  插值。</p>
</li>
<li><p>v-html：更新元素的 <code>innerHTML</code> 。注意：<strong>内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译。</strong></p>
</li>
<li><p>v-show：根据表达式之真假值，切换元素的 <code>display</code> CSS 属性。当条件变化时该指令触发过渡效果。</p>
</li>
<li><p>v-if：根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 <code>&lt;template&gt;</code> ，将提出它的内容作为条件块。当条件变化时该指令触发过渡效果。</p>
</li>
<li><p>v-else、v-else-if：前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code>。</p>
</li>
<li><p>v-for：基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 <code>alias in expression</code>，如<code>item in items</code>或<code>(item, index) in items</code>，同js的遍历，不局限于遍历数据结构，还可以遍历对象属性，当遍历对象时，可以<code>(value, key, index) in object</code>。</p>
</li>
<li><p>v-on：绑定事件监听器。事件类型由参数指定。</p>
<p><strong>修饰符：</strong></p>
<ul>
<li><p>.stop - 调用<code>event.stopPropagation()</code>，阻止单击事件冒泡。</p>
</li>
<li><p>.prevent - 调用 <code>event.preventDefault()</code>，提交事件不再重载页面。</p>
</li>
<li><p>.capture - 添加事件侦听器时使用 capture 模式，即捕获模式。</p>
</li>
<li><p>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</p>
</li>
<li><p>{keyCode | keyAlias} - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</p>
</li>
<li><p>.native - 监听组件根元素的原生事件。</p>
</li>
<li><p>.keyup[.enter | .tab | .delete | .esc | .space | .up | .down | .left | .right] - 无需解释</p>
</li>
</ul>
<p><strong>用法：</strong></p>
<p>用在普通元素上时，只能监听 原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event</code> 属性： <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>。</p>
</li>
<li><p>v-bind：动态地绑定一个或多个特性，或一个组件 prop 到表达式。在绑定 <code>class</code> 或 <code>style</code> 特性时，支持其它类型的值，如数组或对象。</p>
<p><strong>参考：</strong><a href="https://cn.vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="noopener">Class 与 Style 绑定</a>和<a href="https://cn.vuejs.org/v2/guide/components.html#Props" target="_blank" rel="noopener">组件 - 组件 Props</a></p>
</li>
<li><p>v-model：在表单控件或者组件上创建双向绑定。</p>
<p><strong>修饰符：</strong></p>
<ul>
<li><p><code>.lazy</code> - 取代 <code>input</code> 监听 <code>change</code> 事件</p>
</li>
<li><p><code>.number</code> - 输入字符串转为数字</p>
</li>
<li><p><code>.trim</code> - 输入首尾空格过滤</p>
</li>
</ul>
<p><strong>限制：</strong></p>
<ul>
<li><p><code>&lt;input&gt;</code></p>
</li>
<li><p><code>&lt;select&gt;</code></p>
</li>
<li><p><code>&lt;textarea&gt;</code></p>
</li>
<li><p>components</p>
</li>
</ul>
</li>
<li><p>v-pre：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</p>
</li>
<li><p>v-cloak：个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] { display: none }</code> 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p>
<p><strong>用法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[v-cloak] &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div v-cloak&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 不会显示，直到编译结束。</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>v-once：只渲染元素和组件一次。随后的重新渲染,元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</li>
</ul>
<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>虽然可以通过 {{ }}  可以绑定数据，但是太重的逻辑会使得模板过重难以维护，因此<code>computed</code>运营而生。</p>
<p>官方demo</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"example"</span>&gt;</span><br><span class="line">  &lt;p&gt;Original message: <span class="string">"&#123;&#123; message &#125;&#125;"</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">  &lt;p&gt;Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#example',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    message: 'Hello'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ a computed getter</span></span><br><span class="line"><span class="regexp">    reversedMessage: function () &#123;</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/ `this` points to the vm instance</span></span><br><span class="line"><span class="regexp">      return this.message.split('').reverse().join('')</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 只要 message 不发生变化，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数</span></span><br></pre></td></tr></table></figure>
<p>1、computed VS methods：<code>computed</code>基于依赖缓存，而<code>methods</code>则会每次执行函数，什么意思呢？<code>computed</code>只要相关依赖不发生改变，则不会重新取值，而<code>methods</code>则无论是否依赖会改变，都会重新调用函数计算一次。<em>当数据量大时，可以考虑有<code>computed</code>，而当你不想要有缓存则可以用<code>methods</code></em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性将不会更新，因为 Date.now() 不是响应式依赖</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2、computed VS $watch：<code>$watch</code>是观察Vue实例上数据变动，当数据发生变化时，<code>$watch</code>可以监听到其变化并作出相对应的逻辑处理。<code>$watch</code>跟<code>computed</code>使用场景只能视情况而定。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"demo"</span>&gt;&#123;&#123; fullName &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ $watch</span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#demo',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    firstName: 'Foo',</span></span><br><span class="line"><span class="regexp">    lastName: 'Bar',</span></span><br><span class="line"><span class="regexp">    fullName: 'Foo Bar'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  watch: &#123;</span></span><br><span class="line"><span class="regexp">    firstName: function (val) &#123;</span></span><br><span class="line"><span class="regexp">      this.fullName = val + ' ' + this.lastName</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">    lastName: function (val) &#123;</span></span><br><span class="line"><span class="regexp">      this.fullName = this.firstName + ' ' + val</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ computed</span></span><br><span class="line"><span class="regexp">var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">  el: '#demo',</span></span><br><span class="line"><span class="regexp">  data: &#123;</span></span><br><span class="line"><span class="regexp">    firstName: 'Foo',</span></span><br><span class="line"><span class="regexp">    lastName: 'Bar'</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  computed: &#123;</span></span><br><span class="line"><span class="regexp">    fullName: function () &#123;</span></span><br><span class="line"><span class="regexp">      return this.firstName + ' ' + this.lastName</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>
<p><code>computed</code> 相比 <code>$watch</code> 简单多。</p>
<p>3、计算属性默认情况下只有<code>getter</code>，并没有<code>setter</code>，我们可以提供</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><p>class：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">======================================================================</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"static"</span></span><br><span class="line">     v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">data: &#123;</span></span><br><span class="line"><span class="regexp">  isActive: true,</span></span><br><span class="line"><span class="regexp">  hasError: false</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">======================================================================</span></span><br><span class="line"><span class="regexp">&lt;div v-bind:class="classObject"&gt;&lt;/</span>div&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">======================================================================</span><br><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br><span class="line">======================================================================</span><br><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><br><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><br></pre></td></tr></table></figure>
<p>style：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line">======================================================================</span><br><span class="line">&lt;div v-bind:style=<span class="string">"styleObject"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">======================================================================</span><br><span class="line">&lt;div v-bind:style=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><br></pre></td></tr></table></figure>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>相关内容可以查看指令中的<code>v-for</code>，这里只讲述<code>key</code>，v2.0的<code>key</code>跟v1.0的<code>track-by</code>存在的意义一样，都是给每一项一个唯一标志符，这里需要利用到<code>v-bind</code>将<code>key</code>绑定起来。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意事项：</strong>由于js的限制， Vue 不能检测以下变动的数组：</p>
<p>1、当你利用索引直接设置一个项时，例如： <code>vm.items[indexOfItem] = newValue</code></p>
<p>解决方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(example1.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="comment">// Array.prototype.splice`</span></span><br><span class="line">example1.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure>
<p>2、当你修改数组的长度时，例如： <code>vm.items.length = newLength</code></p>
<p>解决方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example1.items.splice(newLength)</span><br></pre></td></tr></table></figure>
<h3 id="过滤-排序"><a href="#过滤-排序" class="headerlink" title="过滤|排序"></a>过滤|排序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">"n in evenNumbers"</span>&gt;&#123;&#123; n &#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">data: &#123;</span></span><br><span class="line"><span class="regexp">  numbers: [ 1, 2, 3, 4, 5 ]</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">computed: &#123;</span></span><br><span class="line"><span class="regexp">  evenNumbers: function () &#123;</span></span><br><span class="line"><span class="regexp">    return this.numbers.filter(function (number) &#123;</span></span><br><span class="line"><span class="regexp">      return number % 2 === 0</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">======================================================================</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;li v-for="n in even(numbers)"&gt;&#123;&#123; n &#125;&#125;&lt;/</span>li&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">  numbers: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  even: <span class="function"><span class="keyword">function</span> (<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><p>可以查看<em>指令</em>中的<code>.keyup</code>，除了上面官方给的，还可以自定义<code>keycode</code>，如<code>Vue.config.keyCodes.f1 = 112</code>。</p>
<p>其中在v2.1.0版本中新增了以下的特性：</p>
<p>可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应。</p>
<ul>
<li><p><code>.ctrl</code></p>
</li>
<li><p><code>.alt</code></p>
</li>
<li><p><code>.shift</code></p>
</li>
<li><p><code>.meta</code></p>
</li>
</ul>
<p>举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Alt + C --&gt;</span><br><span class="line">&lt;input @keyup.alt<span class="number">.67</span>=<span class="string">"clear"</span>&gt;</span><br><span class="line">&lt;!-- Ctrl + Click --&gt;</span><br><span class="line">&lt;div @click.ctrl=<span class="string">"doSomething"</span>&gt;Do something&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>优点</strong>：</p>
<ol>
<li><p>从<code>v-on</code>方便定位方法；</p>
</li>
<li><p>无须再js绑定事件，viewmodel只是处理纯粹的逻辑；</p>
</li>
<li><p>viewModel被销毁，事件也会随之被清理</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用shadowsocks加速git clone]]></title>
      <url>https://lucius0.github.io/2017/01/07/archivers/shadowsocks-and-git/</url>
      <content type="html"><![CDATA[<p>在中国，有时候就算翻墙，在使用git上还是存在速度很慢。那么我们可以利用shadowsocks的sock5代理，为我们的git操作加速。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos; </span><br><span class="line">git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;</span><br></pre></td></tr></table></figure>
<p>shadowsocks的默认端口就是1080，上面的设置只是开启了<code>https</code>协议的代理，git协议开启代理可以查看<a href="http://segmentfault.com/q/1010000000118837" target="_blank" rel="noopener">这里</a></p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git clone时遇到could not read from remote repository]]></title>
      <url>https://lucius0.github.io/2017/01/07/archivers/could-not-read-from-remote-repository/</url>
      <content type="html"><![CDATA[<p>git clone 时遇到如下的错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:xxxxx/xxx</span><br><span class="line">Cloning into &apos;xxx&apos;...</span><br><span class="line">The authenticity of host &apos;github.com (192.30.252.128)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? </span><br><span class="line">**Host key verification failed.**</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>缺少 known_hosts 文件, 而且必须生成 github.com 的ip执行内容.</p>
<p>只要执行命令<code>ssh git@github.com</code>，这样在.ssh目录就有三个文件了，即<code>id_rsa</code>，<code>id_rsa.pub</code>，<code>known_hosts</code></p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git pull时遇到error: cannot lock ref的错误]]></title>
      <url>https://lucius0.github.io/2017/01/06/archivers/error-cannot-lock-ref/</url>
      <content type="html"><![CDATA[<blockquote>
<p>git pull 时遇到 <strong>error: cannot lock ref ‘xxx’: ‘xxx’ exists; cannot create ‘xxx’</strong>，会导致pull失败。</p>
</blockquote>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>git工程的.git/refs目录下跟踪的某些git分支，在pull时候发现与远程仓库对应的分支refs不同，因此导致 git pull 失败</p>
<p><strong>举个例子：</strong></p>
<ol>
<li><p>A同事<code>$ git push -force</code>了test这个分支，导致远程仓库的分支被覆盖，而你本地的refs则会与远程仓库的分支不一致，产生问题；</p>
</li>
<li><p>git分支是不区分大小写，有人删除了远程仓库的分支又重新创建一个同样名字的分支同样也会产生问题。</p>
</li>
</ol>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>要么强行git pull，要么删除出现问题的refs文件夹，再git pull(推荐)</p>
<ol>
<li><p>删除有问题的refs，可以直接在.git/refs下面根据错误提示删除相对应的refs文件，如’refs/remotes/origin/testParent/test’，你也可以删除refs整个文件夹。</p>
</li>
<li><p>使用git命令<code>$ git update-ref -d refs/remotes/origin/testParent/test</code></p>
</li>
<li><p>强制执行pull，<code>$ git pull -p</code></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flexbox与z-index]]></title>
      <url>https://lucius0.github.io/2016/11/13/archivers/flexbox-and-z-index/</url>
      <content type="html"><![CDATA[<p>原文链接： <a href="https://www.sitepoint.com/quick-tip-how-z-index-and-auto-margins-work-in-flexbox/" target="_blank" rel="noopener">https://www.sitepoint.com/quick-tip-how-z-index-and-auto-margins-work-in-flexbox/</a></p>
<p><a href="https://www.w3.org/TR/css-flexbox-1/" target="_blank" rel="noopener">Flexbox</a> 是解决例如固定页脚和等高列等的普通布局的一种有效的解决方法。抛开这些，它还提供了一些不太流行的有用特性。让我们来一一探索它们。</p>
<h2 id="Flexbox-和-z-index"><a href="#Flexbox-和-z-index" class="headerlink" title="Flexbox 和 z-index"></a>Flexbox 和 z-index</h2><p>正如你已经知道的那样，<code>z-index</code>属性只能在定位的元素有效。默认情况下，所有元素都拥有<code>position: static</code>并且无法定位。除非<code>position</code>属性的值被设置为<code>relative</code>，<code>absolute</code>，<code>fixed</code>，或者<code>sticky</code>。</p>
<p>然而，一个没有定位性质的元素，例如flex项目同样也可以接收<code>z-index</code>属性。有关信息，在<a href="https://drafts.csswg.org/css-flexbox-1/#painting" target="_blank" rel="noopener">CSS弹性盒子布局规范</a>有介绍。</p>
<blockquote>
<p>Flex项目在渲染时如同内联块状元素一样，除了命令修改文档流顺序是用来替换未修改文档流顺序，<code>z-index</code>和自动边距在创建层叠上下文表现是不一样的，即使值为static。</p>
</blockquote>
<p>为了理解这些行为，让我们跟随着以下的例子来思考吧：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="JKYEgj" data-user="SitePoint" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/JKYEgj" target="_blank" rel="noopener">Flexbox and z-index</a> forked by SitePoint(<a href="http://codepen.io" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>这里我们定义两个元素：<code>.font</code>元素和<code>.back</code>元素。<code>.font</code>元素有一内容值为‘1’的子元素，并且<code>.font</code>元素为绝对定位元素。特别地，它拥有<code>position:fixed</code>属性并且覆盖了整个视图。</p>
<p>至于<code>.back</code>元素是一个flex容器，它包含了两个子元素-一个内容为2和一个为3的子元素。基于我们在上面讨论的，我们可以对flex项目设置<code>z-index</code>属性，即使它们不是定位元素(即它们有<code>position:static</code>)</p>
<p>注意到当我们通过点击上面例子的按钮给flex项目添加<code>z-index:2</code>，它们会被定位到<code>.front</code>元素的上面。</p>
<h2 id="Flexbox和自动边距"><a href="#Flexbox和自动边距" class="headerlink" title="Flexbox和自动边距"></a>Flexbox和自动边距</h2><p>通过给flex项目设置自动边距，我们可以解决相同的UI样式。一开始，我们先假象我们要构造这种类型的页头布局。</p>
<p><img src="/images/css/css-18.png" alt=""></p>
<p>为了构造这种样式的页头，我们使用Flexbox，没有浮动，没有固定宽诸如此类的属性。</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span>LOGO<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Projects<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"social"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子，<code>nav</code>元素是flex容器，而logo，主菜单，社交菜单则是flex项目。正如你在上一个代码结果看到的，前两个flex项目是沿着主轴排列在flex容器的左边。相反的，社交菜单则是沿着主轴排列在父容器的右边。</p>
<p>还有一种可以实现排列方式的就是给主菜单添加<code>margin-right: auto</code>。只要一行代码，我们就可以重载社交菜单的排列方式并把它始终排列在容器的右边。同样的，我们也可以用<code>align-self</code>属性去覆盖flex项目交叉轴的默认排列方式。</p>
<p>除了自动边距，我们还可以有第二种方法去设计我们的布局。首先，我们移除主菜单的<code>margin-right</code>属性，然后我们对其添加<code>flex-grow</code>属性。</p>
<p>尽管结果看起来两者无异，但却有一个很大的不同点。在第一个解决方法里面，菜单有它计算好的初始宽度。所以举个例子，当视图的宽度为1100px，菜单的宽度看起来则是下面这样的。</p>
<p><img src="/images/css/css-19.png" alt=""></p>
<p>另一方面，对于第二种解决方案，菜单的宽度值会更大，因为我们指定了<code>flex-grow: 1</code>，这是当我们视图宽度为1100px时相对应的宽度。</p>
<p><img src="/images/css/css-20.png" alt=""></p>
<p>以下是例子：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="ezpgqx" data-user="SitePoint" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/ezpgqx" target="_blank" rel="noopener">Custom Flexbox Alignment With Auto Margins</a> forked by SitePoint(<a href="http://codepen.io" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>现在让我们来假设一下我们想要修改的页头布局，新的设计布局是这样的：</p>
<p><img src="/images/css/css-21.png" alt=""></p>
<p>HTML部分的代码保持不变，我们只是对CSS做稍微修改：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子，注意下社交菜单排列在父元素的底部。这是因为我们给主菜单添加了<code>margin-bottom: auto</code>。当然，我们同样还可以使用<code>flex-grow: 1</code>。但是这种方法会增加menu的高度。</p>
<p>同样来看一下codepen的示例代码：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="GqpWKW" data-user="SitePoint" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/GqpWKW" target="_blank" rel="noopener">Custom Flexbox Alignment With flex-grow:1</a> forked by SitePoint(<a href="http://codepen.io" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>有一件事我们需要留意的是我们在所有的例子都定义了<code>justify-content</code>属性，我们在视觉上看不出有任何的差异。这是因为我们对flex项目使用了<code>auto margin</code>。只有当我们移除了自动边距(auto margin)之后，<code>justify-content</code>才会生效。根据以下的规范</p>
<blockquote>
<p>If free space is distributed to auto margins, the alignment properties will have no effect in that dimension because the margins will have stolen all the free space left over after flexing.</p>
<p>假如把剩余的空间都分配给自动边距，那么对其属性将会失效。这是因为假如是flex布局之后，margin会占据所剩余的空间。</p>
</blockquote>
<p>接下来，让我们来对页头做出新的改造。</p>
<p>毫无疑问，我们可以通过设置<code>justify-content: space-between</code>来很简单的实现这样的效果。但是再提一次，我们同样也可以通过设置自动边距来达到同样的效果。我们只要给主菜单设置<code>margin: 0 auto</code>。</p>
<p>Codepen 案例：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="beVqax" data-user="SitePoint" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/beVqax" target="_blank" rel="noopener">Custom Flexbox Alignment With Auto Margins</a> forked by SitePoint(<a href="http://codepen.io" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在这篇文章，我们介绍了两种鲜为人知关于Flexbox的小技巧。在结束之前，让我们来概括一下：</p>
<ul>
<li><p>我们可以对flex项目设置<code>z-index</code>，即使他们的定位为<code>static</code>，<code>position: static</code>。</p>
</li>
<li><p>我们可以使用自动边距来实现主轴上的flex项目的自定义排列。</p>
</li>
</ul>
<p>假如你还在你的项目中使用了其他的技巧，欢迎在下面留言。</p>
<script src="http://codepen.io/assets/embed/ei.js"> </script>]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出Flexbox]]></title>
      <url>https://lucius0.github.io/2016/11/09/archivers/dive-into-flexbox/</url>
      <content type="html"><![CDATA[<p>先给大家介绍一个可以边学边玩的Flexbox网站。</p>
<ul>
<li><p><a href="http://flexboxfroggy.com/#zh-cn" target="_blank" rel="noopener">FLEXBOX FROGGY</a></p>
</li>
<li><p><a href="http://www.css88.com/tool/flexboxfroggy/#zh-cn" target="_blank" rel="noopener">镜像网页</a></p>
</li>
</ul>
<p>Flexible boxes layout是W3C为了更好的在网页中排版和布局而设计出来的一个模块。它用来可以处理更加复杂的布局。它本质是盒模型的延伸，它可以进一步去规范容器中子元素盒模型之间的相对关系。</p>
<h2 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h2><p><img src="/images/css/css-09.png" alt=""></p>
<p>Flexible boxes盒子按照宽和高分出了<code>main axis</code>(主轴)和<code>cross axis</code>(和主轴交叉的轴)，盒子的上边称为<code>cross start</code>,下边称为<code>cross end</code>,左边称为<code>main start</code>,右边称为<code>main end</code>。</p>
<h2 id="Flexible-boxes可以解决什么问题"><a href="#Flexible-boxes可以解决什么问题" class="headerlink" title="Flexible boxes可以解决什么问题"></a>Flexible boxes可以解决什么问题</h2><p><strong>完全居中</strong></p>
<p>在前端中实现居中是一件很头疼的事情，尤其是实现垂直居中，之前翻译了一篇<a href="/2016/10/28//archivers/seven_ways_of_centering_with_css/" title="实现置中的七种方法">实现置中的七种方法</a>，其中提到一种最简单的方法就是使用<code>transform</code>，需要5行代码可以实现完全置中。</p>
<p>下面看一下<code>Flexible boxes</code>实现置中:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Flexible boxes只要3行代码就可以实现置中。</p>
<p><strong>等高的卡片式布局</strong></p>
<p>在没有用Flexible boxes之前很多卡片设计的网站都有这样一个问题，由于卡片里面的内容多少不同，而产生的不等高问题。</p>
<p>Flexible boxes简单的实现等高列：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Flexible-boxes能用在哪里"><a href="#Flexible-boxes能用在哪里" class="headerlink" title="Flexible boxes能用在哪里"></a>Flexible boxes能用在哪里</h2><p><strong>兼容性</strong></p>
<p><img src="/images/css/css-10.png" alt=""></p>
<p>可以看出Flexible boxes从提出到现在也已经有了8个草案。Flexible boxes更新了三种写法。</p>
<p><img src="/images/css/css-11.png" alt=""></p>
<p>caniuse上各个浏览器支持的情况</p>
<p><img src="/images/css/css-12.jpg" alt=""></p>
<p>稍微整理一下(这里借用gitcafe的JaychSu的图用一下)</p>
<p>从这里可以看出现代浏览器都支持最新的那个版本,只有<code>IE10</code>支持中间那个版本。</p>
<p><strong>使用CSS预处理器定义的@mixin解决Flexible boxes版本兼容</strong></p>
<p>在github上有大神把Flexible boxes三个版本搞成一个Sass的<code>@mixin</code>,这样可以在需要的地方直接<code>@include</code>进来就可以轻松解决三个版本的兼容问题。</p>
<p><a href="https://github.com/mastastealth/sass-flex-mixin" target="_blank" rel="noopener">sass关于Flexible boxes的mixin的github项目地址</a></p>
<h2 id="Flexible-boxes实现的原理逻辑"><a href="#Flexible-boxes实现的原理逻辑" class="headerlink" title="Flexible boxes实现的原理逻辑"></a>Flexible boxes实现的原理逻辑</h2><p><strong>display（定义容器里面为flex文档流）</strong></p>
<ul>
<li><p><code>dislpay:flex</code>使父容器表现为块盒子</p>
</li>
<li><p><code>display:inline-flex</code>使容器表现为行盒子</p>
</li>
</ul>
<p><strong>flex</strong></p>
<p>flex是<code>flex-grow,flex-shrink,flex-basis</code>的缩写形式。默认值是<code>0 1 auto</code>。</p>
<p><strong>flex-basis</strong></p>
<p>flex-basis:flex-basis可以理解为我们给子元素设置的宽度。默认值是auto,宽度设置为auto时，盒子的宽度取决你们元素的宽度。</p>
<p><img src="/images/css/css-13.png" alt=""></p>
<p><strong>flex-grow和flex-shrink</strong></p>
<p>grow和shrink是一对双胞胎，grow表示伸张因子，shrink表示是收缩因子。</p>
<p>grow在flex容器下的子元素的宽度和比容器和小的时候起作用。 grow定义了子元素的宽度增长因子，容器中除去子元素之和剩下的宽度会按照各个子元素的gorw值进行平分加大各个子元素上。</p>
<p><strong>公式：</strong></p>
<p>计算容器还剩空间</p>
<p><code>available_space(容器还剩的空间）=container_size(容器宽度)-flex_item_total(子元素宽度之和)</code></p>
<p>计算增长单位</p>
<p><code>grow_unit(增长单位)=available_space/flex_grow_total(子元素增长因子之和)</code></p>
<p>得到子元素的宽度</p>
<p><code>flex-item-width(子元素计算得到的宽度)=flex-basis+grow-unit*flex-grow</code></p>
<p><img src="/images/css/css-14.png" alt=""></p>
<p>上面例子的计算</p>
<p><code>container-size=480px;
flex-item-total=100*3=300px;
flex-grow-total=3+2+1=6;
available_space=480-300=180px;
grow_unit=180/6=30px;</code></p>
<p>子元素1的宽度为：</p>
<p><code>flex_item_width1=100+3*30=190px;</code></p>
<p>子元素2的宽度为：</p>
<p><code>flex_item_width1=100+2*30=160px;</code></p>
<p>子元素3的宽度为：</p>
<p><code>flex_item_width1=100+30=130px;</code></p>
<p data-height="499" data-theme-id="0" data-slug-hash="pvQZoy" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/pvQZoy" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>shrink则是在宽度和比容器宽度大时候，才有用。按照shrink的值减去相应大小得到子元素的值。</p>
<p><strong>公式：</strong></p>
<p>overflow_space(溢出的宽度)</p>
<p><strong>计算溢出的宽度</strong></p>
<p><code>overflow-space=flex-item-total(子元素basis宽度之和)-container_width(容器宽度)</code></p>
<p><strong>得到计算的子元素的宽度</strong></p>
<p><code>item-basis:子元素设置的flex-basis；
item-shrink:子元素的flex-shrink；
item-shrink-sum:所有子元素flex_shrink的和。     
flex_item_width(计算的子元素的宽度)=item-basis 
--(overflow-space*(item-shrink/item-shrink-sum))</code></p>
<p><img src="/images/css/css-15.png" alt=""></p>
<p><code>container-width=480px; item-shrink分别为3，2，1.item-basis=200px;  overflow-space=120px;</code></p>
<p>则：</p>
<p><code>flex_item1_width=200-(120*(3/6))=140px;
flex_item2_width=200-(120*(2/6))=160px; 
flex_item3_width=200-(120*(1/6))=180px;</code></p>
<p data-height="499" data-theme-id="0" data-slug-hash="GgPOJw" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/GgPOJw" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p><strong>align-content</strong></p>
<p>对单行和单列不起作用，多行时才有效，需设置<code>flex-direction:row;flex-wrap:wrap;</code>或者<code>flex-flow:row-wrap</code>,对<code>flex container</code>中的行进行布局排版。</p>
<ul>
<li><p><code>flex-start</code>:行填充到容器的开始。</p>
</li>
<li><p><code>flex-bottom</code>:行填充到容器的结束。</p>
</li>
<li><p><code>center</code>:行居中分布。</p>
</li>
<li><p><code>space-between</code>:行平均分布，第一行在容器开始，最后一行在容器结束。</p>
</li>
<li><p><code>space-around</code>:行平均分布，但行与行之间有空隙。</p>
</li>
</ul>
<p><strong>实例效果</strong></p>
<p data-height="499" data-theme-id="0" data-slug-hash="wBRebG" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/wBRebG" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p><strong>align-items</strong></p>
<p>用于当前行中的子元素进行对齐布局。</p>
<ul>
<li><p><code>flex-start</code>: 子元素的上边缘对齐到行的上边缘。</p>
</li>
<li><p><code>flex-end</code>: 子元素的上边缘对齐到行的下边缘。</p>
</li>
<li><p><code>center</code>: 以中轴线居中。</p>
</li>
<li><p><code>baseline</code>: 子元素的基线对齐。</p>
</li>
<li><p><code>stretch</code>:子元素拉伸至充满容器。</p>
</li>
</ul>
<p data-height="499" data-theme-id="0" data-slug-hash="ZYVJeR" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/ZYVJeR" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p><strong>align-self</strong></p>
<p>应用在子元素上，可以覆盖<code>align-item</code>来获得特殊的元素对齐。</p>
<ul>
<li><p><code>flex-start</code>: 子元素的上边缘对齐到行的上边缘。</p>
</li>
<li><p><code>flex-end</code>: 子元素的上边缘对齐到行的下边缘。</p>
</li>
<li><p><code>center</code>: 以中轴线居中。</p>
</li>
<li><p><code>baseline</code>: 子元素的基线对齐。</p>
</li>
<li><p><code>stretch</code>:子元素拉伸至充满容器。</p>
</li>
</ul>
<p><strong>实例效果</strong></p>
<p data-height="499" data-theme-id="0" data-slug-hash="gbZxRM" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/gbZxRM" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>一个利用<code>align-self</code>来改变默认<code>align-items</code>排版的例子</p>
<p data-height="499" data-theme-id="0" data-slug-hash="MYZvoX" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/MYZvoX" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p><strong>justify-content</strong></p>
<ul>
<li><p><code>flex-start</code>: 子元素靠容器的左边线对齐</p>
</li>
<li><p><code>flex-end</code>: 子元素靠容器的右边线对齐</p>
</li>
<li><p><code>center</code>: 以中轴线居中。</p>
</li>
<li><p><code>space-between</code>: 子元素被平均分布,第一子元素在容器最左边，最后一个子元素在最右边</p>
</li>
<li><p><code>space-around</code>:子元素平均分布，但子元素与子元素之间有空隙</p>
</li>
</ul>
<p><strong>实例效果</strong></p>
<p data-height="499" data-theme-id="0" data-slug-hash="KwbRJe" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/KwbRJe" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p><strong>order</strong></p>
<p>用来改变子元素之间的排列循序，默认值是0，值越小，越往前排。</p>
<p><img src="/images/css/css-16.png" alt=""></p>
<h2 id="Flexible-boxes解决的一些问题。"><a href="#Flexible-boxes解决的一些问题。" class="headerlink" title="Flexible boxes解决的一些问题。"></a>Flexible boxes解决的一些问题。</h2><p><strong>优雅的实现响应式布局。</strong></p>
<p><img src="/images/css/css-17.gif" alt=""></p>
<p data-height="499" data-theme-id="0" data-slug-hash="EaGrOy" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/EaGrOy" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p><strong>最简洁的实现媒体对象效果。（不需要浮动和创建BFC哦！）</strong></p>
<p data-height="499" data-theme-id="0" data-slug-hash="ZYVwVY" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/ZYVwVY" target="_blank" rel="noopener">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="noopener">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<h2 id="关于Flexible-boxes的一些文章"><a href="#关于Flexible-boxes的一些文章" class="headerlink" title="关于Flexible boxes的一些文章"></a>关于Flexible boxes的一些文章</h2><ul>
<li><a href="http://philipwalton.github.io/solved-by-Flexible boxes/" target="_blank" rel="noopener">Solved by Flexible boxes</a></li>
<li><a href="https://css-tricks.com/snippets/css/a-guide-to-Flexible boxes/" target="_blank" rel="noopener">A Complete Guide to Flexible boxes</a></li>
<li><a href="http://chriswrightdesign.com/experiments/Flexible boxes-adventures/" target="_blank" rel="noopener">Flexible boxes adventures</a></li>
</ul>
<script src="http://codepen.io/assets/embed/ei.js"> </script>

<p>出处来自：<a href="http://www.w3cplus.com/css3/flexboxgeng-jia-you-ya-de-webbu-ju.html" target="_blank" rel="noopener">Flexible boxes更加优雅的Web布局</a></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的模块简史]]></title>
      <url>https://lucius0.github.io/2016/11/02/archivers/brief-history-of-js-modules/</url>
      <content type="html"><![CDATA[<p><a href="https://medium.com/@sungyeol.choi/javascript-module-module-loader-module-bundler-es6-module-confused-yet-6343510e7bde#.j3e1w7v9r" target="_blank" rel="noopener">原文</a></p>
<p>你是否刚入门JavaScript并且经常被模块、模块加载器和模块打包器混淆？或者你已经写过一段时间的JavaScript了，但是还是无法掌握模块的专业用语？你可能听过的专业用语例如有<strong>CommonJS，AMD，Browserify，SystemJS，Webpack，JSPM</strong>等等。但是就是不知道我们为什么需要它们。</p>
<p>我将会尽我所能的去解释它们是什么，能解决什么样的问题，以及是怎么样去解决问题的。</p>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p><img src="/images/javascript/js-01.png" alt=""></p>
<p>在本文中，我会用一个简单的网页应用程序去演示关于模块的概念。在浏览器上该程序展示了数组的和。它由4个函数跟一个<em>index.html</em>组成。</p>
<p><img src="/images/javascript/js-02.jpeg" alt=""></p>
<p>main函数计算数组的和并把答案在<code>span#answer</code>展示。sum函数依赖两个函数：<code>add</code>跟<code>reduce</code>。<code>add</code>函数的作用顾名思义；即两数字相加。<code>reduce</code>函数会遍历数组并且调用<code>iteratee</code>回调函数。</p>
<p>花点时间理解一下以下的代码。我会在这篇文章反复的使用同样的函数。</p>
<p>0-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">	The Answer is</span><br><span class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line"><span class="keyword">var</span> answer = sum(values)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br></pre></td></tr></table></figure>
<p>2-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> reduce(arr, add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">    length = arr.length,</span><br><span class="line">    memo = arr[index];</span><br><span class="line">  <span class="keyword">for</span>(index += <span class="number">1</span>; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">    memo = iteratee(memo, arr[index])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们一起来看看如何将这些碎片化的代码拼接在一起创建一个应用。</p>
<h2 id="内嵌脚本"><a href="#内嵌脚本" class="headerlink" title="内嵌脚本"></a>内嵌脚本</h2><p>内嵌脚本就是当你在<code>&lt;script&gt;&lt;/script&gt;</code>标签添加<code>JavaScript</code>代码。我相信大多数的JavaScript开发者在他们的人生中至少有过一次这样子做过。</p>
<p>这是一种很好的开始方式。不需要担心外部脚本或者依赖关系。但同样也带来了不可维护的代码。原因如下：</p>
<ul>
<li><p><strong>缺乏代码可重用性：</strong>假如我们需要添加另一个页面和需要在本页的一些函数，那么我们就只能复制跟黏贴我们所需要的代码。</p>
</li>
<li><p><strong>缺乏依赖解析：</strong>你得保证在<code>main</code>函数之前就存在<code>add,reduce,sum</code>函数脚本。</p>
</li>
<li><p><strong>全局变量名污染：</strong>所有的变量跟函数都是储存在全局变量作用域里面。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      The Answer is</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> a + b;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> index = <span class="number">0</span>,</span></span><br><span class="line"><span class="undefined">          length = arr.length,</span></span><br><span class="line"><span class="undefined">          memo = arr[index];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(index += <span class="number">1</span>; index &lt; length; index += <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="undefined">          memo = iteratee(memo, arr[index])</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> memo;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> reduce(arr, add);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">/* Main Function */</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> answer = sum(values)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="引入外部脚本标签"><a href="#引入外部脚本标签" class="headerlink" title="引入外部脚本标签"></a>引入外部脚本标签</h2><p>这是从嵌入脚本的一种自然的过度。现在我们可以将一大块JavaScript代码划分成几小块的脚本文件并通过<code>&lt;script src=&#39;...&#39;&gt;&lt;/script&gt;</code>标签来加载。</p>
<p>通过分离的文件我们可以实现代码的复用。我们也不再需要在不同的页面复制跟黏贴代码。我们只要简单地通过<code>&lt;script&gt;&lt;/script&gt;</code>标签引入文件。这种方法虽然比较好，但是还是存在同样的几种问题：</p>
<ul>
<li><p><strong>缺乏依赖解析：</strong>文件的排序很重要。你需要在<em>main.js</em>之前引入了<em>add.js, reduce.js, add.js</em>。</p>
</li>
<li><p><strong>全局变量污染：</strong>所有的函数跟变量依旧暴露在全局作用域范围内。</p>
</li>
</ul>
<p>0-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      The Answer is</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./add.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./reduce.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./sum.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reduce.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">    length = arr.length,</span><br><span class="line">    memo = arr[index];</span><br><span class="line"></span><br><span class="line">  index += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">    memo = iteratee(memo, arr[index])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sum.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> reduce(arr, add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line"><span class="keyword">var</span> answer = sum(values)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br></pre></td></tr></table></figure>
<h2 id="模块对象以及IIFE"><a href="#模块对象以及IIFE" class="headerlink" title="模块对象以及IIFE"></a>模块对象以及IIFE</h2><p>通过使用模块对象和<a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression" target="_blank" rel="noopener">立即调用函数表达式IIFE</a>，我们可以减少全局作用域污染。在这种方法，我们仅仅暴露了一个对象在全局作用域。该对象包含了所有的我们所需要的函数跟值在我们的应用里面。在这个例子，我们只暴露了<code>myApp</code>对象给全局作用域。所有的函数将会在<code>myApp</code>对象所支持。</p>
<p>01-my-app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myApp = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>02-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  myApp.add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>03-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  myApp.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">      length = arr.length,</span><br><span class="line">      memo = arr[index];</span><br><span class="line">  </span><br><span class="line">    index += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">      memo = iteratee(memo, arr[index])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>04-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  myApp.sum = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> myApp.reduce(arr, myUtil.add);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>05-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line">  <span class="keyword">var</span> answer = app.sum(values)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br><span class="line">&#125;)(myApp);</span><br></pre></td></tr></table></figure>
<p>06-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      The Answer is</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./my-app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./add.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./reduce.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./sum.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意一点以上的文件除了<em>myApp.js</em>现在都包装成IIFE格式。</p>
<p><code>(function(){ /*... your code goes here ...*/ })();</code></p>
<p>通过将每一个文件都包装成IIFE，所有的本地变量都在函数作用域里面。因此不会对全局造成污染。</p>
<p>我们通过附加<code>add, reduce, sum</code>到<code>myApp</code>对象来暴露它们。我们只要引用<code>myApp</code>对象就能调用这些方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myApp.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">myApp.sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line">myApp.reduce(add, value);</span><br></pre></td></tr></table></figure>
<p>我们也可以通过往IIFE传递<code>myApp</code>全局对象作为它的参数，就像<code>main.js</code>文件所示。通过给IIFE传递参数对象，并可以为该对象设置为短别名。这样我们的代码就会稍微简短一点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// obj is new veryLongNameOfGlobalObject</span></span><br><span class="line">&#125;)(veryLongNameOfGloablObject);</span><br></pre></td></tr></table></figure>
<p>这相对于上一个例子是一个比较大的改进。并且大部分的js库都是采用这样的模式，包括jq。Jq暴露一个全局变量，$，这样所有的函数都在<code>$</code>的对象里面。</p>
<p>是的，这不是一个完美的解决方案。这个方法患有跟上一个案例同样的问题。</p>
<ul>
<li><p><strong>缺乏依赖解析：</strong>文件的排序很重要。你需要在<em>main.js</em>之前引入了<em>add.js, reduce.js, add.js</em>。</p>
</li>
<li><p><strong>全局变量污染：</strong>全局变量的数量现在是1，而不是0。</p>
</li>
</ul>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>在2009年，出现关于要把JavaScript带到服务端的话题。于是，ServerJs诞生了。后来ServerJs改名为CommonJS。</p>
<p>CommonJS不是一个JavaScript库，而是一个标准化组织。它就跟ECMA或者W3C一样。ECMA制定了JavaScript语言的规范。W3C制定了JavaScript网页API，例如DOM或者DOM事件。CommonJS的目标是为网页服务器，桌面程序，命令行应用程序制定一套通用的API。</p>
<p>CommonJS同样为模块制定API。在服务端应用程序是没有HTML页面，也没有<code>&lt;script&gt;</code>标签，因此为模块制定一套清晰的API就显得十分有意义了。模块需要暴露(<strong>export</strong>)给其他模块使用，并且还是可访问性的(<strong>import</strong>)。它的模块输出语法就像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码定义和输出了一个模块，并且保存在<code>add.js</code>文件里面。</p>
<p>为了使用和引入<code>add</code>模块，你需要将文件名或者模块名传参给<code>require</code>函数。下面就是如何引入模块的语法描述：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(‘./add’);</span><br></pre></td></tr></table></figure>
<p>假如你有写过NodeJS，这种语法会看起来十分的熟悉。这是因为NodeJS实现了CommonJS风格的模块API。</p>
<h2 id="Asynchronous-Module-Definition-AMD"><a href="#Asynchronous-Module-Definition-AMD" class="headerlink" title="Asynchronous Module Definition(AMD)"></a>Asynchronous Module Definition(AMD)</h2><p>CommonJS带来的问题就是模块的定义是同步的。当你调用<code>‘var add=require(‘add’);</code>，系统会暂停直到模块准备好了。意思就是这行代码会使浏览器发生阻塞直到所有的模块都加载完毕。因此这也不是在浏览器端定义模块应用的最佳方法。</p>
<p>为了将服务端的语法转移到客户端的语法，CommonJS提出了几种模块格式，”Module/Transfer”。其中一个提案就是，”Module/Transfer/C”，后来就成了<a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="noopener">AMD</a>。</p>
<p>AMD的格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define([‘add’, ‘reduce’], <span class="function"><span class="keyword">function</span>(<span class="params">add, reduce</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>注意<code>define</code>这个函数(或者说关键字)用依赖列表和回调函数作为参数。参数里的回调函数跟依赖列表的顺序一一对应。这跟模块导入无差别，并且回调函数返回的值就是输出(<code>export</code>)的值。</p>
<p>CommonJS和AMD同时解决了模块模式带来的两个遗留问题：<strong>依赖解析</strong>和<strong>全局作用域污染</strong>：我们只需要关心每个模块或者每个文件的依赖关系，和是否存在全局作用域污染问题。。</p>
<h2 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h2><p>AMD可以帮我们解决浏览器应用程序中的脚本标签跟全局污染的问题。那么，我们该如何使用它呢？RequireJS出现了。RequireJS是Javascript的<strong>模块加载器</strong>。它的作用就是帮助我们异步加载我们所需的模块。</p>
<p>今晚它的名字带有<code>require</code>，但是它的目标并不是支持CommonJS的<code>require</code>语法。有了RequireJS，我们就可以编写AMD风格的模块。。</p>
<p>在你开始写程序之前，你需要到<a href="http://requirejs.org/docs/start.html" target="_blank" rel="noopener">RequireJS website</a>下载<em>require.js</em>文件。如下就是用RequireJS风格编写的例子。</p>
<p>0-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      The Answer is</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"main"</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">define([<span class="string">'sum'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">sum</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line">  <span class="keyword">var</span> answer = sum(values)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>2-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> add;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>3-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> add;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>4-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduce.js</span></span><br><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reduce = <span class="function"><span class="keyword">function</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">      length = arr.length,</span><br><span class="line">      memo = arr[index];</span><br><span class="line"></span><br><span class="line">    index += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">      memo = iteratee(memo, arr[index])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> memo;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> reduce;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>注意在index.html文件只有一个脚本标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">”main”</span> <span class="attr">src</span>=<span class="string">”require.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该页面加载了<code>require.js</code>，并且<code>data-main=&#39;main&#39;</code>属性通知RequireJs在这个页面哪里是开始节点。通常默认情况下，它假定所有的文件都有<em>‘.js’</em>扩展名，因此可以忽略<em>‘.js’</em>后缀名的文件。但当RequireJS加载完<em>main.js</em>之后，它会加载该文件的依赖，以及依赖的依赖，等等。浏览器的开发者工具展示了所有文件的加载顺序。</p>
<p><img src="/images/css/css-08.png" alt=""></p>
<p>浏览器加载<code>index.html</code>以及加载它的<code>require.js</code>。剩下的文件和依赖由<code>require.js</code>来负责加载。</p>
<p>RequireJS和AMD解决了我们之前的所有问题。然而，它也带来了其他一些不是很严重的问题。</p>
<ul>
<li><p>AMD语法太过于复杂。因为所有都包装在<code>define</code>函数里面，所以会在我们的代码产生一些额外的缩进。假如是比较小的文件，这也没什么大问题，但假如是比较庞大的文件，那么它将是一种精神折磨。</p>
</li>
<li><p>数组里的依赖列表必须与函数的参数列表相匹配。假如有大量的依赖，那么要理清依赖顺序也是比较困难的一件事情。如果模块有几个个依赖，后来又要从中删除一个，那么久很难找到匹配的模块和参数。</p>
</li>
<li><p>伴随着现代浏览器(HTTP 1.1)，加载很多小文件也会降低性能。</p>
</li>
</ul>
<h2 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h2><p>由于这些原因，一些人想要用CommonJS语法来代替。但是CommonJS语法主要是针对服务器以及同步的，对吧？那么Browserify的出现就是要来解决这些问题的。有了Browserify，你就可以在浏览器应用程序使用CommonJS。Browserify是一个<strong>模块加载器</strong>。Browserify遍历你代码的依赖树，并且将它们打包成一个文件。</p>
<p>不像RequireJS，Browserify更像是一个命令行工具。你需要使用NodeJS和NPM来安装它。只要你在你的系统安装了nodeJS，那么输入以下命令行。</p>
<p><code>npm install -g browserify</code></p>
<p>让我们来看下用CommonJS语法的例子程序。</p>
<p>0-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      The Answer is</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>1-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">'./sum'</span>);</span><br><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line"><span class="keyword">var</span> answer = sum(values)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br></pre></td></tr></table></figure>
<p>2-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sum.js</span></span><br><span class="line"><span class="keyword">var</span> reduce = <span class="built_in">require</span>(<span class="string">'./reduce'</span>);</span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./add'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> reduce(arr, add);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>3-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>4-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reduce.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">    length = arr.length,</span><br><span class="line">    memo = arr[index];</span><br><span class="line"></span><br><span class="line">  index += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">    memo = iteratee(memo, arr[index])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>你可能已经注意到在<code>index.html</code>文件中，加载了脚本文件<code>bundle.js</code>。那么<code>bundle.js</code>文件在哪里呢？只要你执行下面的命令行，Browserify会为我们生成该文件。</p>
<p><code>$ brwoserify main.js -o bundle.js</code></p>
<p>Browserify会解析<code>main.js</code>里的<code>require</code>函数调用和遍历项目里面的依赖树。然后将他们都打包成一个文件。</p>
<p>如下就是<code>bundle</code>文件的相关代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">t,n,r</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">o,u</span>)</span>&#123;<span class="keyword">if</span>(!n[o])&#123;<span class="keyword">if</span>(!t[o])&#123;<span class="keyword">var</span> a=<span class="keyword">typeof</span> <span class="built_in">require</span>==<span class="string">"function"</span>&amp;&amp;<span class="built_in">require</span>;<span class="keyword">if</span>(!u&amp;&amp;a)<span class="keyword">return</span> a(o,!<span class="number">0</span>);<span class="keyword">if</span>(i)<span class="keyword">return</span> i(o,!<span class="number">0</span>);<span class="keyword">var</span> f=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span>+o+<span class="string">"'"</span>);<span class="keyword">throw</span> f.code=<span class="string">"MODULE_NOT_FOUND"</span>,f&#125;<span class="keyword">var</span> l=n[o]=&#123;<span class="attr">exports</span>:&#123;&#125;&#125;;t[o][<span class="number">0</span>].call(l.exports,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> n=t[o][<span class="number">1</span>][e];<span class="keyword">return</span> s(n?n:e)&#125;,l,l.exports,e,t,n,r)&#125;<span class="keyword">return</span> n[o].exports&#125;<span class="keyword">var</span> i=<span class="keyword">typeof</span> <span class="built_in">require</span>==<span class="string">"function"</span>&amp;&amp;<span class="built_in">require</span>;<span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;r.length;o++)s(r[o]);<span class="keyword">return</span> s&#125;)(&#123;<span class="number">1</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;,&#123;&#125;],<span class="number">2</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">'./sum'</span>);</span><br><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line"><span class="keyword">var</span> answer = sum(values)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br><span class="line"></span><br><span class="line">&#125;,&#123;<span class="string">"./sum"</span>:<span class="number">4</span>&#125;],<span class="number">3</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">    length = arr.length,</span><br><span class="line">    memo = arr[index];</span><br><span class="line"></span><br><span class="line">  index += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">    memo = iteratee(memo, arr[index])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;,&#123;&#125;],<span class="number">4</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> reduce = <span class="built_in">require</span>(<span class="string">'./reduce'</span>);</span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./add'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> reduce(arr, add);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;,&#123;<span class="string">"./add"</span>:<span class="number">1</span>,<span class="string">"./reduce"</span>:<span class="number">3</span>&#125;]&#125;,&#123;&#125;,[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>
<p>你无需每一行的去理解这个打包文件的意思。你只要注意一点的是，所有熟悉的代码，主文件，以及所有的依赖都在这文件里面。</p>
<h2 id="UMD-—-只会让你感到更加的困惑"><a href="#UMD-—-只会让你感到更加的困惑" class="headerlink" title="UMD — 只会让你感到更加的困惑"></a>UMD — 只会让你感到更加的困惑</h2><p>现在我们已经学会了<em>全局对象</em>，<em>CommonJS</em>和<em>AMD</em>风格的模块。并且有很多库可以帮助我们要不用CommonJS，要不AMD。但是假如我们正在写一个模块，并想部署到互联网上去怎么办？我们该用那种风格的模块。</p>
<p>用三种不同的模块都是可以的，如全局模块对象，CommonJS和AMD都是最终选择来的。但是我们不得不维护这三种类型的文件，并且用户不得不他们所下载的是哪种模块类型。</p>
<p>通用模块定义(UMD)就是来处理这个特殊的问题的。在本质上，UMD就是用一套<code>if/else</code>来判断目前的运行环境支持哪种模块类型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sum.umd.js</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        <span class="comment">// AMD</span></span><br><span class="line">        define([<span class="string">'add'</span>, <span class="string">'reduce'</span>], factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="comment">// Node, CommonJS-like</span></span><br><span class="line">        <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'add'</span>), <span class="built_in">require</span>(<span class="string">'reduce'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Browser globals (root is window)</span></span><br><span class="line">        root.sum = factory(root.add, root.reduce);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">add, reduce</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  private methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    exposed public methods</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> reduce(arr, add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<h2 id="ES6模块语法"><a href="#ES6模块语法" class="headerlink" title="ES6模块语法"></a>ES6模块语法</h2><p>Javascript全局模块变量，CommonJS，AMD和UMD，这里有太多选择了。现在你可能会问，我下一个项目应该使用什么模块风格？答案是一个也不用。</p>
<p>Javascript语言没有内置的模块系统。这就是为什么我们有太多不同的方式去导入导出模块了。但是最近以来这些改变了。伴随着ES6的到来，模块是Javascript其中的一部分。所以问题的答案是你假如想要你下一个项目前卫不过时的话，ES6模块语法是你最好的选择。</p>
<p>ES6通过<code>import</code>和<code>export</code>关键字来导入导出模块。下面是关于使用ES6模块语法的例子。</p>
<p>01-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">"./sum"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line"><span class="keyword">var</span> answer = sum(values);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br></pre></td></tr></table></figure>
<p>02-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">'./add'</span>;</span><br><span class="line"><span class="keyword">import</span> reduce <span class="keyword">from</span> <span class="string">'./reduce'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> reduce(arr, add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>03-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>04-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//reduce.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>,</span><br><span class="line">  length = arr.length,</span><br><span class="line">  memo = arr[index];</span><br><span class="line"></span><br><span class="line">  index += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">    memo = iteratee(memo, arr[index]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于ES6模块有很多短语：ES6模块语法相当简洁。ES6模块将会引领Javascript未来的世界。但是不幸的是，有一个问题，浏览器对这种新语法还没准备好(并未全面支持)。在写这篇文章的时候，只有Chrome浏览器支持<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="noopener">import</a>语句。即使当大部分的浏览支持<code>import</code>和<code>export</code>，假如你的应用程序需要在低版本的浏览器运行，那我们同样也会运行出错。</p>
<p>幸运的是，现在有很多工具可以用，这些工具允许我们使用ES6模块语法。</p>
<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p>Webpack是一个<strong>模块打包器</strong>，就跟Browserify一样，它会遍历依赖树并且将它打包成一个至多个文件。假如真的跟Browserify一样，那我们为什么还需要另一个模块打包器？Webpack可以管理CommonJS，AMD和ES6模块。并且Webpack带来了更灵活更酷的特性：</p>
<ul>
<li><p><strong>代码分离：</strong>当你有多个app同时共享同一些模块，Webpack可以将你的代码打包成两个或者多个文件。例如，当你有两个app，app1跟app2，两者共用多个模块。使用Browserify，你会得到<code>app1.js</code>和<code>app2.js</code>，并且两者都同时拥有所依赖的模块。但是假如使用Webpack，你可以创建<code>app1.js</code>，<code>app2.js</code>，和<code>share-lib.js</code>。是的，你必须在html页面加载这2个文件，但是由于哈希文件名，浏览器缓存以及CDN的原因，它可以减少初始化的加载时间。</p>
</li>
<li><p><strong>加载：</strong>通过自定义加载，你可以在加载任何文件到你的资源去。你可以通过使用<code>require</code>语法加载不单单是Javascript文件，还有css，CoffeeScript，Sass，Less，HTML模板，图片等等。</p>
</li>
<li><p><strong>插件：</strong>Webpack插件可以在你打包写入到文件之前对打包进行操作，有很多社区都在创建Webpack插件。例如，给打包代码添加注释，添加source map，将打包文件分离成众多小文件等等。</p>
</li>
</ul>
<p><em>WebpackDevServer</em>是一个检测到当你的代码发生变化时，会自动打包你的源代码以及自动刷新浏览器的开发服务器。通过代码的及时反馈，从而可以加速开发进度。</p>
<p>让我们看看我们是如何通过Webpack来打包我们的案例程序的。Webpack需要一点引导以及配置。</p>
<p>既然Webpack是JavaScript命令行工具，你就需要安装好nodejs和npm。装好npm之后，执行以下命令行初始化项目：</p>
<p><code>$ mkdir project; cd project
$ npm init -y
$ npm install -D webpack webpack-dev-server</code></p>
<p>你需要给Webpack添加配置文件。在你的配置文件中最少需要<code>entry</code>跟<code>output</code>两个字段。保存以下内容到<code>webpack.config.js</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   entry: ‘./app/main.js’,</span><br><span class="line">   output: &#123;</span><br><span class="line">       filename: ‘bundle.js’</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开<code>package.json</code>并添加以下<code>script</code>内容。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "webpack-dev-server -progress -colors",</span><br><span class="line">    "build": "webpack"</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p>现在添加所有你的JavaScript模块到<em>project/app</em>目录和添加<em>index.html</em>到<em>project</em>目录下。</p>
<p>01-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      The Answer is</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>02-webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: <span class="string">'./dist'</span>,</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>03-package.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"jsmodules"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"webpack-dev-server --progress --colors"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^1.12.14"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^1.14.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>04-app-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/add.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>05-app-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/sum.js</span></span><br><span class="line"><span class="comment">// app/reduce.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</span><br><span class="line">    length = arr.length,</span><br><span class="line">    memo = arr[index];</span><br><span class="line"></span><br><span class="line">  index += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">    memo = iteratee(memo, arr[index])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>06-app-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/sum.js</span></span><br><span class="line">define([<span class="string">'./reduce'</span>, <span class="string">'./add'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">reduce, add</span>)</span>&#123;</span><br><span class="line">  sum =  <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reduce(arr, add);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>07-app-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/main.js</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">'./sum'</span>);</span><br><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line"><span class="keyword">var</span> answer = sum(values)</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br></pre></td></tr></table></figure>
<p>注意一下<code>add.js</code>和<code>reduce.js</code>编写风格是CommonJS风格，而<code>sum.js</code>则是用AMD风格。Webpack，默认情况下，是可以管理CommonJS和AMD的。假如你的源码有用到ES6模块编码风格，那么你就不得不安装和配置<em>“babel loader”</em>。</p>
<p>一旦你已经安装好所有文件，你可以执行下面命令行来运行你的程序。</p>
<p><code>$ npm start</code></p>
<p>随后打开网站输入网址：<code>http://localhost:8080/webpack-dev-server/</code></p>
<p>此时，你可以打开你喜爱的编译器和输入你的代码。待你保存之后，浏览器会自动刷新和展示你代码改动之后的结果。</p>
<p>有一件事你可能已经注意到了，就是你已经找不到<em>‘dist/bundle.js’</em>文件。这是因为Wepback Dev Server会创建打包文件，并且没有将此写入文件系统中，而是保存在内存里。</p>
<p>为了可以部署，你可能想要创建一个打包文件。你可以执行下面的命令行创建<em>bundle.js</em>文件。</p>
<p><code>$ npm run build</code></p>
<p>假如你有兴趣想了解更多关于Webpack的知识，你可以访问<a href="https://webpack.github.io/docs/" target="_blank" rel="noopener">Webpack</a>。</p>
<h2 id="Rollup-2015-05"><a href="#Rollup-2015-05" class="headerlink" title="Rollup (2015-05)"></a>Rollup (2015-05)</h2><p>你是否有过导入了一个很大的JavaScript文件但是却使用到里面的一小部分函数？Rollup是JavaScript ES6的另一个模块打包器。跟Browserify和Webpack不同的是，Rollup只会引入你在项目中使用到的代码。假如你的项目引入了一个有很多方法的大模块并且你只用到里面的一小部分方法，Rollup只会打包你在项目中你调用到的方法。这可以很显著的减少打包文件的大小。</p>
<p>Rollup 可以被用作为命令行工具。如果安装好 NodeJS 和 NPM，那么就可以用以下的命令安装。</p>
<p><code>$ npm install -g rollup</code></p>
<p>Rollup可以跟任何类型的模块类型一起执行。但是，推荐使用ES6模块风格，这样就可以使用 <em>tree-shaking</em> 功能。下面是用ES6 编写的例子。</p>
<p>01-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="keyword">let</span> sub = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a - b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; add, sub &#125;;</span><br></pre></td></tr></table></figure>
<p>02-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduce.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (arr, iteratee) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>,</span><br><span class="line">  length = arr.length,</span><br><span class="line">  memo = arr[index];</span><br><span class="line"></span><br><span class="line">  index += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">    memo = iteratee(memo, arr[index]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>03-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sum.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'./add'</span>;</span><br><span class="line"><span class="keyword">import</span> reduce <span class="keyword">from</span> <span class="string">'./reduce'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (arr) =&gt; reduce(arr, add);</span><br></pre></td></tr></table></figure>
<p>04-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">"./sum"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line"><span class="keyword">var</span> answer = sum(values);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br></pre></td></tr></table></figure>
<p>注意在<code>add</code>模块，我引入了另一个函数<code>sub()</code>，但是这个函数在这个项目里面并没有使用。</p>
<p>现在我们用Rollup来打包我们的项目</p>
<p><code>$ rollup main.js -o bundle.js</code></p>
<p>生成的<code>bundle.js</code></p>
<p>bundle.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reduce = <span class="function">(<span class="params">arr, iteratee</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>,</span><br><span class="line">  length = arr.length,</span><br><span class="line">  memo = arr[index];</span><br><span class="line"></span><br><span class="line">  index += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</span><br><span class="line">    memo = iteratee(memo, arr[index]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> memo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">arr</span>) =&gt;</span> reduce(arr, add);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</span><br><span class="line"><span class="keyword">var</span> answer = sum(values);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</span><br></pre></td></tr></table></figure>
<p>注意观察，<code>sub</code>函数并没有出现在此<code>bunldle.js</code>文件里面。</p>
<h2 id="SystemJS"><a href="#SystemJS" class="headerlink" title="SystemJS"></a>SystemJS</h2><p>SystemJS是一个通用的模块加载器，它可以在浏览器或者NodeJs动态的加载模块，并且它还支持CommonJS，AMD，全局对象和ES6模块。通过插件，它还不仅仅能加载JavaScript，还可以加载CoffeeScript和TypeScript。</p>
<p>SystemJS的另一个好处，就是它是基于ES6 module Loader polyfill。因此它的语法和API在未来很有可能成为JavaScript语言的一部分，它可以让你的代码更加前卫。</p>
<p>可以使用以下语法，通过SystemJS来异步的导入模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.import(‘<span class="built_in">module</span>-name’);</span><br></pre></td></tr></table></figure>
<p>然后我们可以用配置 API 来配置 SystemJS 的行为。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.config(&#123;</span><br><span class="line">  transplier: ‘babel’,</span><br><span class="line">  baseURL: ‘/app’</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面的配置会让SystemJS使用<code>babel</code>来作为ES6模块的编译器，并且从<em>/app</em>目录加载模块。</p>
<p>随着现代JavaScript变得越来越大越来越复杂，开发工作流亦是如此。所以我们需要的，不仅仅是模块加载器，还有寻找开发服务器，生产的模块打包器以及第三方模块包管理器。</p>
<h2 id="JSPM"><a href="#JSPM" class="headerlink" title="JSPM"></a>JSPM</h2><p>JSPM是JavaScript开发工具的一把瑞士军刀。JSPM是一个(1)包管理器；(2)模块加载器；(3)模块打包器。</p>
<p>现在的JavaScript开发很少只需要自己的一些模块就可以完成的，大部分，我们是需要借用第三方模块的。</p>
<p>通过JSPM，你可以通过以下的命令行从NPM或者github来安装第三方模块。</p>
<p><code>jspm install npm:package-name or github:package/name</code></p>
<p>随后会从<em>‘npm’</em>或者<em>‘github’</em>下载至<em>‘jspm_package’</em>目录下。</p>
<p>在开发模式下，你可以使用<em>‘jspm-server’</em>，就跟Webpack Dev Server一样，它会探测到代码是否发生改变并且会自动刷新浏览器展示修改后的结果。但是不同Webpack Dev Server，jspm-server用的是SystemJS模块加载器。因此当它探测到文件有发生变化时，它不会打包所有的模块，而是只加载页面所需要的模块。</p>
<p>但当涉及到部署的问题，你可能想要打包你的代码。JSPM带有打包器，你可以使用以下的命令行来打包你的代码。</p>
<p><code>jspm bundle main.js bundle.js</code></p>
<p>在背后，JSPM采取了Rollup作为它的打包器。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我希望已经给你足够的信息让你去理解关于JavaScript模块化的问题。现在你可能会问，那我在下一个项目应该采用什么的方式呢？很抱歉，我现在无法回答你的问题。现在你已经具备能力去为自己寻找答案。希望本文能让你更容易理解提到有关工具的文档和文章。</p>
<p>你可以到<a href="https://github.com/sungthecoder/js-modules-examples" target="_blank" rel="noopener">github</a>查看本文中所有的代码例子，假如你有任何疑问，欢迎到下面的评论区留下的问题。</p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS - 5件你需要知道的css定位]]></title>
      <url>https://lucius0.github.io/2016/10/30/archivers/5-things-you-should-know-about-css/</url>
      <content type="html"><![CDATA[<p>原文链接<a href="https://scotch.io/bar-talk/5-things-you-might-not-know-about-the-css-positioning-types" target="_blank" rel="noopener">5-things-you-might-not-know-about-the-css-positioning-types</a>。</p>
<p>这些年来前端开发工程师可以利用不同的css方案来搭建出复杂的页面布局。其中有一部分的解决方案已经有些历史了(比如：<code>float</code>)，当然也有些是最近才逐渐流行起来的(比如：<code>flexbox</code>)。</p>
<p>在这篇文章，我们将会深入一步去探讨一些鲜为人知的关于<code>CSS POSITION</code>定位的事情。</p>
<p>在我们开始学习这些事之前，让我们先快速的浏览下可用的定位类型。</p>
<h2 id="回顾可用的CSS定位类型"><a href="#回顾可用的CSS定位类型" class="headerlink" title="回顾可用的CSS定位类型"></a>回顾可用的CSS定位类型</h2><p><code>position</code>这个css属性允许我们指定元素的定位类型。</p>
<h3 id="CSS定位选项"><a href="#CSS定位选项" class="headerlink" title="CSS定位选项"></a>CSS定位选项</h3><p><code>static</code>是该属性的默认值。在这一点上，我们可以称该元素并没有被定位。为了可以定位该元素，我们需要改变它的预设类型。</p>
<p>为了改变预设类型，我们需要将<code>position</code>设置为如下其中一个：</p>
<ul>
<li><p><code>relative</code></p>
</li>
<li><p><code>absolute</code></p>
</li>
<li><p><code>fixed</code></p>
</li>
<li><p><code>sticky</code></p>
</li>
</ul>
<p>只有设置之后，我们才可以使用<code>offset</code>去指定我们元素的位置：</p>
<ul>
<li><p><code>top</code></p>
</li>
<li><p><code>bottom</code></p>
</li>
<li><p><code>left</code></p>
</li>
<li><p><code>right</code></p>
</li>
<li><p>默认初始值<code>auto</code></p>
</li>
</ul>
<p>需要注意一点的是，把元素<code>position</code>设置为<code>absolute</code>或者<code>fixed</code>我们都称之为绝对定位元素。同样，注意一个被定位的元素可以用<code>z-index</code>来指定他们的层叠关系。</p>
<h3 id="CSS定位属性的主要差别"><a href="#CSS定位属性的主要差别" class="headerlink" title="CSS定位属性的主要差别"></a>CSS定位属性的主要差别</h3><p>现在，让我们来简单的讨论下这些定位类型的主要差别：</p>
<ul>
<li><p>一个<em>绝对</em>定位的元素是会完全脱离正常的流。邻近的兄弟节点会占据它的位置。</p>
</li>
<li><p>一个<em>相对</em>或者<em>粘性</em>定位元素保留他们的空间。邻近的元素不会重定位占据该元素保留的空间。然而，这个元素的偏移量不会占据空间。他们已经完全忽略了其他的元素，因此会造成元素之间发生重叠。</p>
</li>
<li><p>一个<em>固定(fixed)</em>定位元素(记住：<code>fixed</code>定位类型元素是<code>absolute</code>定位类型元素的子类)经常相对于<code>relative</code>定位类型的视图(除了有<code>transform</code>属性的父元素，新版本的桌面浏览器均支持这种行为)。</p>
</li>
<li><p>一个<em>粘性(sticky)</em>定位元素是相对与最近可滑动的父元素(比如：<code>overflow: auto</code>)。假如没有这种父元素，则相对于视图定位。</p>
</li>
</ul>
<p>接下来这些类型会在下面的例子中演示：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="qOqNgm" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/qOqNgm" target="_blank" rel="noopener">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="noopener">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p><em>注意：粘性定位类型还是处于实验性的技术，并且浏览器的支持有限。当然，假如你想要尝试这个效果，可以用polyfill(例如：<a href="https://github.com/wilddeer/stickyfill" target="_blank" rel="noopener">stickyfill</a>)加到不支持此类型的浏览器。鉴于支持有限，因此我们在以下的文章将不会对它进行讲解</em></p>
<h2 id="绝对定位元素"><a href="#绝对定位元素" class="headerlink" title="绝对定位元素"></a>绝对定位元素</h2><p>我确定很多人已经知道绝对定位是如何实现的。然而，绝对定位不仅仅需要技巧，更是经常能混淆新手。</p>
<p>基于这个原因，我决定将其列入鲜为人知的列表中(包括相对应的例子)，并在此文章一一讲解。</p>
<p>因此，一个被设置为绝对定位类型的元素是相对于最近的父元素。当然，这仅仅在父元素的定位类型不是<code>static</code>时有效。考虑到这一点，假如父元素没有声明任何类型，那么它是相对于视图定位。</p>
<p data-height="499" data-theme-id="0" data-slug-hash="dYOpMm" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/dYOpMm" target="_blank" rel="noopener">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="noopener">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>在这个例子中，我们给绿盒子初始<code>absolute</code>定位并且将<code>offset</code>值设置为<code>bottom: 0</code>和<code>left: 0</code>。此外，我们并没有指定其上一级父元素的定位类型。</p>
<p>然而，我们使外包围盒相对定位(例如：<code>jumbotron</code>元素)。注意一下只要我们修改了绿盒子的父元素的定位类型就会使得绿盒子的位置发生改变。</p>
<h2 id="绝对定位元素无视float属性的存在"><a href="#绝对定位元素无视float属性的存在" class="headerlink" title="绝对定位元素无视float属性的存在"></a>绝对定位元素无视<code>float</code>属性的存在</h2><p>假如一个元素是左浮动或者右浮动并且我们设置它的定位类型为<code>absolute</code>或者<code>fixed</code>，属性<code>float</code>的值则会变成<code>none</code>。另一方面，假如我们将该元素的定位类型设置为<code>relative</code>，则会保留其浮动属性。</p>
<p>看一下以下的相关例子</p>
<p data-height="499" data-theme-id="0" data-slug-hash="WQovLM" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/WQovLM" target="_blank" rel="noopener">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="noopener">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>在这个例子里面，我们定义了两个向右浮动的不同元素。值得注意的是，当我们将红盒子改变为<strong>绝对</strong>定位元素，它会忽略<code>float</code>属性，而<strong>相对</strong>定位的绿盒子则保留其属性值。</p>
<h2 id="绝对定位的内联元素跟块级元素的表现一样"><a href="#绝对定位的内联元素跟块级元素的表现一样" class="headerlink" title="绝对定位的内联元素跟块级元素的表现一样"></a>绝对定位的内联元素跟块级元素的表现一样</h2><p><code>absolute</code>定位或者<code>fixed</code>定位的内联元素，跟块级元素具有同样的能力。<a href="https://drafts.csswg.org/css-position-3/#dis-pos-flo" target="_blank" rel="noopener">这份列表</a>总结了什么类型的元素可以转换为块级元素。</p>
<p>这里同样也是一个例子</p>
<p data-height="499" data-theme-id="0" data-slug-hash="xwEymK" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/xwEymK" target="_blank" rel="noopener">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="noopener">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>在这个案例里，我们定义了两个不同的元素。第一个就是块级元素(绿盒子，例如:<code>div</code>)，第二个就是内联元素(红盒子，例如：<code>span</code>)。值得注意的是虽然只有绿盒子显示出来。</p>
<p>红色盒子之所以现在不可见是因为我们赋予它的<code>width</code>跟<code>height</code>只能作用域块级元素跟内联块级元素。再加上，它是一个空的元素(即：它不包含任何的子元素例如文本节点)。</p>
<p>记住一点的是，假如我们将它的定位类型设置为<code>absolute</code>或者<code>fixed</code>，则该元素会出现是因为这时候它的表现已经跟块级元素一样了。</p>
<h2 id="外边距-margins-无法合并绝对定位元素"><a href="#外边距-margins-无法合并绝对定位元素" class="headerlink" title="外边距(margins)无法合并绝对定位元素"></a>外边距(margins)无法合并绝对定位元素</h2><p>默认情况下，当两个垂直外边距互相接触，它们会合并成一个，并且<code>margin</code>值指定为较大的那一个。这种表现称之为<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="noopener">外边距合并</a>。</p>
<p>就像在一个浮动的元素上的外边距一样，绝对定位的外边距不会跟其他元素合并。</p>
<p>思考一下以下的例子：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="jbVrGd" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/jbVrGd" target="_blank" rel="noopener">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="noopener">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>在这个例子，初始化该元素的外边距为<code>20px</code>。另外，该元素的<code>top</code>外边距跟父元素的<code>top</code>外边距合并，同样也是<code>20px</code>。正如你所见，只有当我们绝对定位其元素，<code>top</code>外边距才不会跟父元素相关外边距合并。</p>
<p>但是，如何防止我们的外边距发生合并呢？当然，我们需要放一些东西来分割它们。</p>
<p>也就是说，例如有些许的内边距或者边框(我们应该将这条规则应用在父元素或者子元素)。另外一个选择就是在父元素添加<code>clearfix</code>类。</p>
<h2 id="通过像素和百分比来定位元素"><a href="#通过像素和百分比来定位元素" class="headerlink" title="通过像素和百分比来定位元素"></a>通过像素和百分比来定位元素</h2><p>你是否通过百分比取代像素的方法定义<code>offset</code>来定位元素？假如你的回答是有的话，你可能已经注意到计算<code>offset</code>的值跟你选择的CSS单位(例如：像素或者百分比)不一样。</p>
<p>这看起来有点让人迷惑，对吧？所以，让我们一起来看一下<a href="https://drafts.csswg.org/css-position-3/#valdef-top-percentage" target="_blank" rel="noopener">规范</a>对于用百分比来声明元素的<code>offset</code>值是怎么描述的。</p>
<blockquote>
<p>The offset is a percentage of the containing block’s width (for left or right) or height (for top and bottom). For stickily positioned elements, the offset is a percentage of the flow root’s width (for left or right) or height (for top or bottom). Negative values are allowed.</p>
</blockquote>
<p>也就是说，只要我们通过百分比来定义<code>offset</code>的值，那么目标元素的位置依赖于父元素的宽(对于左右偏移)和高(对于上下偏移)。</p>
<p>下面的例子演示了这种差异</p>
<p data-height="499" data-theme-id="0" data-slug-hash="PPbGbL" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/PPbGbL" target="_blank" rel="noopener">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="noopener">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a></p>

<p>在这个例子，我们通过了像素跟百分比来移动这个元素。果然，当我们用像素来声明<code>offset</code>的值，元素会在按照我们所期望的位置。</p>
<p>相反，当我们选择百分比来设计CSS偏移单位时，其元素的位移依赖于父元素的尺寸。这里有个有用的可视化图展示了新位置是如何计算的(通过百分比)：</p>
<p><img src="/images/css/css-07.png" alt=""></p>
<p><em>注意：估计你已经知道了，<code>transform</code>属性(伴随着不同的<code>translate</code>方法)同样也可以改变一个元素的位置。但是，请注意假如我们使用百分比来作为CSS的单位，那么该元素是相对于它的尺寸位移而不是相对于父元素的尺寸位移。</em></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我希望这篇文章能帮你牢固的理解CSS的位置布局方法和突出CSS概念的疑惑点。同样我也很乐意在以下的评论你能分享你的想法，问题或者建议。感谢你的阅读！</p>
<script src="http://codepen.io/assets/embed/ei.js"> </script>]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CSS - 七种元素居中的方法]]></title>
      <url>https://lucius0.github.io/2016/10/28/archivers/seven_ways_of_centering_with_css/</url>
      <content type="html"><![CDATA[<p>由于工作时间太忙加上大长假很久没有更新了。</p>
<p>接下来更新一下如何用css居中元素，原文链接<a href="http://thenewcode.com/723/Seven-Ways-of-Centering-With-CSS" target="_blank" rel="noopener">《Seven-Ways-of-Centering-With-CSS》</a>。</p>
<h2 id="七种元素居中的方法"><a href="#七种元素居中的方法" class="headerlink" title="七种元素居中的方法"></a>七种元素居中的方法</h2><p>居中html元素在网页开发似乎看起来挺简单的。但是在某些案例中，复杂的布局会经常消除一些解决方法，使得网页开发人员特别的头痛。</p>
<p>相对垂直居中，水平居中就略显得简单些，但同时要解决两者就有难度了。在这响应式设计的时代，我们很少能准确的知道元素的高度跟宽度，因此导致很多方案失效。据我所知，CSS至少有6种居中元素的方法。我将用以下的基础代码，讲解从最简单最好实现的到复杂的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"center"</span>&gt;</span><br><span class="line">  &lt;img src=<span class="string">"jimmy-choo-shoe.jpg"</span> alt&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>鞋子图片会改变，但都会保持在500px X 500px 的大小。<a href="http://thenewcode.com/61/An-Easy-Guide-To-HSL-Color-In-CSS3" target="_blank" rel="noopener">HSL colors</a>会使背景图片保持一致。</p>
<h3 id="使用text-align水平居中"><a href="#使用text-align水平居中" class="headerlink" title="使用text-align水平居中"></a>使用text-align水平居中</h3><p><img src="/images/css/css-01.png" alt=""></p>
<p>有时显而易见的解决方案是最好的选择。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(0, 100%, 97%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方案并不能使图片垂直居中：你需要在<code>&lt;div&gt;</code>添加<code>padding</code>或者给内容添加<code>margin-top</code>跟<code>margin-bottom</code>使得内容与容器有一定的高度。</p>
<h3 id="使用margin居中：auto"><a href="#使用margin居中：auto" class="headerlink" title="使用margin居中：auto"></a>使用margin居中：auto</h3><p><img src="/images/css/css-02.png" alt=""></p>
<p>又一次主要是针对水平居中，跟上面的<code>text-align</code>同样具有局限性</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(60, 100%, 97%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意一下<code>display: block</code>，是其属性使得<code>margin: 0 auto</code>生效的。</p>
<h3 id="table-cell-居中"><a href="#table-cell-居中" class="headerlink" title="table-cell 居中"></a>table-cell 居中</h3><p>使用<code>display: table-cell</code>，而不是<code>tabel</code>标签；可以对水平跟垂直居中同时有效，但是需要添加额外的元素作为容器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-aligned"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-core"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"jimmy-choo-shoe.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The Css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center-aligned</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(120, 100%, 97%);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center-core</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center-core</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">33%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意宽度<code>width: 100%</code>，是为了使其<code>&lt;div&gt;</code>不发生折叠，还有外部容器需要添加高度使其内容垂直居中。可以尝试给<code>html</code>和<code>body</code>设置高度，其内容元素同样也可以在<code>body</code>垂直居中。可以正常的运行在IE 8+浏览器。</p>
<h3 id="绝对居中-Absolute-Centering"><a href="#绝对居中-Absolute-Centering" class="headerlink" title="绝对居中(Absolute Centering)"></a>绝对居中(Absolute Centering)</h3><p><img src="/images/css/css-03.png" alt=""></p>
<p>有一种跨浏览器支持的方案，但是唯一的缺点就是需要在外部容器声明其高度<code>height</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.absolute-aligned</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(200, 100%, 97%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.absolute-aligned</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用translate居中"><a href="#使用translate居中" class="headerlink" title="使用translate居中"></a>使用translate居中</h3><p><img src="/images/css/css-04.png" alt=""></p>
<p>Chris Coiyer 提出了一种能同时支持水平居中跟垂直居中的<a href="http://thenewcode.com/273/CSS3-2D-Transformations-Introduction" target="_blank" rel="noopener">《新方案》</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(180, 100%, 97%);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>同时也带来了以下几点缺点：</strong></p>
<ul>
<li><p>CSS transform 会要求在不同的浏览器添加浏览器前缀；</p>
</li>
<li><p>不能在比较老的IE浏览器兼容(IE 8及以下版本)；</p>
</li>
<li><p>外部容器将需要设置高度(或其他方式)，并且不能从处于绝对位置的内容获取任何高度；</p>
</li>
<li><p>如何内容包含文本，当前浏览器合成技术也会使已发生转换的文本模糊。</p>
</li>
</ul>
<h3 id="Flexbox-居中"><a href="#Flexbox-居中" class="headerlink" title="Flexbox 居中"></a>Flexbox 居中</h3><p><img src="/images/css/css-05.png" alt=""></p>
<p>一旦属性差异性以及浏览器前缀的问题逐渐消失，这种解决方案将会成为主流方案。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">backgroud</span>: <span class="built_in">hsl</span>(240, 100%, 97%);</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在许多方面<code>flexbox</code>是最简单的解决方案，但有一个缺点的是新旧两种语法以及早期版本的IE浏览器不支持(尽管使用<code>display:table-cell</code>可以作为降级方案)。</p>
<p>如今的规范已经确定下来，并且现代的浏览器也支持了，具体的使用方法可以参考<a href="http://thenewcode.com/780/A-Designers-Guide-To-Flexbox" target="_blank" rel="noopener">《flexbox layout and its uses》</a></p>
<h3 id="使用calc居中"><a href="#使用calc居中" class="headerlink" title="使用calc居中"></a>使用calc居中</h3><p><img src="/images/css/css-06.png" alt=""></p>
<p>在某些方面比<code>flexbox</code>更灵活：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(300, 100%, 97%);</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 20%);</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 20%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非常简单，<code>calc</code>允许你基于当前页面的布局进行计算。在上面的计算中，50%是容器元素的中心点，但是仅仅使用50%会使<em>图片的左上角</em>对其<code>&lt;div&gt;</code>的中心。我们需要将图片的宽高同时移回一半。计算方式如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top: calc(50% - (40% / 2));</span><br><span class="line">left: calc(50% - (40% / 2));</span><br></pre></td></tr></table></figure>
<p>在如今的浏览器，你会发现这种解决方案更适合内容的宽高为固定尺寸：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - (300px / 2));</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - (300px - 2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>详细的<code>calc</code>使用方法可以查看：<a href="http://thenewcode.com/953/Layout-Math-with-CSS-Understanding-calc" target="_blank" rel="noopener">Layout Math with CSS: Understanding calc</a></p>
<p>这种解决方案跟<code>flexbox</code>一样有许多缺点：当代浏览器能很好的支持该方案，但是在早期的浏览器还是还是需要浏览器前缀，并且不支持IE 8</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 20%);</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 20%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之十二 - CMD与AMD异同]]></title>
      <url>https://lucius0.github.io/2016/08/20/archivers/javascript-cmd-amd/</url>
      <content type="html"><![CDATA[<ul>
<li>异步模块定义：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="noopener">AMD</a></li>
<li>通用模块定义：<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="noopener">CMD</a></li>
</ul>
<p>AMD是RequireJs推广过程中产出，而CMD则是SeaJs。跟上一篇文章一样都是为了js的模块化开发，特别是在浏览器端，都能达到浏览器模块化开发的目的。</p>
<p>区别：</p>
<ol>
<li><p>对于依赖的模块，AMD是<strong>提前执行</strong>，CMD是<strong>延迟执行</strong>。不过在RequireJs 2.0开始也可以改为延迟执行。</p>
</li>
<li><p>CMD推崇<strong>依赖就近</strong>，AMD推崇<strong>依赖前置</strong></p>
</li>
</ol>
<p>// CMD</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">	a.doSomething();</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">	<span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line">	b.doSomething();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>// AMD</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	a.doSomething();</span><br><span class="line">	<span class="comment">//...</span></span><br><span class="line">	b.doSomething();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>参考<strong><a href="https://www.zhihu.com/question/20351507/answer/14859415" target="_blank" rel="noopener">知乎大神玉伯的回答</a></strong></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之十一 - AMD,CommonJs,UMD]]></title>
      <url>https://lucius0.github.io/2016/08/20/archivers/javascript-amd-commonjs-umd/</url>
      <content type="html"><![CDATA[<p>模块化是js目前来说是最为常见的开发规范，因为js并没有类的概念，因此才会有以下的规范。在理想状态下，程序员只需要关心业务逻辑就好了。在以往，js的演变也是五花八门，从最为原始的函数写法，到立即执行函数写法，再到传参全局变量写法，可见开发者对模块化编程的迫切需求。</p>
<p>原始写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>立即执行函数写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _x = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> _f1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> _f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		f1: _f1,</span><br><span class="line">		f2: _f2</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>传参全局变量写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
<p>下面就是要介绍常见的模块化规范编程，翻译自<strong><a href="http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/" target="_blank" rel="noopener">What Is AMD, CommonJS, and UMD?</a></strong></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>多年来Javascript的生态圈一直在稳步的完善以至于有足够多的组件可供选择，本来大量的组件理应是振奋人心的，但是当多个第三方组件混用时也同样带来了很多麻烦，那就是当开发人员混用时并不能很好的互相兼容。</p>
<p>为了解决这些问题，AMD与CommonJs就出现了，他们要求开发者采用规范化的模式开发以免污染整个生态系统。</p>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>git：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD#using-require-and-exports" target="_blank" rel="noopener">amdjs</a></p>
<p>异步模块定义(Asynchronous Module Definition)，流行的RequireJS就是用的AMD规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行，所有需要依赖的逻辑都会定义在回调函数，等到加载完毕之后就会触发回调函数。</p>
<p>这里有一个对jQuery单一依赖模块<code>foo</code>，是用AMD规范的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: foo.js</span></span><br><span class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// method</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// exposed public methods</span></span><br><span class="line">	<span class="keyword">return</span> myFunc;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>下面是稍复杂多依赖并且暴露公共方法的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: foo.js</span></span><br><span class="line">define([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$, _</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// methods</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// private because it's not returned (see below)</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// public because it's returned</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// public because it's returned</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// exposed public methods</span></span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		b: b,</span><br><span class="line">		c: c</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>第一部分是依赖模块的数组定义，第二部分则是回调函数，但当只有依赖的模块都是可用时才会执行回调函数。</p>
<p>参数顺序跟依赖模块的顺序一致很重要(ex.jQuery -&gt; $, underscore -&gt; _)</p>
<p>当然我们可以将回调函数的参数名改成我们想要的，假如我们在代码中将<code>$</code>改成<code>$$</code>，那么就应该在函数体里面所有JQuery的引用都用<code>$$</code>替换<code>$</code></p>
<p>最后一点，也是重要的一点，就是你不能再函数的声明外部调用<code>$</code>跟<code>_</code>，因为有函数作用域，只有回调函数内才可以调用。</p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>git: <a href="https://github.com/efacilitation/commonjs-require" target="_blank" rel="noopener">commonJs</a></p>
<p>假如你有写过nodejs的话，那么你应该会对CommonJs感到非常的亲切，CommonJs是因为Browserify流行起来的。</p>
<p>用一个跟上一个同样的案例，来看看<code>foo</code>函数在CommonJs长什么样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: foo.js</span></span><br><span class="line"><span class="comment">// dependencies</span></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// methods</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exposed public method (single)</span></span><br><span class="line"><span class="built_in">module</span>.exports = myFunc;</span><br></pre></td></tr></table></figure>
<p>同样用一个比较复杂的例子，也是多依赖</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// filename: foo.js</span></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// methods</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// private because it's omitted from module.exports</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// public because it's defined in module.exports</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// public because it's defined in module.exports</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exposed public methods</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	b: b,</span><br><span class="line">	c: c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UMD-Universal-Module-Definition"><a href="#UMD-Universal-Module-Definition" class="headerlink" title="UMD: Universal Module Definition"></a>UMD: Universal Module Definition</h2><p>git: <a href="https://github.com/umdjs/umd" target="_blank" rel="noopener">umdjs</a></p>
<p>虽然CommonJs跟AMD规范都同样受欢迎，但他们似乎还没有达成共识。因此推动了通用模块定义的产生，用以同时支持两种规范。</p>
<p>不得不说UMD模式看起来没有比AMD跟CMD简洁，但是CommonJs不仅同时支持AMD跟CommonJS，还支持老的规范全局变量定义模式(“global” variable definition)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">		<span class="comment">// AMD</span></span><br><span class="line">		define([<span class="string">'jquery'</span>], factory);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">		<span class="comment">// Node, CommonJS-like</span></span><br><span class="line">		<span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>));</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Browser global (root is window)</span></span><br><span class="line">		root.returnExports = factory(root, jQuery);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// methods</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// exposed public method</span></span><br><span class="line">	<span class="keyword">return</span> myFunc;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>老规矩，复杂的例子以及多依赖跟暴露公共方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">		<span class="comment">// AMD</span></span><br><span class="line">		define([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>], factory);</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">		<span class="comment">// Node, CommonJs-like</span></span><br><span class="line">		<span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>), <span class="built_in">require</span>(<span class="string">'underscore'</span>));</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// Browser global (root is window)</span></span><br><span class="line">		root.returnExports = factory(root.jQuery, root._);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$, _</span>)</span>&#123;</span><br><span class="line">	<span class="comment">// methods</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//    private because it's not returned (see below)</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//    public because it's returned</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//    public because it's returned</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// exposed public methods</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    	b: b,</span><br><span class="line">    	c: c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>还有一种模块化规范，见下一篇<!-- [《CMD与AMD异同》](/archivers/javascript-cmd-amd) --><a href="/2016/08/20//archivers/javascript-cmd-amd/" title="《CMD与AMD异同》">《CMD与AMD异同》</a></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之十 - prototype]]></title>
      <url>https://lucius0.github.io/2016/08/18/archivers/javascript-prototype/</url>
      <content type="html"><![CDATA[<p>下面这段是ECMAScript关于原型的解释</p>
<blockquote>
<p>ECMAScript does not contain proper classes such as those in C++, Smalltalk, or Java, but rather, supports constructors which create objects by executing code that allocates storage for the objects and initialises all or part of them by assigning initial values to their properties. All constructors are objects, but not all objects are constructors. Each constructor has a Prototype property that is used to implement prototype-based inheritance and shared properties. Objects are created by using constructors in new expressions; for example, new String(“A String”) creates a new String object. Invoking a constructor without using new has consequences that depend on the constructor. For example, String(“A String”) produces a primitive string, not an object.</p>
<p>ECMAScript supports prototype-based inheritance. Every constructor has an associated prototype, and every object created by that constructor has an implicit reference to the prototype (called the object’s prototype) associated with its constructor. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.</p>
</blockquote>
<p>以下转自知乎<strong><a href="https://www.zhihu.com/question/34183746/answer/58155878?from=profile_answer_card" target="_blank" rel="noopener">doris</a></strong>的回答</p>
<p>首先，在JS中，除了基本类型<a href="/2016/08/07//archivers/javascript-data-types/" title="基本类型">基本类型</a>，其他的都为对象，Function也是对象，Function.prototype也是对象，因此都有隐式原型<strong><strong>proto</strong></strong>，指向了该对象的构造函数的原型，这保证了实例能够访问在构造函数原型中定义的属性和方法。</p>
<p>方法(Function)则除了以上的<strong><strong>proto</strong></strong>属性以外，还有<strong>prototype</strong>这个<strong>原型对象</strong>，这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法(prototype)。原型对象也有一个属性，叫做<strong>constructor</strong>，这个属性包含了一个指向原构造函数的指针。</p>
<p><img src="/images/javascript/javascript-prototype.jpg" alt=""></p>
<p>由图我们可以看出</p>
<ol>
<li><p><strong>构造函数Foo</strong> ：构造函数的原型属性<strong>Foo.prototype</strong>指向了原型对象，在原型对象里有共有的方法，所有构造函数声明的实例(f1, f2)都可以共享这个方法。</p>
</li>
<li><p><strong>原型对象Foo.prototype</strong> ：原型对象保存着实例共享的方法，有一个constructor指回构造函数。</p>
</li>
<li><p><strong>实例</strong> ：f1和f2是Foo这个对象的两个实例，这个两个对象也有属性<strong><strong>proto</strong></strong>，指向构造函数的原型对象，这样子就可以想<em>1</em>那样访问原型对象的所有方法。</p>
</li>
</ol>
<p>另外，构造函数Foo()除了是方法，还是个对象，它也有<strong><strong>proto</strong></strong>属性，指向它的构造函数的原型对象。函数的构造函数是Function，因此这里的<strong><strong>proto</strong></strong>指向了<strong>Function.prototype</strong>。</p>
<p>原型对象同样是属于对象，它的<strong><strong>proto</strong></strong>属性指向它的构造函数的原型对象，即<strong>Object.prototype</strong>。</p>
<p>最后，Object.prototype的<strong><strong>proto</strong></strong>属性指向null。</p>
<p><em>注意：</em> <code>typeof null</code>返回object是由于历史原因导致的，实际上ECMA规范尝试把<code>typeof null</code>返回值改为”null”，但是会导致很多旧的代码出现问题，因此又改回来了。所以说null并不是一个对象，而是一个基础类型。在<strong><a href="http://stackoverflow.com/questions/18808226/why-is-typeof-null-object" target="_blank" rel="noopener">stackoverflow</a></strong>有详细的说明。</p>
<p><strong>总结：</strong></p>
<ol>
<li><p>对象有属性<strong><strong>proto</strong></strong>，指向该对象的构造函数的原型对象；</p>
</li>
<li><p>方法除了有属性<strong><strong>proto</strong></strong>，还有属性<strong>prototype</strong>，指向该方法的原型对象。</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git常用技巧]]></title>
      <url>https://lucius0.github.io/2016/08/15/archivers/git-tips/</url>
      <content type="html"><![CDATA[<p>这里记录的是git最为常见的操作，然而这种帖子博客到处可见，我只是记下来方便我查阅而不需要到处去查找。在这里我推荐一位博主的网站<a href="http://www.liaoxuefeng.com/" target="_blank" rel="noopener">《廖雪峰》</a>，相信很多人都已经见过他的文章了，我也是拜读他的文章得以技术成长。还有<a href="https://github.com/jaywcjlove/handbook/blob/master/other/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.md" target="_blank" rel="noopener">《git 常用清单》</a>。</p>
<ol>
<li><p>工作区和暂存区</p>
<p> 工作区：就是本地目录，即在<code>git add</code>之前</p>
<p> 暂存区：在文件夹.git这个<strong>版本库</strong>下有一个暂存区跟很多分支，即在<code>git add</code>之后</p>
<p> 当执行<code>git add</code>命令时，工作区的内容便会到stage暂存区，<code>git commit</code>之后暂存区的内容就会提交到相对应的分支上。</p>
</li>
<li><p>git管理的是修改</p>
<p> 比如第一次修改<strong>readme</strong>，然后执行<code>git add</code>到暂存区，然后再修改readme，最后执行<code>git commit</code>提交到分支。</p>
<p> 结果调用<code>git status</code>时发现现在仍有一个<strong>modified</strong>文件，这是因为我们没有把新修改的文件提交到暂存区，所以导致分支中的文件和工作区的原文不匹配。所以我们需要重新<strong>add</strong>跟<strong>commit</strong>。这就是所说的，git管理的是<strong>“修改”</strong>，而不是<strong>“文件”</strong>本身。</p>
</li>
</ol>
<h2 id="1、丢弃工作区的文件"><a href="#1、丢弃工作区的文件" class="headerlink" title="1、丢弃工作区的文件"></a>1、丢弃工作区的文件</h2><p><strong>modified</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- file</span><br></pre></td></tr></table></figure>
<h2 id="2、暂存区回滚"><a href="#2、暂存区回滚" class="headerlink" title="2、暂存区回滚"></a>2、暂存区回滚</h2><p><strong>add</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD file</span><br><span class="line">$ git checkout -- file</span><br><span class="line"><span class="comment">// 也可以</span></span><br><span class="line">$ git checkout HEAD -- file</span><br></pre></td></tr></table></figure>
<h2 id="3、版本回滚"><a href="#3、版本回滚" class="headerlink" title="3、版本回滚"></a>3、版本回滚</h2><p><strong>commit</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit_id</span><br><span class="line"><span class="comment">// 查看历史版本</span></span><br><span class="line">$ git log</span><br><span class="line"><span class="comment">// 查看未来版本</span></span><br><span class="line">$ git relog</span><br></pre></td></tr></table></figure>
<h2 id="4、回滚已提交到远程仓库的提交"><a href="#4、回滚已提交到远程仓库的提交" class="headerlink" title="4、回滚已提交到远程仓库的提交"></a>4、回滚已提交到远程仓库的提交</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git revert commit_id</span><br></pre></td></tr></table></figure>
<h2 id="5、filename-too-long错误"><a href="#5、filename-too-long错误" class="headerlink" title="5、filename too long错误"></a>5、filename too long错误</h2><p>我在windows提交node_module时，发现node_module的路径太长了，导致我没法提交，找到了网上的解决方法。</p>
<p>详细查看这里 <a href="http://stackoverflow.com/questions/21123415/git-pull-aborted-with-error-filename-too-long" target="_blank" rel="noopener">Filename too long</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --system core.longpaths <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="6、查看修改历史"><a href="#6、查看修改历史" class="headerlink" title="6、查看修改历史"></a>6、查看修改历史</h2><ul>
<li><strong>git log –pretty</strong>：可列出文件的所有改动历史，注意，这里着眼于具体的一个文件，而不是git库，如果是库，那就有很多改动了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline filename</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>git show</strong>：打印出文件的详细改动历史，行前的数字就是每次提交的commit_id，常常配合<code>git log</code>查看某个文件的commit_id</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show commit_id</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>git reflog</strong>：查看每一次的操作命令</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
<h2 id="7、创建分支"><a href="#7、创建分支" class="headerlink" title="7、创建分支"></a>7、创建分支</h2><ul>
<li>创建并切换分支</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev_name</span><br></pre></td></tr></table></figure>
<ul>
<li>推送分支</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin dev:dev <span class="comment">// -u 关联本地分支与远程分支</span></span><br></pre></td></tr></table></figure>
<p>如果pull的时候提示<strong>“no tracking information”</strong>，则说明本地分支没有跟踪远程分支</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch --set-upstream branch-name origin/branch-name</span><br></pre></td></tr></table></figure>
<h2 id="8、删除分支"><a href="#8、删除分支" class="headerlink" title="8、删除分支"></a>8、删除分支</h2><ul>
<li>删除本地分支</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev_name</span><br></pre></td></tr></table></figure>
<ul>
<li>删除远程分支</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :dev_name <span class="comment">//注意冒号跟分支名没有空格</span></span><br></pre></td></tr></table></figure>
<h2 id="9、暂存修改"><a href="#9、暂存修改" class="headerlink" title="9、暂存修改"></a>9、暂存修改</h2><p>若遇到工作的分支上还没做完同时又不想提交，并且这时候另外一分支出现bug急需修复，这个时候我们可以将本地修改做暂时储存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash [save <span class="string">"description"</span>] <span class="comment">// 暂时存储是否添加描述为选填</span></span><br></pre></td></tr></table></figure>
<p>查看暂存列表</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>
<p>取出stash列表内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply <span class="comment">// 全部取出</span></span><br><span class="line"></span><br><span class="line">$ git stash apply stash@&#123;index&#125; <span class="comment">// 取index下的储存</span></span><br></pre></td></tr></table></figure>
<p>取消stash储存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash drop stash@&#123;index&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10、强制覆盖远程内容"><a href="#10、强制覆盖远程内容" class="headerlink" title="10、强制覆盖远程内容"></a>10、强制覆盖远程内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master --force</span><br></pre></td></tr></table></figure>
<h2 id="11、修改commit备注"><a href="#11、修改commit备注" class="headerlink" title="11、修改commit备注"></a>11、修改commit备注</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>
<h2 id="12、重命名分支"><a href="#12、重命名分支" class="headerlink" title="12、重命名分支"></a>12、重命名分支</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -m ordinary-dev-name <span class="keyword">new</span>-dev-name</span><br></pre></td></tr></table></figure>
<h2 id="13、标签"><a href="#13、标签" class="headerlink" title="13、标签"></a>13、标签</h2><p>显示标签(可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013762144381812a168659b3dd4610b4229d81de5056cc000" target="_blank" rel="noopener">廖雪峰大大的博客</a>)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有标签</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系列标签(显示1.9.*的所有标签)</span></span><br><span class="line">$ git tag -l <span class="string">'v1.9.*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看相应标签的版本信息</span></span><br><span class="line">$ git show v1<span class="number">.9</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>新建标签</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1<span class="number">.9</span><span class="number">.9</span> -m <span class="string">"version tag description"</span> <span class="comment">// -a(annotated)</span></span><br></pre></td></tr></table></figure>
<p>删除标签</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除本地标签</span></span><br><span class="line">$ git tag -d v1<span class="number">.9</span><span class="number">.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除远程标签</span></span><br><span class="line">$ git tag -d v1<span class="number">.9</span><span class="number">.9</span></span><br><span class="line">$ git push origin :refs/tags/v1<span class="number">.9</span><span class="number">.9</span></span><br></pre></td></tr></table></figure>
<p>推送标签</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推送指定标签</span></span><br><span class="line">$ git push origin v1<span class="number">.9</span><span class="number">.9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 推送所有标签</span></span><br><span class="line">$ git push origin --tags</span><br></pre></td></tr></table></figure>
<h2 id="14、远程分支"><a href="#14、远程分支" class="headerlink" title="14、远程分支"></a>14、远程分支</h2><p>拉取远程分支</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// git checkout -b [分支名] [远程名]/[分支名]</span></span><br><span class="line">$ git checkout -b test origin/test</span><br></pre></td></tr></table></figure>
<p>跟踪远程分支</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout --track origin/test</span><br></pre></td></tr></table></figure>
<p>推送远程分支</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin localBranch:remoteBranch</span><br></pre></td></tr></table></figure>
<h2 id="15、Permission-denied-publickey"><a href="#15、Permission-denied-publickey" class="headerlink" title="15、Permission denied (publickey)"></a>15、Permission denied (publickey)</h2><p>今天要拉取一个新项目，发现了老是拉不成功，在<strong>gitlab</strong>成员权限检查了完全没问题，只能先试试重新生成key。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"xxx@xxx.com"</span> -f ~<span class="regexp">/.ssh/</span>MyXXX</span><br><span class="line"># -f ~/.ssh/MyXXX # 重命名为MyXXX</span><br></pre></td></tr></table></figure>
<p>发现还是不行。后来查到了是因为新添加的key不能加入ssh，于是就试试下面的命令就发现好了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-agent</span><br><span class="line">$ ssh-add ~/.ssh/MyXXX # 添加身份验证</span><br></pre></td></tr></table></figure>
<h2 id="16、查看指纹"><a href="#16、查看指纹" class="headerlink" title="16、查看指纹"></a>16、查看指纹</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -l -E md5 -f ~/.ssh/xxx.pub</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将github的合并到本地(含提交日志)]]></title>
      <url>https://lucius0.github.io/2016/08/15/archivers/git-local-merge-github/</url>
      <content type="html"><![CDATA[<p>有时候我们在使用github上的某一个框架时，会先把框架下载下来而不是clone下来，虽然工程上可以使用，但是已经丢失了github上原作者跟众多维护者的提交日志。这篇文章就是来将本地已经修改的框架跟远程github的框架进行日志上的合并。</p>
<p>将生成的id_rsa.pub的内容提供给github，即在github上创建一个SSH key，并把该公钥复制进去。</p>
<p>以下是我使用git的内容，省了一些信息，其中local-master就是上文说的本地已经做修改的框架，将本地的master重命名为old-master，拉取github上的master，进行单修改合并：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取github的全部更新</span></span><br><span class="line">user /local-framework (master)</span><br><span class="line">$ git fetch github</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重命名master为old-master，为了就是github上的master分支可以拉取到本地</span></span><br><span class="line">user /local-framework (master)</span><br><span class="line">$ git branch -m old-master</span><br><span class="line"></span><br><span class="line"><span class="comment">// checkout远程分支master并切换到该分支</span></span><br><span class="line">user /local-framework (old-master)</span><br><span class="line">$ git checkout github/master -b master</span><br><span class="line"></span><br><span class="line"><span class="comment">// 远程master分支合并本地已修改分支</span></span><br><span class="line">user /local-framework (master)</span><br><span class="line">$ git merge old-master</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为在上一步出现冲突，因此回滚上一步</span></span><br><span class="line">user /local-framework (master|MERGING)</span><br><span class="line">$ git reset --hard master</span><br><span class="line"></span><br><span class="line">user /local-framework (master)</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line">user /local-framework (master)</span><br><span class="line">$ git log --pretty=oneline</span><br><span class="line"></span><br><span class="line">user /local-framwork (master)</span><br><span class="line">$ git cherry-pick &lt; commit id_1 &gt;</span><br><span class="line"></span><br><span class="line">user /local-framwork (master)</span><br><span class="line">$ git cherry-pick &lt; commit id_2 &gt;</span><br><span class="line"></span><br><span class="line">user /local-framwork (master)</span><br><span class="line">$ git cherry-pick &lt; commit id_3 &gt;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>到这里已经将github上的分支合并并且保留了以前提交的日志，之后可以删除远程github分支并且修改本地分支名为master了</p>
]]></content>
      
        <categories>
            
            <category> tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之九 - OOP]]></title>
      <url>https://lucius0.github.io/2016/08/14/archivers/javascript-oop/</url>
      <content type="html"><![CDATA[<h2 id="1、基于原型链继承"><a href="#1、基于原型链继承" class="headerlink" title="1、基于原型链继承"></a>1、基于原型链继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.y = <span class="number">2</span>; &#125;</span><br><span class="line"><span class="keyword">typeof</span> Foo.prototype; <span class="comment">// "object"</span></span><br><span class="line">Foo.prototype.x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> Foo();</span><br><span class="line">obj3.y; <span class="comment">// 2</span></span><br><span class="line">obj3.x; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">Foo.prototype = &#123;</span><br><span class="line">	<span class="keyword">constructor</span>: Foo,</span><br><span class="line">	__proto__: Object.prototype,</span><br><span class="line">	x: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、js继承的实例"><a href="#2、js继承的实例" class="headerlink" title="2、js继承的实例"></a>2、js继承的实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.LEGS_NUM = <span class="number">2</span>;</span><br><span class="line">Person.prototype.ARMS_NUM = <span class="number">2</span>;</span><br><span class="line">Person.prototype.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is walking..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, className</span>) </span>&#123;</span><br><span class="line">	Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">	<span class="keyword">this</span>.className = className;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">// override</span></span><br><span class="line">Student.prototype.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student.prototype.learn = <span class="function"><span class="keyword">function</span>(<span class="params">subject</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name, subject, <span class="keyword">this</span>.className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boss = <span class="keyword">new</span> Student(<span class="string">"Boss"</span>, <span class="number">1</span>, <span class="string">"Class one"</span>);</span><br><span class="line">boss.hi(); <span class="comment">// boss 1 Class one</span></span><br><span class="line">boss.LEGS_NUM; <span class="comment">// 2</span></span><br><span class="line">boss.walk(); <span class="comment">// boss is walking...</span></span><br><span class="line">boss.learn(<span class="string">"math"</span>); <span class="comment">// boss math Class one</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> <code>Person.prototype</code> 是让子类共享父类的方法，若没有prototype，则Student继承的时候，永远调用的都是父类的方法；<code>Object.create</code> 主要是重新实例化一个对象，并让Student的prototype指向这个对象，若不重新实例化，则给Student创建新方法的同时也会给Person.prototype创建对应的方法；<code>Student.prototype.constructor = Student</code>，会让Student的构造函数指向自身，否则指向父类的constructor</p>
<h2 id="3、改变prototype"><a href="#3、改变prototype" class="headerlink" title="3、改变prototype"></a>3、改变prototype</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Student.prototype.x = <span class="number">101</span>;</span><br><span class="line">boss.x; <span class="comment">// 101</span></span><br><span class="line">Student.prototype = &#123;<span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line">boss.y; <span class="comment">// undefined</span></span><br><span class="line">boss.x; <span class="comment">// 101</span></span><br><span class="line"><span class="keyword">var</span> lucius = <span class="keyword">new</span> Student(<span class="string">"lucius"</span>, <span class="number">22</span>, <span class="string">"Class two"</span>);</span><br><span class="line">lucius.x; <span class="comment">// undefined</span></span><br><span class="line">lucius.y; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> 当我们在原型上创建新的属性的时候，影响的是已创建的对象；但当我们将原型指向新的对象，则无法影响已创建的对象，反而会影响新的实例化对象。</p>
<h2 id="4、内置构造器的prototype"><a href="#4、内置构造器的prototype" class="headerlink" title="4、内置构造器的prototype"></a>4、内置构造器的prototype</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(key); <span class="comment">// x, 可以通过defineProperty将enumerable设置为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5、实现继承方式"><a href="#5、实现继承方式" class="headerlink" title="5、实现继承方式"></a>5、实现继承方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 改变了Student的方法跟属性，同时也修改了Person的方法跟属性，无法实现重写</span></span><br><span class="line">Student.prototype = Person.prototype;</span><br><span class="line"><span class="comment">// prototype 没有正确的指向</span></span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 比较好的继承方法，但是create只有在ES5才有</span></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">Student.prototype.constructor = Person;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟create</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">	<span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">		F.prototype = proto;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> F;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6、模拟重载"><a href="#6、模拟重载" class="headerlink" title="6、模拟重载"></a>6、模拟重载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">"object"</span> &amp;&amp; args[<span class="number">0</span>]) &#123;</span><br><span class="line">		<span class="keyword">if</span>(args[<span class="number">0</span>].name) &#123;</span><br><span class="line">			<span class="keyword">this</span>.name = args[<span class="number">0</span>].name;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(args[<span class="number">0</span>].age) &#123;</span><br><span class="line">			<span class="keyword">this</span>.age = args[<span class="number">0</span>].age;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span>(args[<span class="number">0</span>]) &#123;</span><br><span class="line">			<span class="keyword">this</span>.name = args[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(args[<span class="number">1</span>]) &#123;</span><br><span class="line">			<span class="keyword">this</span>.age = args[<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"name="</span> + <span class="keyword">this</span>.name + <span class="string">" , age="</span> + <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">"lucius"</span>, <span class="number">24</span>);</span><br><span class="line">obj.toString(); <span class="comment">// "name=lucius , age=24"</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Person(&#123;<span class="attr">name</span>: lucius0, <span class="attr">age</span>: <span class="number">24</span>&#125;);</span><br><span class="line">obj.toString(); <span class="comment">// "name=lucius , age=24"</span></span><br></pre></td></tr></table></figure>
<h2 id="7、调用基类的方法"><a href="#7、调用基类的方法" class="headerlink" title="7、调用基类的方法"></a>7、调用基类的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">superClass.prototype.methodName.call(this, arg0, arg1, arg2);</span><br><span class="line">superClass.prototype.methodName.apply(this, args);</span><br></pre></td></tr></table></figure>
<h2 id="8、链式调用"><a href="#8、链式调用" class="headerlink" title="8、链式调用"></a>8、链式调用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassManager</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	ClassManager.prototype.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"Class: "</span> + str + <span class="string">" added."</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// this 指向ClassManager实例</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> manager = <span class="keyword">new</span> ClassManager();</span><br><span class="line">manager.addClass(<span class="string">"classA"</span>).addClass(<span class="string">"classB"</span>).addClass(<span class="string">"classC"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="9、模块化"><a href="#9、模块化" class="headerlink" title="9、模块化"></a>9、模块化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CASE 1</span></span><br><span class="line"><span class="keyword">var</span> moduleA;</span><br><span class="line">moduleA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> prop = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		func: func,</span><br><span class="line">		prop: prop</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CASE 2</span></span><br><span class="line"><span class="keyword">var</span> moduleA;</span><br><span class="line">moduleA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> prop = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">this</span>.func = func;</span><br><span class="line">	<span class="keyword">this</span>.prop = prop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之八 - 执行上下文]]></title>
      <url>https://lucius0.github.io/2016/08/13/archivers/javascript-execution-context/</url>
      <content type="html"><![CDATA[<p>作用域：全局、函数、eval。可参考<a href="/2016/08/11//archivers/javascript-function-01/" title="《函数与作用域01》">《函数与作用域01》</a>和<a href="/2016/08/13//archivers/javascript-function-02/" title="《函数与作用域02》">《函数与作用域02》</a>。</p>
<h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>执行上下文类似于栈的结构，可参考<a href="http://blogread.cn/it/article/6178" target="_blank" rel="noopener">《深入理解Javascript之执行上下文》</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"EC0"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcEC1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"EC1"</span>);</span><br><span class="line">	<span class="keyword">var</span> funcEC2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">"EC2"</span>);</span><br><span class="line">		<span class="keyword">var</span> funcEC3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="string">"EC3"</span>);</span><br><span class="line">		&#125;;</span><br><span class="line">		funcEC3();</span><br><span class="line">	&#125;</span><br><span class="line">	funcEC2();</span><br><span class="line">&#125;</span><br><span class="line">funcEC1();</span><br><span class="line"></span><br><span class="line"><span class="comment">// EC0 -&gt; EC1 -&gt; EC2 -&gt; EC3</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> 变量对象(VO)是一个抽象概念的“对象”，它用于存储执行上下文中的变量、函数声明、函数参数</p>
<p>可以将上下文看成一个对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">activeExecutionContext = &#123;</span><br><span class="line">	VO: &#123;</span><br><span class="line">		data_var,</span><br><span class="line">		data_func_declaration,</span><br><span class="line">		data_func_arguments</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">VO(globalContext) = &#123;</span><br><span class="line">	a = <span class="number">10</span>,</span><br><span class="line">	test: <span class="xml"><span class="tag">&lt; <span class="attr">ref</span> <span class="attr">to</span> <span class="attr">function</span> &gt;</span></span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">VO(test function) = &#123;</span></span><br><span class="line"><span class="xml">	x: 30,</span></span><br><span class="line"><span class="xml">	b: 20</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="2、全局执行上下文-浏览器"><a href="#2、全局执行上下文-浏览器" class="headerlink" title="2、全局执行上下文(浏览器)"></a>2、全局执行上下文(浏览器)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">VO(globalContext) === [[global]];</span><br><span class="line"><span class="comment">// 全局初始化</span></span><br><span class="line">[[global]] = &#123;</span><br><span class="line">	<span class="built_in">Math</span>: <span class="xml"><span class="tag">&lt;<span class="name">...</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">	String: <span class="tag">&lt;<span class="name">...</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">	isNaN: <span class="tag">&lt;<span class="name">...</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">	...</span></span><br><span class="line"><span class="xml">	window: global // 依赖浏览器	</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">String(10); // [[global]].string(10)</span></span><br><span class="line"><span class="xml">window.a = 10; // [[global]].window.a = 10</span></span><br><span class="line"><span class="xml">this.b = 10; // [[global]].b = 10</span></span><br></pre></td></tr></table></figure>
<h2 id="3、函数激活对象-AO"><a href="#3、函数激活对象-AO" class="headerlink" title="3、函数激活对象(AO)"></a>3、函数激活对象(AO)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数初始化</span></span><br><span class="line">VO(functionContext) === AO;</span><br><span class="line">AO = &#123;</span><br><span class="line">	<span class="built_in">arguments</span>: <span class="xml"><span class="tag">&lt; <span class="attr">Arg0</span> &gt;</span></span></span><br><span class="line"><span class="xml">&#125;;</span></span><br><span class="line"><span class="xml">arguments = &#123;</span></span><br><span class="line"><span class="xml">	callee,</span></span><br><span class="line"><span class="xml">	length,</span></span><br><span class="line"><span class="xml">	properties-indexes</span></span><br><span class="line"><span class="xml">&#125;;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-1-变量初始化阶段"><a href="#3-1-变量初始化阶段" class="headerlink" title="3.1 变量初始化阶段"></a>3.1 变量初始化阶段</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> c = <span class="number">10</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">	<span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span> <span class="title">_e</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">	(<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">	b = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">AO(test) = &#123;</span><br><span class="line">	a: <span class="number">10</span>,</span><br><span class="line">	b: <span class="literal">undefined</span>,</span><br><span class="line">	c: <span class="literal">undefined</span>,</span><br><span class="line">	d: <span class="xml"><span class="tag">&lt; <span class="attr">ref</span> <span class="attr">to</span> <span class="attr">func</span> "<span class="attr">d</span>" &gt;</span>,</span></span><br><span class="line"><span class="xml">	e: undefined</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>VO按照如下顺序填充：</strong></p>
<ol>
<li><p>函数参数(若未传入，初始化该参数值为undefined)</p>
</li>
<li><p>函数声明(若发生命名冲突，会覆盖)</p>
</li>
<li><p>变量声明(初始化变量值为undefined，若发生命名冲突，忽略)</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">	<span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">100</span>); <span class="comment">// function x() &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> 函数参数传进去之后，因为函数声明跟参数命名发生冲突，即x直接覆盖函数参数变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> func;</span><br><span class="line">	<span class="built_in">console</span>.log(func);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">100</span>); <span class="comment">// function x() &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> 变量声明跟函数声明的命名发生冲突，根据VO的顺序，变量声明发生冲突，则会被忽略</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> func = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(func);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">100</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> 初始化阶段变量声明因为命名冲突会被忽略，但是在第二个阶段，即执行阶段<code>func = 1</code>会被赋值为1，则就是为什么结果1的原因了。</p>
<p><strong>注意：</strong> 函数表达式不会影响VO。上文的<code>var e = function _e(){}</code>中的_e匿名函数，e的变量声明会被放在右边的AO里面，执行阶段的时候才有把匿名函数_e赋值给变量e。这就是为什么我们没办法通过_e来访问函数对象。</p>
<h3 id="3-2-代码执行阶段"><a href="#3-2-代码执行阶段" class="headerlink" title="3.2 代码执行阶段"></a>3.2 代码执行阶段</h3><p>该阶段会对上一阶段初始化的变量进行赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">AO(test) = &#123;</span><br><span class="line">	a: <span class="number">10</span>,</span><br><span class="line">	b: <span class="literal">undefined</span>,</span><br><span class="line">	c: <span class="literal">undefined</span>,</span><br><span class="line">	d: <span class="xml"><span class="tag">&lt; <span class="attr">ref</span> <span class="attr">to</span> <span class="attr">func</span> "<span class="attr">d</span>" &gt;</span>,</span></span><br><span class="line"><span class="xml">	e: undefined</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/** ↓ **/</span></span><br><span class="line"><span class="xml">VO["c"] = 10;</span></span><br><span class="line"><span class="xml">VO["e"] = function _e() &#123;&#125;;</span></span><br><span class="line"><span class="xml">VO["b"] = 20;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">/** ↓ **/</span></span><br><span class="line"><span class="xml">AO(test) = &#123;</span></span><br><span class="line"><span class="xml">	a: 10,</span></span><br><span class="line"><span class="xml">	b: 20,</span></span><br><span class="line"><span class="xml">	c: 10,</span></span><br><span class="line"><span class="xml">	d: <span class="tag">&lt; <span class="attr">reference</span> <span class="attr">to</span> <span class="attr">FunctionDeclaration</span> "<span class="attr">d</span>" &gt;</span></span></span><br><span class="line"><span class="xml">	e: function _e() &#123;&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>栗子：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// function x() &#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 10</span></span><br><span class="line">x = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 20</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ol>
<li><p>初始化阶段</p>
<ul>
<li><p>函数参数：上下文测试不存在函数参数问题</p>
</li>
<li><p>函数声明：<code>function x() {}</code></p>
</li>
<li><p>变量声明：<code>var x</code> 命名冲突，忽略；<code>var a; var b</code> undefined</p>
</li>
</ul>
</li>
<li><p>执行阶段</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// function x() &#123;&#125;</span></span><br><span class="line">x = <span class="number">10</span>; <span class="comment">// x 被赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 10</span></span><br><span class="line">x = <span class="number">20</span>; <span class="comment">// x 再次被赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 20</span></span><br><span class="line">a = <span class="number">1</span>; <span class="comment">// a 被赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之七 - 函数与作用域(2)]]></title>
      <url>https://lucius0.github.io/2016/08/13/archivers/javascript-function-02/</url>
      <content type="html"><![CDATA[<h2 id="1、闭包"><a href="#1、闭包" class="headerlink" title="1、闭包"></a>1、闭包</h2><p>是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量的表，它不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。</p>
<p><strong>缺点：</strong> 容易造成空间浪费，内存泄漏，性能消耗</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CASE 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> localVal = <span class="number">30</span>;</span><br><span class="line">	<span class="keyword">return</span> localVal;</span><br><span class="line">&#125;</span><br><span class="line">outer(); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CASE 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> localVal = <span class="number">30</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> localVal;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = outer();</span><br><span class="line">func(); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure>
<p><strong>循环闭包：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.innerHTML = <span class="string">"&lt;div id='div1'&gt;aaa&lt;/div&gt;&lt;div id='div2'&gt;bbb&lt;/div&gt;&lt;div id='div3'&gt;ccc&lt;/div&gt;"</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">document</span>.getElementById(<span class="string">"div"</span> + i).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">		alert(i); <span class="comment">// 都是4</span></span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解决</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">document</span>.getElementById(<span class="string">"div"</span> + i).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">			alert(i); <span class="comment">// 1, 2, 3</span></span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2、封装"><a href="#2、封装" class="headerlink" title="2、封装"></a>2、封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> _userId = <span class="number">123</span>;</span><br><span class="line">	<span class="keyword">var</span> _typeId = <span class="string">"item"</span>;</span><br><span class="line">	<span class="keyword">var</span> _export = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">converter</span>(<span class="params">userId</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> _userId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_export.getUserId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> converter(_userId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_export.getTypeId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> _typeId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">window</span>._export = _export;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line">_export.getUserId(); <span class="comment">// 123</span></span><br><span class="line">_export.getTypeId(); <span class="comment">// item</span></span><br><span class="line">_export._userId; <span class="comment">// undefined</span></span><br><span class="line">_export._typeId; <span class="comment">// undefined</span></span><br><span class="line">_export.converter; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="3、全局-函数-eval"><a href="#3、全局-函数-eval" class="headerlink" title="3、全局/函数/eval"></a>3、全局/函数/eval</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 全局</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> b = <span class="number">20</span>; <span class="comment">// 局部</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(item); <span class="comment">// a b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">// b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">"var c = 1;"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> 由于没有块作用域，所以<code>var item</code>相当于<code>var a</code>是一个全局变量。b则是一个函数变量，只能在函数内有效，eval则在严格模式下外部是取不到eval作用域下的变量的。</p>
<h2 id="5、作用域链"><a href="#5、作用域链" class="headerlink" title="5、作用域链"></a>5、作用域链</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> local2 = <span class="number">2</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">outer1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> local1 = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">console</span>.log(local1 + <span class="string">"---"</span> + local2 + <span class="string">"---"</span> + global3); <span class="comment">// 1 2 3</span></span><br><span class="line">	&#125;</span><br><span class="line">	outer1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> global3 = <span class="number">3</span>;</span><br><span class="line">outer2();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log(typeof i);"</span>);</span><br><span class="line">	func(); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line">outer();</span><br></pre></td></tr></table></figure>
<h2 id="6、作用域封装"><a href="#6、作用域封装" class="headerlink" title="6、作用域封装"></a>6、作用域封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a, b;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a, b;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
<p>总结：这样的好处就是将变量作用域封装为函数内部作用域，防止跟全局变量发生冲突</p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之六 - 函数与作用域(1)]]></title>
      <url>https://lucius0.github.io/2016/08/11/archivers/javascript-function-01/</url>
      <content type="html"><![CDATA[<h2 id="1、调用方式"><a href="#1、调用方式" class="headerlink" title="1、调用方式"></a>1、调用方式</h2><ul>
<li><p>直接调用：foo();</p>
</li>
<li><p>对象方法：o.method();</p>
</li>
<li><p>构造器：new Foo();</p>
</li>
<li><p>call/apply/bind：func.call(o);</p>
</li>
</ul>
<h2 id="2、创建函数"><a href="#2、创建函数" class="headerlink" title="2、创建函数"></a>2、创建函数</h2><ul>
<li>函数声明</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>函数表达式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数变量</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数表达式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// do something here</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// do something here</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名式函数表达式</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// do something here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一般来说foo是在add所创建的作用域里，即外部调用一般都是访问不到</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// Uncaught ReferenceError: foo is not defined(…) </span></span><br><span class="line"><span class="comment">// IE6 ~ IE8则是可以的</span></span><br></pre></td></tr></table></figure>
<h2 id="3、函数构造器"><a href="#3、函数构造器" class="headerlink" title="3、函数构造器"></a>3、函数构造器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"console.log(a + b);"</span>);</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"console.log(a + b);"</span>);</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>函数构造器一般很少使用，会出现一些很奇怪的现象</p>
<ul>
<li>localValue 仍为局部变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>(<span class="string">"var localVal='local'; console.log(localVal);"</span>)(); <span class="comment">// local</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> localVal); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<ul>
<li>local不可访问，全局变量global可以访问</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVal = <span class="string">"global"</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> localVal = <span class="string">"local"</span>;</span><br><span class="line">	<span class="built_in">Function</span>(<span class="string">"console.log(typeof localVal, typeof globalVal);"</span>)(); <span class="comment">// undefined, string</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<table>
<thead>
<tr>
<th style="text-align:left">空白</th>
<th>函数声明</th>
<th>函数表达式</th>
<th>函数构造器</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">前置</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">允许匿名</td>
<td></td>
<td>√</td>
<td>√ </td>
</tr>
<tr>
<td style="text-align:left">立即调用</td>
<td></td>
<td>√</td>
<td>√ </td>
</tr>
<tr>
<td style="text-align:left">在定义该函数的作用域通过函数名访问</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">没有函数名</td>
<td></td>
<td></td>
<td>√ </td>
</tr>
</tbody>
</table>
<h2 id="4、this"><a href="#4、this" class="headerlink" title="4、this"></a>4、this</h2><h3 id="4-1-全局作用域下的this"><a href="#4-1-全局作用域下的this" class="headerlink" title="4.1 全局作用域下的this"></a>4.1 全局作用域下的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.document === <span class="built_in">document</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> ==== <span class="built_in">window</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.a = <span class="number">37</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 37</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-一般函数的this"><a href="#4-2-一般函数的this" class="headerlink" title="4.2 一般函数的this"></a>4.2 一般函数的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1() === <span class="built_in">window</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-作为对象方法的函数this"><a href="#4-3-作为对象方法的函数this" class="headerlink" title="4.3 作为对象方法的函数this"></a>4.3 作为对象方法的函数this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CASE 1</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">	prop: <span class="number">37</span>,</span><br><span class="line">	f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.prop;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(o.f()); <span class="comment">// 37</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// CASE 2</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">prop</span>: <span class="number">37</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.prop;</span><br><span class="line">&#125;</span><br><span class="line">o.f = f;</span><br><span class="line"><span class="built_in">console</span>.log(o.f()); <span class="comment">// 37</span></span><br></pre></td></tr></table></figure>
<h3 id="4-4-对象原型链上的this"><a href="#4-4-对象原型链上的this" class="headerlink" title="4.4 对象原型链上的this"></a>4.4 对象原型链上的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">f</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> p = <span class="built_in">Object</span>.create(o); <span class="comment">// p 的原型o</span></span><br><span class="line">p.a = <span class="number">1</span>;</span><br><span class="line">p.b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.f()); <span class="comment">// 调用原型链的f函数，this指向p</span></span><br></pre></td></tr></table></figure>
<h3 id="4-5-get-set方法与this"><a href="#4-5-get-set方法与this" class="headerlink" title="4.5 get/set方法与this"></a>4.5 get/set方法与this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modules</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.re * <span class="keyword">this</span>.re + <span class="keyword">this</span>.im + <span class="keyword">this</span>.im);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">	re: <span class="number">1</span>,</span><br><span class="line">	im:<span class="number">-1</span>,</span><br><span class="line">	get phase() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Math</span>.atan2(<span class="keyword">this</span>.im, <span class="keyword">this</span>.re);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"modules"</span>, &#123;<span class="attr">get</span>: modules, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(o.phase, o.modules);</span><br></pre></td></tr></table></figure>
<h3 id="4-6-构造器中的this"><a href="#4-6-构造器中的this" class="headerlink" title="4.6 构造器中的this"></a>4.6 构造器中的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.a = <span class="number">37</span>; <span class="comment">// 全局变量a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> MyClass(); <span class="comment">// this 指向o</span></span><br><span class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 37，o的原型链是MyClass</span></span><br></pre></td></tr></table></figure>
<h3 id="4-7-call-apply方法与this"><a href="#4-7-call-apply方法与this" class="headerlink" title="4.7 call/apply方法与this"></a>4.7 call/apply方法与this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">3</span>&#125;;</span><br><span class="line">add.call(o, <span class="number">5</span>, <span class="number">7</span>);</span><br><span class="line">add.apply(o, [<span class="number">5</span>, <span class="number">7</span>]);</span><br><span class="line"><span class="comment">// call与apply常见使用方法，即想把某个函数指向某个this</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>));</span><br><span class="line">&#125;</span><br><span class="line">bar.call(<span class="number">7</span>); <span class="comment">// [object Number] this 指向 new Number(7)</span></span><br></pre></td></tr></table></figure>
<h3 id="4-8-bind方法与this"><a href="#4-8-bind方法与this" class="headerlink" title="4.8 bind方法与this"></a>4.8 bind方法与this</h3><p>ES5才提供，IE9+才支持的函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f.bind(&#123;<span class="attr">a</span>: <span class="string">"test"</span>&#125;); <span class="comment">// f的this指向对象&#123;a:"test"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(g()); <span class="comment">// test</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">37</span>, <span class="attr">f</span>: f, <span class="attr">g</span>: g&#125;; <span class="comment">// f中的this指向o，而g的this指向为&#123;a:"test"&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o.f(), o.g()); <span class="comment">// 37, test</span></span><br></pre></td></tr></table></figure>
<h3 id="4-9-函数属性-amp-amp-arguments"><a href="#4-9-函数属性-amp-amp-arguments" class="headerlink" title="4.9 函数属性 &amp;&amp; arguments"></a>4.9 函数属性 &amp;&amp; arguments</h3><ul>
<li><strong>arguments</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">arguments</span>.length; <span class="comment">// 2</span></span><br><span class="line">	<span class="built_in">arguments</span>[<span class="number">0</span>]; <span class="comment">// 1</span></span><br><span class="line">	<span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">10</span>; <span class="comment">// 在use strict模式下，无法赋值，x还是为 1</span></span><br><span class="line">	x; <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">100</span>;</span><br><span class="line">	z; <span class="comment">// undefined</span></span><br><span class="line">	<span class="built_in">arguments</span>.callee === foo; <span class="comment">// true，严格模式下则无法使用callee</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">foo.length; <span class="comment">// 3</span></span><br><span class="line">foo.name; <span class="comment">// foo</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>apply/call</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x, y, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo.call(<span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1, 2, Number</span></span><br><span class="line">foo.apply(<span class="literal">true</span>, [<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// 1, 2, Boolean(true)</span></span><br><span class="line">foo.apply(<span class="literal">null</span>); <span class="comment">// undefined, undefined, window (严格模式下为null)</span></span><br><span class="line">foo.apply(<span class="literal">undefined</span>); <span class="comment">// undefined, undefined, window (严格模式下为undefined)</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>bind</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.x = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">	x: <span class="number">81</span>, </span><br><span class="line">	getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 81 this 指向module</span></span><br><span class="line"><span class="keyword">var</span> getX = <span class="built_in">module</span>.getX;</span><br><span class="line">getX(); <span class="comment">// 9 this 指向全局变量</span></span><br><span class="line"><span class="keyword">var</span> boundGetX = getX.bind(<span class="built_in">module</span>); </span><br><span class="line"><span class="comment">// 使用call/apply，boundGetX会报未定义的错误.</span></span><br><span class="line"><span class="comment">// 原因是call跟apply没有返回值，但是可以这样，</span></span><br><span class="line"><span class="comment">// getX.call(module)();</span></span><br><span class="line"><span class="comment">// getX.apply(module)();</span></span><br><span class="line">boundGetX(); <span class="comment">// 81 将上文的全局变量指向module</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>bind与函数颗粒化</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = add.bind(<span class="literal">undefined</span>, <span class="number">100</span>);</span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 103</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> <code>add.bind(undefined, 100)</code> 先将100传参给add函数的第一个参数，即a；然后<code>func(1, 2)</code>则会传参给函数的b跟c</p>
<ul>
<li><strong>bind与new</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.b = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func = foo.bind(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line">func(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> func(); <span class="comment">// &#123;b: 100&#125;</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> foo函数中返回值除非是<strong>对象</strong>，否则就将<strong>this</strong>作为返回值返回，<strong>this</strong>会被初始化为默认的一个空对象，并且<strong>this</strong>的原型是<em>foo.prototype</em>，该空对象的b属性会赋值为100，然后整个对象会被作为返回值返回并且忽略return的返回值。</p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之五 - 数组]]></title>
      <url>https://lucius0.github.io/2016/08/11/archivers/javascript-array/</url>
      <content type="html"><![CDATA[<p>有序，弱类型(多类型)集合。数组是有长度限制的，即0~2^23 - 1</p>
<p>数组的原型链：<code>[] -&gt; Array.prototype</code>; 对象的原型链：<code>{} -&gt; Object.prototype</code></p>
<p><strong>常用方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.join</span><br><span class="line"><span class="built_in">Array</span>.prototype.reverse</span><br><span class="line"><span class="built_in">Array</span>.prototype.sort</span><br><span class="line"><span class="built_in">Array</span>.prototype.concat</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice</span><br><span class="line"><span class="built_in">Array</span>.prototype.splice</span><br><span class="line"><span class="built_in">Array</span>.prototype.foreach(ES5)</span><br><span class="line"><span class="built_in">Array</span>.prototype.map(ES5)</span><br><span class="line"><span class="built_in">Array</span>.prototype.filter(ES5)</span><br><span class="line"><span class="built_in">Array</span>.prototype.every(ES5)</span><br><span class="line"><span class="built_in">Array</span>.prototype.some(ES5)</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduce/reduceRight(ES5)</span><br><span class="line"><span class="built_in">Array</span>.prototype.indexOf/<span class="built_in">Array</span>.prototype.lastIndexOf(ES5)</span><br><span class="line"><span class="built_in">Array</span>.isArray(ES5)</span><br></pre></td></tr></table></figure>
<ul>
<li>reduce</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123; <span class="keyword">return</span> x + y&#125;, <span class="number">0</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em> reduce接受两个参数，第一个参数则是逻辑函数，第二个参数表明是否要跟首次传入逻辑函数的参数进行逻辑处理，例如上文例子，会先进行 0 + 1 = 1，1 + 2 = 3，3 + 3 = 6</p>
<ul>
<li>isArray</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([]); <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line">(&#123;&#125;).toString.apply([]) === [<span class="string">"object Array"</span>]; <span class="comment">// true</span></span><br><span class="line">[].constructor === <span class="built_in">Array</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之四 - 对象]]></title>
      <url>https://lucius0.github.io/2016/08/09/archivers/javascript-object/</url>
      <content type="html"><![CDATA[<p>对象中包含一系列属性，这些属性是无序的。每个属性都有一个字符串key和对应的value。(无序，key为字符串)</p>
<h2 id="1、对象结构"><a href="#1、对象结构" class="headerlink" title="1、对象结构"></a>1、对象结构</h2><p>拥有<code>[[proto]]、[[class]](属于哪个类)、[[extensible]](是否允许添加新的属性)、writable、enumerable、configurable、value、get/set</code></p>
<h2 id="2、new-原型链"><a href="#2、new-原型链" class="headerlink" title="2、new/原型链"></a>2、new/原型链</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">foo.prototype.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</span><br><span class="line">obj.y = <span class="number">2</span>;</span><br><span class="line">obj.x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">obj.x; <span class="comment">// 1</span></span><br><span class="line">obj.y; <span class="comment">// 2</span></span><br><span class="line">obj.z; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> obj.toString; <span class="comment">// "function"</span></span><br><span class="line"><span class="string">"z"</span> <span class="keyword">in</span> obj; <span class="comment">// true</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"z"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>var obj = new foo();</code> obj的[[proto]]则会指向foo.prototype, 而foo的prototype则会指向Object.prototype，Object.prototype则会指向null</p>
</li>
<li><p><code>foo.prototype.z = 3;</code> 在foo.prototype添加一个属性z</p>
</li>
<li><p><code>obj.z</code> 会先从obj查找是否有z这个属性，然后再查找obj的[[proto]]，即foo.prototype</p>
</li>
<li><p><code>obj.toString</code> 该方法是在Object.prototype中，即Object.prototype.toString();</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">obj.z = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">obj.hasOwnProperty(<span class="string">"z"</span>); <span class="comment">// true</span></span><br><span class="line">foo.prototype.z; <span class="comment">// 3</span></span><br><span class="line">obj.z; <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">obj.z = <span class="literal">undefined</span>;</span><br><span class="line">obj.z; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.z; <span class="comment">// true</span></span><br><span class="line">obj.z; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.z; <span class="comment">// true</span></span><br><span class="line">obj.z; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>obj.z = 5;</code> 赋值不会因为obj没有z属性而继续往prototype找是否有这个属性，从而修改prototype的属性，什么意思呢？就是obj没有z属性，则只会在obj添加新的z属性，反而foo.prototype.z的值不会被修改。</p>
</li>
<li><p><code>obj.hasOwnProperty(&quot;z&quot;);    foo.prototype.z;    obj.z;</code> z的属性是添加到obj上的，foo.prototype.z是不会受到影响的，依旧保留。</p>
</li>
<li><p><code>obj.z = undefined;        obj.z;        foo.prototype.z;</code> 同理</p>
</li>
<li><p><code>delete obj.z;        obj.z;        delete obj.z;        obj.z;</code> delete 删除的只是obj的属性，而不会影响foo.prototype的属性，但当obj的z被删除后，obj.z查找步骤又跟之前一样会到foo.prototype原型链去查找。</p>
</li>
</ul>
<h2 id="3、Object-create"><a href="#3、Object-create" class="headerlink" title="3、Object.create"></a>3、Object.create</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br><span class="line">obj.x; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">typeof</span> obj.toString; <span class="comment">// "function"</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">obj.toString; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>var obj = Object.create({x:1});</code> 利用Object.create，则会创建一个新的对象，其原型链则指向参数。即<code>obj -&gt; {x:1} -&gt; Object.prototype -&gt; null</code></p>
</li>
<li><p><code>obj.x; // 1</code> 调用原型链上的参数</p>
</li>
</ul>
<h2 id="4、属性操作"><a href="#4、属性操作" class="headerlink" title="4、属性操作"></a>4、属性操作</h2><h3 id="4-1-属性读写"><a href="#4-1-属性读写" class="headerlink" title="4.1 属性读写"></a>4.1 属性读写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</span><br><span class="line">obj.x; <span class="comment">// 读</span></span><br><span class="line">obj.x = <span class="number">2</span>; <span class="comment">// 写</span></span><br></pre></td></tr></table></figure>
<h3 id="4-2-异常"><a href="#4-2-异常" class="headerlink" title="4.2 异常"></a>4.2 异常</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</span><br><span class="line">obj.y; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> yx = obj.y.z; <span class="comment">// TypeError : Cannot read property "z" of undefined</span></span><br><span class="line">obj.y.z = <span class="number">2</span>; <span class="comment">// TypeError : Cannot set property "z" of undefined，假如 obj.y = 1; obj.y.z=2; 则不会报错</span></span><br></pre></td></tr></table></figure>
<h3 id="4-3-删除"><a href="#4-3-删除" class="headerlink" title="4.3 删除"></a>4.3 删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="built_in">Object</span>.prototype; <span class="comment">// false, 这是因为Object.prototype的configurable为false</span></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">Object</span>, <span class="string">"prototype"</span>);</span><br><span class="line">descriptor.configurable; <span class="comment">// false，这样就无法delete Object.prototype</span></span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li><p>是无法删除基本类型的，例如：<code>var a = 1;        delete a; // false</code> </p>
</li>
<li><p>是无法删除函数声明的，例如：<code>function func(){};        delete func; // false</code></p>
</li>
<li><p>可以删除隐式的全局变量，例如：<code>a = 1;         window.a; // 1        delete a; //true</code></p>
</li>
<li><p>可以删除eval定义变量，例如：<code>eval(&quot;var x = 1&quot;);        delete x; //true</code></p>
</li>
</ul>
<h3 id="4-4-检测"><a href="#4-4-检测" class="headerlink" title="4.4 检测"></a>4.4 检测</h3><ul>
<li><p><code>&quot;x&quot; in obj;</code> 不仅仅会在该对象找，还会沿原型链上找</p>
</li>
<li><p><code>obj.hasOwnProperty(&quot;x&quot;)</code> 只会在该对象找，不会到沿原型链上找</p>
</li>
<li><p><code>obj.propertyIsEnumeratable</code> 是否可枚举</p>
</li>
<li><p><code>Object.defineProperty(obj, propertyName, propertyArgsObject);</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"x"</span>, &#123;<span class="attr">enumeratable</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">1000</span>&#125;);</span><br><span class="line">obj.propertyIsEnumerable(<span class="string">"x"</span>); <span class="comment">// false</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="5、getter-setter"><a href="#5、getter-setter" class="headerlink" title="5、getter/setter"></a>5、getter/setter</h2><p>用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	_x:<span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">	get x() &#123;</span><br><span class="line">		<span class="keyword">return</span> _x;</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	set x(val) &#123;</span><br><span class="line">		_x = val;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>栗子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(foo.prototype, <span class="string">"z"</span>, &#123;<span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</span><br><span class="line">obj.z; <span class="comment">// 1</span></span><br><span class="line">obj.z = <span class="number">10</span>;</span><br><span class="line">obj.z; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"z"</span>, &#123;<span class="attr">value</span>: <span class="number">100</span>, <span class="attr">configurable</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">obj.z; <span class="comment">// 100</span></span><br><span class="line"><span class="keyword">delete</span> obj.z; <span class="comment">// true</span></span><br><span class="line">obj.z; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>Object.defineProperty(foo.prototype, &quot;z&quot;, {get: function(){return 1;}});</code> 给foo的原型链创建属性z，并给其属性声明get方法</p>
</li>
<li><p><code>obj.z</code> 调用原型链z</p>
</li>
<li><p><code>obj.z = 10</code> 由于原型链有getter方法，表明该属性在原型链上只读不可写，同时也不会给原型链上创建新属性</p>
</li>
<li><p><code>obj.z</code> 依旧调用原型链getter方法</p>
</li>
<li><p><code>Object.defineProperty(obj, &quot;z&quot;, {value: 100, configurable: true});</code> 在obj上创建新属性z，并设置configurable为true，值为100</p>
</li>
<li><p><code>obj.z // 100</code> 调用obj本身的属性z </p>
</li>
<li><p><code>delete obj.z</code> 因为configurable为true，因此可以删除</p>
</li>
<li><p><code>obj.z</code> obj上的z被删除了，所以会重新从原型链上查找z属性</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;<span class="attr">value</span>: <span class="number">1</span>&#125;); <span class="comment">// writable = false, configurable = false;</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(o);</span><br></pre></td></tr></table></figure>
<p><em>解析：</em> 没啥解释</p>
<h2 id="6、属性标签"><a href="#6、属性标签" class="headerlink" title="6、属性标签"></a>6、属性标签</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.getOwnPropertyDescriptor(obj, propertyName);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;<span class="attr">configurable</span>: <span class="literal">false</span>, <span class="attr">writable</span>: <span class="literal">false</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="string">"Test"</span>&#125;);</span><br><span class="line"><span class="built_in">Object</span>.keys(person); <span class="comment">// ["name"]</span></span><br><span class="line">person.name; <span class="comment">// Test;</span></span><br><span class="line">person.name = <span class="string">"Test2"</span>;</span><br><span class="line">person.name; <span class="comment">// Test</span></span><br><span class="line"><span class="keyword">delete</span> person.name; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<p>-<code>Object.keys(person)</code> 获取该对象所有可枚举的属性</p>
<ul>
<li><p><code>Object.getOwnPropertyDescriptor(obj, propertyName)</code> 获取对象描述器，第一个参数是获取描述的对象，第二个参数是该对象的属性，若不存在则返回undefined，反之则返回该对象的属性配置</p>
</li>
<li><p><code>Object.defineProperty(person, &quot;name&quot;, {configurable: false, writable: false, enumerable: true, value: &quot;Test&quot;})</code> 定义属性的配置，第一个参数是对象，第二个属性是不存在于该对象的属性，第三个则定义该对象的属性描述器对象</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">c(configurable)/w(writable)</th>
<th>c:true/w:true</th>
<th>c:true/w:false</th>
<th>c:false/w:true</th>
<th>c:false/w:false</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">修改属性的值</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">通过属性赋值、修改属性的值</td>
<td>√</td>
<td>×</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">delete该属性返回true</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">修改getter/setter方法</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">修改属性标签(除了writable从true修改为false总是允许)</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p> <strong>注意：</strong>假如我们想改属性的值，configurable与writable为false的话就没办法修改了，但是假如writable为false，而configurable为true的话，我们可以变相的通过configurable修改属性的值，如Object.defineProperty(xxx, x, {value: 1})或者通过configurable来修改属性的writable的值使其能被修改，如Object.defineProperty(xxx, x, {writable: true});</p>
<h2 id="7、对象标签"><a href="#7、对象标签" class="headerlink" title="7、对象标签"></a>7、对象标签</h2><p>对象标签有三种：[[proto]]、[[class]]、[[extensible]]</p>
<ul>
<li><p><strong>[[proto]]：</strong> 原型对象</p>
</li>
<li><p><strong>[[class]]：</strong> 表明该对象是哪种类型的类</p>
</li>
<li><p><strong>[[extensible]]：</strong> 对象是否能再被添加新的属性，如AS的dynamic</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(obj); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(obj);</span><br><span class="line"><span class="built_in">Object</span>.isExtensible(obj); <span class="comment">// false</span></span><br><span class="line">obj.z = <span class="number">1</span>;</span><br><span class="line">obj.z; <span class="comment">// undefined，添加失败</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"x"</span>);</span><br><span class="line"><span class="comment">// Object &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.seal(obj);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"x"</span>);</span><br><span class="line"><span class="comment">// Object &#123;value: 1, writable: true, enumerable: true, configurable: false&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.isSeal(obj); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(obj);</span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"x"</span>);</span><br><span class="line"><span class="comment">// Object &#123;value: 1, writable: false, enumerable: true, configurable: false&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.isFrozen(obj);</span><br></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>Object.preventExtensions(obj)</code> 阻止obj扩展新属性，但是不会影响到旧的属性</p>
</li>
<li><p><code>Object.seal(obj)</code> 设置configurable为false</p>
</li>
<li><p><code>Object.freeze(obj)</code> 设置configurable跟writable为false</p>
</li>
</ul>
<p><strong>注意：</strong>以上的方法只会限制当前对象，并不会影响到原型链对象，若想影响原型链的对象，就得对原型链对象做同样的操作</p>
<h2 id="8、序列化"><a href="#8、序列化" class="headerlink" title="8、序列化"></a>8、序列化</h2><h3 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="literal">true</span>, <span class="attr">z</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="attr">nullVal</span>: <span class="literal">null</span>&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">// "&#123;"x":1,"y":true,"z":[1,2,3],"nullVal":null&#125;"</span></span><br><span class="line"></span><br><span class="line">obj = &#123;<span class="attr">val</span>: <span class="literal">undefined</span>, <span class="attr">a</span>: <span class="literal">NaN</span>, <span class="attr">b</span>: <span class="literal">Infinity</span>, <span class="attr">c</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">// "&#123;"a":null,"b":null,"c":"2016-08-10T15:45:03.197Z"&#125;"</span></span><br><span class="line"></span><br><span class="line">obj = <span class="built_in">JSON</span>.parse(<span class="string">"&#123;'x': 1&#125;"</span>);</span><br><span class="line">obj.x; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li><p><code>JSON.stringify(obj);</code> 序列化</p>
</li>
<li><p><code>JSON.parse(&quot;{&#39;x&#39;: 1}&quot;)</code> 反序列化，注意属性是以””引起来</p>
</li>
<li><p>undefined 的属性不会被序列化出来</p>
</li>
<li><p>NaN或Infinity 则会被序列化成null</p>
</li>
<li><p>new Date() 则会序列化成UTC时间格式</p>
</li>
</ul>
<h3 id="8-2-自定义"><a href="#8-2-自定义" class="headerlink" title="8.2 自定义"></a>8.2 自定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	x: <span class="number">1</span>,</span><br><span class="line">	y: <span class="number">2</span>,</span><br><span class="line">	z: &#123;</span><br><span class="line">		o1: <span class="number">1</span>,</span><br><span class="line">		o2: <span class="number">2</span>,</span><br><span class="line">		toJSON: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.o1 + <span class="keyword">this</span>.o2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">// "&#123;"x":1,"y":2,"z":3&#125;"</span></span><br></pre></td></tr></table></figure>
<p>总结：自定义z属性，其中toJSON为固定写法，若不是toJSON则为<code>&quot;{&quot;x&quot;:1,&quot;y&quot;:2,&quot;z&quot;:{&quot;o1&quot;:1,&quot;o2&quot;:2}}&quot;</code></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之三 - 语法]]></title>
      <url>https://lucius0.github.io/2016/08/08/archivers/javascript-statement/</url>
      <content type="html"><![CDATA[<h2 id="1、block"><a href="#1、block" class="headerlink" title="1、block"></a>1、block</h2><p>一般就是{}包括起来的代码块，注意的是，js没有块作用域，但是有函数作用域，全局作用域。</p>
<h2 id="2、var"><a href="#2、var" class="headerlink" title="2、var"></a>2、var</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b = <span class="number">1</span>; <span class="comment">// 相当于创建了b为全局作用域，解决方法：var a = 1, b = 1</span></span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// "undefined"</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">// "number" b为全局变量</span></span><br></pre></td></tr></table></figure>
<h2 id="3、try-catch"><a href="#3、try-catch" class="headerlink" title="3、try catch"></a>3、try catch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="string">"test"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(ex); <span class="comment">// "test"</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"finally"</span>); <span class="comment">// finally</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、function"><a href="#4、function" class="headerlink" title="4、function"></a>4、function</h2><p><code>function fd() { // do something }; // 函数声明</code></p>
<p><code>var fe = function { // do something }; // 函数表达式</code></p>
<p>区别：函数声明可以在声明前调用，且无报错；而函数表达式不可以在声明前调用，有TypeError </p>
<h2 id="5、for…in"><a href="#5、for…in" class="headerlink" title="5、for…in"></a>5、for…in</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(p <span class="keyword">in</span> obj) &#123;</span><br><span class="line">	<span class="comment">// 获取obj的key值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有几点需要注意：</p>
<ul>
<li>顺序不确定</li>
<li>enumerable为false时不显示</li>
<li>for…in 对象属性受到原型链的影响</li>
</ul>
<h2 id="6、严格模式"><a href="#6、严格模式" class="headerlink" title="6、严格模式"></a>6、严格模式</h2><p>严格模式是一种特殊的执行模式，它修复了部分语言上的不足，提供更强的错误检查，并增强安全性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// ps：ie 不认该模式，会自动忽略严格模式</span></span><br><span class="line">	<span class="comment">// 方法func按照严格模式执行</span></span><br><span class="line"><span class="meta">	"use strict"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="meta">"use strict"</span> <span class="comment">// 按照严格模式来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>严格模式：</p>
<ul>
<li>不允许使用with(SyntaxError);</li>
<li>不允许给未声明的变量赋值(RefrenceError);</li>
<li>arguments变为参数的静态变量；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常状态下</span></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// "use strict";</span></span><br><span class="line">	<span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// ps: 若有传参的话，则arguments[0]可以改变a的值，即a的值为100，</span></span><br><span class="line"><span class="comment">//     若不传参，即!function(a)&#123;&#125;();则无论是否有arguments的赋值，a都是为undefined</span></span><br><span class="line"><span class="comment">// 严格模式：</span></span><br><span class="line"><span class="comment">// 		1) 值传递：传参则1，无传参则undefined</span></span><br><span class="line"><span class="comment">//		2) 址传递：若在无传参的情况下赋值则会报错</span></span><br></pre></td></tr></table></figure>
<ul>
<li>严格模式下删除形参会报错(1.configurable为true则报SyntaxError；2.configurable为false则报TypeError)；</li>
<li>对象字面量属性重复报错。<code>var obj = {x:1, x:2}; // SyntaxError</code></li>
<li>禁止八进制字面量 <code>console.log(0123); //SyntaxError</code></li>
<li>eval, arguments变为关键字，不能作为变量、函数名，若违反则报SyntaxError </li>
<li>eval独立作用域</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">eval</span>(<span class="string">"val evalValue = 2;"</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> evalValue);<span class="comment">//number</span></span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">	"use strict"</span>;</span><br><span class="line">	<span class="built_in">eval</span>(<span class="string">"var evalValue = 2;"</span>);</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> evalValue);<span class="comment">//undefined，原因是eval独立作用域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>严格模式总结：</strong></p>
<ol>
<li>不允许使用with；</li>
<li>所有变量必须声明，赋值给未声明的变量报错，而不是隐式创建全局变量；</li>
<li>eval中的代码不能创建eval所在的作用域变量、函数，而是为eval单独创建一个单独的作用域，并在eval返回时废弃；</li>
<li>函数中的特殊对象arguments是静态副本，而不像非严格模式那样，修改arguments或修改形参会相互影响；</li>
<li>删除configurable为false会报错，而不是选择忽略；</li>
<li>禁止八进制字面量；</li>
<li>eval、arguments为关键字，不能作为变量名或函数名；</li>
<li>一般函数的调用(不是对象方法的调用，也不是用apply/call/bind等修改this指向)，this指向null而不是全局对象；</li>
<li>若使用apply/call，当传入null或者undefined时，this指向null或undefined而不是全局对象；</li>
<li>试图修改不可写属性(writable=false)，在不可扩展的对象上添加属性时报TypeError，而不是忽略；</li>
<li>arguments.caller、arguments.callee被禁用</li>
</ol>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之一 - 数据类型]]></title>
      <url>https://lucius0.github.io/2016/08/07/archivers/javascript-data-types/</url>
      <content type="html"><![CDATA[<p>以下笔记是观看<a href="http://www.imooc.com/view/277" target="_blank" rel="noopener">《深入浅出javascript》</a>所记下的。</p>
<p>javascript 因为是弱类型，所以声明类型可以省略</p>
<h2 id="1-六种基本类型"><a href="#1-六种基本类型" class="headerlink" title="1. 六种基本类型"></a>1. <strong>六种基本类型</strong></h2><p>   基础类型：number、string、boolean、null、undefined</p>
<p>   对象类型：object(Function、Array、Date)</p>
<h2 id="2-隐式转换"><a href="#2-隐式转换" class="headerlink" title="2. 隐式转换"></a>2. <strong>隐式转换</strong></h2><p>   (“num” - 0) -&gt; number; (num + “”) -&gt; string</p>
<ul>
<li><p>等于(会发生隐式转换)</p>
<p>   true：”1.23” == 1.23；0 == false；null == undefined；new Object() == new Object()；[1,2] == [1,2]；new String(“hi”) == “hi”</p>
</li>
<li><p>严格等于(会判断两边的类型，类型不同则为false，反之判断值是否相同)</p>
<p>   true：null === null；undefined === undefined；</p>
<p>   false：NaN === NaN；NaN == NaN；null === undefined；new Object() === new Object()</p>
</li>
</ul>
<h2 id="3-包装对象"><a href="#3-包装对象" class="headerlink" title="3. 包装对象"></a>3. <strong>包装对象</strong></h2><p>   <code>console.log(&quot;string&quot;)</code>跟<code>console.log(new String(&quot;string&quot;))</code>是不同的。</p>
<p>   <code>var a = &quot;string&quot;; console.log(a.length); // 6</code>即表明在访问属性的时候会将a临时封装成对象，但访问完之后，临时对象也会被销毁。<code>a.t = 10;</code>封装a的临时包装对象，赋值结束后，临时对象会被销毁。<code>console.log(a.t);//undefined</code>临时对象被销毁了。</p>
<h2 id="4-类型检测"><a href="#4-类型检测" class="headerlink" title="4. 类型检测"></a>4. <strong>类型检测</strong></h2><pre><code>typeof、instanceof、Object.prototype.toString
</code></pre><ul>
<li><p>typeof</p>
<p>   typeof 100 “number”、typeof true “boolean”、typeof function “function”、typeof undefined “undefined”</p>
<p>   typeof new Object() “object”、typeof[1,2] “object”、typeof NaN “number”、typeof null “object”(注意不是null，而是object)</p>
</li>
<li><p>instanceof(基于原型链判断的操作符，可以判断是否为具体的类型)</p>
<p>   <strong>原理</strong>：<code>object instanceof Object</code>左边的操作数的对象的原型链上是否有右边构造函数的prototype属性</p>
<p>   <code>[1,2] instanceof Array &quot;true&quot;</code>、<code>new Object() instanceof Array &quot;false&quot;</code></p>
<p>   <strong>注意</strong>：不同window或iframe间的对象类型检测不能使用instanceof</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> Person(); <span class="comment">// Person</span></span><br><span class="line">Student.prototype.construtor = Student; <span class="comment">// function Student()&#123;&#125;</span></span><br><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Student();</span><br><span class="line">o <span class="keyword">instanceof</span> Student; <span class="comment">// true</span></span><br><span class="line">o <span class="keyword">instanceof</span> Person; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> Person();</span><br><span class="line">oo <span class="keyword">instanceof</span> Person; <span class="comment">// true</span></span><br><span class="line">oo <span class="keyword">instanceof</span> Student; <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Object.prototype.toString</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.apply([]); <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.apply(<span class="literal">null</span>); <span class="comment">// [object Null]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.apply(<span class="literal">undefined</span>); <span class="comment">// [object Undefined]</span></span><br></pre></td></tr></table></figure>
<p> <strong>注意</strong>：IE/6/7/8 <code>Object.prototype.toString.apply(null); // [object Object]</code></p>
<p> <strong>总结：</strong> typeof 适合基本类型及function检测，遇到null失效；Class通过{}.toString拿到，适合内置对象和基本类型，遇到null和undefined失效(IE 6/7/8返回[object Object])；instanceof适用自定义对象，也可以用来检测原生对象，在不同iframe和window间检测时失效。<br> <!-- ![](/images/javascript/JavaScript-data-types-01.png) --></p>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之二 - 表达式]]></title>
      <url>https://lucius0.github.io/2016/08/07/archivers/javascript-expression/</url>
      <content type="html"><![CDATA[<h2 id="1-delete"><a href="#1-delete" class="headerlink" title="1. delete"></a>1. <strong>delete</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</span><br><span class="line">obj.x; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">delete</span> obj.x;</span><br><span class="line">obj.x; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj1, <span class="string">"x"</span>, &#123;</span><br><span class="line">	configurable: <span class="literal">false</span>, <span class="comment">// configurable为false表示该值无法删除</span></span><br><span class="line">	value: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">delete</span> obj1.x; <span class="comment">// false</span></span><br><span class="line">obj1.x; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<h2 id="2-in"><a href="#2-in" class="headerlink" title="2. in"></a>2. <strong>in</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.x = <span class="number">1</span>; <span class="comment">//全局变量</span></span><br><span class="line"><span class="string">"x"</span> <span class="keyword">in</span> <span class="built_in">window</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="3-new"><a href="#3-new" class="headerlink" title="3. new"></a>3. <strong>new</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">Foo.prototype.x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo();</span><br><span class="line">obj.x; <span class="comment">// 1</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// false</span></span><br><span class="line">obj.__proto__.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="4-this"><a href="#4-this" class="headerlink" title="4. this"></a>4. <strong>this</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>; <span class="comment">// window</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;&#125;;</span><br><span class="line">obj.func(); <span class="comment">// obj</span></span><br></pre></td></tr></table></figure>
<h2 id="5-void"><a href="#5-void" class="headerlink" title="5. void"></a>5. <strong>void</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="number">0</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">void</span> (<span class="number">0</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> front-end </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搬进jekyll]]></title>
      <url>https://lucius0.github.io/2016/08/06/archivers/move-to-jekyll/</url>
      <content type="html"><![CDATA[<p>经过几个下班的时间，终于把jekyll捣弄好了。期间感谢以下几位博客的教程<a href="http://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="noopener">ezlippi</a>以及<a href="http://blog.csdn.net/dliyuedong/article/details/46848155" target="_blank" rel="noopener">李跃东</a>，还有一些查找问题的过程中忘记存档下来的博主。</p>
<p><strong>以下记录以下我遇到的问题：</strong></p>
<ol>
<li><p>git的使用跟ruby的安装请参考<a href="http://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="noopener">ezlippi</a>，但是在安装jekyll的时候，下载速度会很慢以至于经常失败，大家可以使用<a href="https://ruby.taobao.org/" target="_blank" rel="noopener">淘宝的镜像</a>或者<a href="http://gems.ruby-china.org/" target="_blank" rel="noopener">Ruby China的镜像</a>(推荐)。在使用镜像安装之前会先卸载自带的镜像<br><code>--remove https://rubygems.org/</code>，但是在添加新的镜像的时候会报找不到该新镜像的错误，一旦有这个问题的解决方法就是到<code>user/your account/.gemrc</code> 将sources的值改为新镜像地址就可以了。 </p>
</li>
<li><p>jekyll 3.2.0有路径查找错误的bug。我是退回到3.1.6就可以了。官方在3.2.1已经修复。若有问题，可以<br><code>gem install -v 3.1.6 jekyll -V</code> 来安装3.1.6版本。</p>
</li>
<li><p><a href="http://jekyllcn.com/" target="_blank" rel="noopener">jekyllcn</a>是一个很好的中文官方文档，大家可以参考。</p>
</li>
<li><p>评论我是用多说的，只要去多说官网创建一个管理站点就可以了，详细大家可以自行搜索。</p>
</li>
<li><p>站内搜索可以参考<a href="http://blog.csdn.net/dliyuedong/article/details/46848155" target="_blank" rel="noopener">李跃东</a>。</p>
</li>
</ol>
<p>以上是我的分享，jekyll是我从WordPress搬过来之后感觉很快很爽的一个静态博客网站，希望大家enjoy it！</p>
]]></content>
      
        <categories>
            
            <category> jekyll </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jekyll </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>https://lucius0.github.io/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML>
<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=utf-8;">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="robots" content="all">
  <meta name="robots" content="index,follow">
</head>
<body>

<script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页">
</script>

</body>
</html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>https://lucius0.github.io/about/index.html</url>
      <content type="html"><![CDATA[<h1>WElCOME</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>https://lucius0.github.io/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>https://lucius0.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
