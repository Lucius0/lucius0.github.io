<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[关于html元素的尺寸以及位置的问题]]></title>
      <url>https://lucius0.github.io/2017/06/01//archivers/html-element-dimensions-and-position/</url>
      <content type="html"><![CDATA[<h2 id="Position-pageX-clientX-screenX-offsetX"><a href="#Position-pageX-clientX-screenX-offsetX" class="headerlink" title="Position (pageX/clientX/screenX/offsetX)"></a>Position (pageX/clientX/screenX/offsetX)</h2><h3 id="pageX-pageY"><a href="#pageX-pageY" class="headerlink" title="pageX/pageY"></a>pageX/pageY</h3><p>鼠标相对于整个页面的X/Y坐标。如页宽1000px，页高10000px，那么pageX最大值则为1000px，pageY则为10000px。</p>
<h3 id="clientX-clientY"><a href="#clientX-clientY" class="headerlink" title="clientX/clientY"></a>clientX/clientY</h3><p>事件发生时鼠标在浏览器内容区域的X/Y坐标（不包含滚动条）。即可视区域。(放大缩小也会改变这个值，而且值得注意的是，IE的最小值不是0而是2）</p>
<h3 id="screenX-screenY"><a href="#screenX-screenY" class="headerlink" title="screenX/screenY"></a>screenX/screenY</h3><p>鼠标在屏幕上的坐标。screenX,screenY的最大值不会超过屏幕分辨率。</p>
<h3 id="offsetX-offsetY"><a href="#offsetX-offsetY" class="headerlink" title="offsetX/offsetY"></a>offsetX/offsetY</h3><p>鼠标相对于事件源元素（srcElement）的X,Y坐标，只有IE事件有这2个属性，标准事件没有对应的属性。</p>
<h2 id="Dimensions-offsetWidth-clientWidth-scrollWidth"><a href="#Dimensions-offsetWidth-clientWidth-scrollWidth" class="headerlink" title="Dimensions(offsetWidth/clientWidth/scrollWidth)"></a>Dimensions(offsetWidth/clientWidth/scrollWidth)</h2><p>CSS 盒模型是相当复杂的，特别是在滚动内容的时候。当浏览器使用你给的css样式来绘制盒模型时，那如果你只有css，用js来确定所有的尺寸则不是那么的直截了当。</p>
<p>这就是为什么为了你的使用方便，每个元素都拥有6种DOM属性：<code>offsetWidth</code>，<code>offsetHeight</code>，<code>clientWidth</code>，<code>clientHeight</code>，<code>scrollWidth</code>，<code>scrollHeight</code>。这些表示当前视图布局的属性是不能修改的，即只读，并且还全都是整数（因此    很有可能会受到四舍五入的误差影响）</p>
<p>让我们来详细的了解一下：</p>
<ul>
<li><p><code>offsetWidth</code>，<code>offsetHeight</code>：该视图盒子包含了所有的边界大小(border)。假如该元素为<code>display: block</code>，我们还可以通过<code>width/height</code> + <code>paddings</code> + <code>borders</code>来计算出该元素的<code>offsetWidth/offsetHeight</code>。</p>
</li>
<li><p><code>clientWidth</code>，<code>clientHeight</code>：该盒子的视觉部分，不仅不包括边界(border)，同时也不包括滚动条(scroll)，但是包括内边距(padding)。不能直接的通过CSS来计算，依赖于系统滚动条的尺寸。</p>
</li>
<li><p><code>scrollWidth</code>，<code>scrollHeight</code>：所有盒子的内容尺寸，包括溢出滚动区域的隐藏部分。同样也是不能直接通过CSS计算，依赖于内容部分。</p>
</li>
</ul>
<p><img src="/images/javascript/js-29.png" alt=""></p>
<p>尝试一下：<a href="http://jsfiddle.net/y8Y32/25/" target="_blank" rel="external">jsFiddle</a></p>
<p>由于<code>clientWidht</code>把 scroll bar 的宽度也计算在哪，我们可以通过以下公式计算出滚动条的宽度</p>
<p><code>scrollbarWidth = offsetWidth - clientWidth - getComputedStyle().borderLeftWidth - getComputedStyle().borderRightWidth</code></p>
<p>不幸的是，我们可能会受到四舍五入的误差影响，因为<code>offsetWidth</code>和<code>clientWidth</code>总是整数，而实际的大小可能是小数，缩放级别不是1。</p>
<p>注意这个：</p>
<p><code>scrollbarWidth = getComputedStyle().width + getComputedStyle().paddingLeft + getComputedStyle().paddingRight - clientWidth</code></p>
<p>这个在chrome中无法可靠的运行，因为chrome返回来的<code>width</code>已经减去了scrollbar的部分（此外，chrome还会将paddingBottom填充到滚动内容的底部，但是其他的浏览器则不会这样）。    </p>
<h2 id="获取页面元素的位置"><a href="#获取页面元素的位置" class="headerlink" title="获取页面元素的位置"></a>获取页面元素的位置</h2><p>相对位置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> X = <span class="keyword">this</span>.getBoundingClientRect().left;</div><div class="line"><span class="keyword">var</span> Y = <span class="keyword">this</span>.getBoundingClientRect().top;</div></pre></td></tr></table></figure>
<p>绝对位置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> X = <span class="keyword">this</span>.getBoundingClientRect().left + <span class="built_in">document</span>.documentElement.scrollLeft;</div><div class="line"><span class="keyword">var</span> Y = <span class="keyword">this</span>.getBoundingClientRect().top + <span class="built_in">document</span>.documentElement.scrollTop;</div></pre></td></tr></table></figure>
<p>参考：</p>
<ul>
<li><p><a href="http://www.cnblogs.com/xesam/archive/2011/12/08/2280509.html" target="_blank" rel="external">http://www.cnblogs.com/xesam/archive/2011/12/08/2280509.html</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" target="_blank" rel="external">Understanding offsetWidth, clientWidth, scrollWidth and -Height, respectively</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[streaming media]]></title>
      <url>https://lucius0.github.io/2017/05/21//archivers/streaming-media/</url>
      <content type="html"><![CDATA[<blockquote>
<p>所谓流媒体是指采用流式传输的方式在Internet播放的媒体格式。 流媒体又叫流式媒体，它是指商家用一个视频传送服务器把节目当成数据包发出，传送到网络上。用户通过解压设备对这些数据进行解压后，节目就会像发送前那样显示出来。 – 来自《百度百科》</p>
</blockquote>
<p>简单来说，流媒体跟媒体文件的区别就在于，前者是需要服务器支持的，如RTSP、http流媒体服务器，通过解码，然后逐包的发送给播放器进行播放，<strong>边下边放</strong>，而后者则是不依赖网络，也不依赖服务器，只要有对应解码器的播放器就可以了。</p>
<h2 id="流式传输"><a href="#流式传输" class="headerlink" title="流式传输"></a>流式传输</h2><p>流媒体指在Internet/Intranet中使用流式传输技术的连续时基媒体，如：音频、视频或多媒体文件。流式媒体在播放前并不下载整个文件，只将开始部分内容存入内存，流式媒体的数据流随时传送随时播放，只是在开始时有一些延迟。流媒体实现的关键技术就是流式传输。</p>
<h2 id="顺序流式传输"><a href="#顺序流式传输" class="headerlink" title="顺序流式传输"></a>顺序流式传输</h2><p>顺序流式传输是顺序下载，在下载文件的同时用户可观看在线媒体，在给定时刻，用户只能观看已下载的那部分，而不能跳到还未下载的前头部分，顺序流式传输不象实时流式传输在传输期间根据用户连接的速度做调整。由于标准的HTTP服务器可发送这种形式的文件，也不需要其他特殊协议，它经常被称为HTTP流式传输。顺序流式传输不适合长片段和有随机访问要求的视频。</p>
<h2 id="实时流式传输"><a href="#实时流式传输" class="headerlink" title="实时流式传输"></a>实时流式传输</h2><p>实时流式传输指保证媒体信号带宽与网络连接配匹，使媒体可被实时观看到。实时流与HTTP流式传输不同，他需要专用的流媒体服务器与传输协议。实时流式传输总是实时传送，特别适合现场事件，也支持随机访问，用户可快进或后退以观看前面或后面的内容。这样会很依赖网络环境，一旦网络拥挤则会造成画像信息丢失或者图像质量差。实时流式传输还需要特殊网络协议，如：RTSP (Realtime Streaming Protocol)或MMS (Microsoft Media Server)。这些协议在有防火墙时有时会出现问题，导致用户不能看到一些地点的实时内容。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先，多媒体数据进行预处理才能适合流式传输，这是因为目前的网络带宽对多媒体巨大的数据流量来说还显得远远不够。预处理主要包括两方面：一是降低质量；二是采用先进高效的压缩算法。</p>
<p>其次，流式传输的实现需要缓存。这是因为Internet以包传输为基础进行连续的异步传输，对一个实时A/V源或存储的A/V文件，在传输中它们要被分解为许多包，由于网络是动态变化的，每个包选择的路由可能不尽相同，故到达客户端的时间延迟也就不等，甚至先发的数据包还有可能后到。为此，使用缓存系统来弥补延迟和抖动的影响，并保证数据包的顺序正确，从而使媒体数据能连续输出，而不会因为网络暂时阻塞使播放出现停顿。通常高速缓存所需容量并不大。这是因为高速缓存使用环行链表结构来存储数据：通过丢弃已经播放的内容，”流”可以重新利用空出的高速缓存空间来缓存后续尚未播放的内容。</p>
<p>再次，流式传输的实现需要合适的传输协议。WWW技术是以HTTP协议为基础的，而HTTP又建立在TCP协议基础之上。由于TCP需要较多的开销，故不太适合传输实时数据，在流式传输的实现方案中，一般采用HTTP/TCP来传输控制信息，而用RTP/UDP来传输实时声音数据。</p>
<h2 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h2><table>
<thead>
<tr>
<th>名称</th>
<th>推出机构</th>
<th>传输层协议</th>
<th>客户端</th>
</tr>
</thead>
<tbody>
<tr>
<td>RTSP+RTP</td>
<td>IETF</td>
<td>TCP+UDP</td>
<td>VLC, WMP</td>
</tr>
<tr>
<td>RTMP</td>
<td>Adobe Inc.</td>
<td>TCP</td>
<td>Flash</td>
</tr>
<tr>
<td>RTMFP</td>
<td>Adobe Inc.</td>
<td>UDP</td>
<td>Flash</td>
</tr>
<tr>
<td>MMS</td>
<td>Microsoft Inc.</td>
<td>TCP/UDP</td>
<td>WMP</td>
</tr>
<tr>
<td>HTTP</td>
<td>WWW+IETF</td>
<td>TCP</td>
<td>Flash</td>
</tr>
<tr>
<td>HLS</td>
<td>Apple</td>
<td>TCP</td>
<td>IOS/部分Android</td>
</tr>
</tbody>
</table>
<h2 id="执行步骤"><a href="#执行步骤" class="headerlink" title="执行步骤"></a>执行步骤</h2><ul>
<li><p>在网络上观看视频，则需要：解协议，解封装，解码视音频，视音频同步。</p>
</li>
<li><p>在本地上观看视频，则需要：解封装，解码视音频，视音频同步。</p>
</li>
</ul>
<p><strong>参考资料：</strong></p>
<ul>
<li><p><a href="http://baike.baidu.com/link?url=KmhsT7Th2RZN1I-eCn2at0u71EvDsVbNBe7Xy7uqPzQPJYEJarUsPpd7_N7JT1D3DB5XuPYAXd_PF1k4aprfRGWx6OCDHcRXmRW1JFaTSJSH60pj1pwefMWaCW6-ji4i" target="_blank" rel="external">百度百科</a></p>
</li>
<li><p><a href="http://www.kuqin.com/stream-media/20070904/864.html" target="_blank" rel="external">http://www.kuqin.com/stream-media/20070904/864.html</a></p>
</li>
<li><p><a href="https://github.com/ossrs/srs/wiki/v1_CN_RTMP.PK.HTTP" target="_blank" rel="external">RTMP VS HTTP</a></p>
</li>
<li><p><a href="http://blog.ucloud.cn/archives/author/usmd" target="_blank" rel="external">关于直播，所有的技术细节都在这里了</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[axio-form data问题]]></title>
      <url>https://lucius0.github.io/2017/05/16//archivers/axio-form-data/</url>
      <content type="html"><![CDATA[<p>今日在用<code>axio</code>请求数据时，遇到一个问题，即<code>post</code>时，data为对象，但是在请求时的请求数据一直是<code>request payload</code>，而不是我想要的<code>form data</code>，并且请求体为表单形式，即<code>a=1&amp;b=2&amp;c=3</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">axios(&#123;</div><div class="line">	<span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;API.URL&#125;</span>`</span>,</div><div class="line">    <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">    data,</div><div class="line">    <span class="attr">responseType</span>: <span class="string">'json'</span>,</div><div class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span></div><div class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;);</div></pre></td></tr></table></figure>
<p><img src="/images/javascript/js-25.jpeg" alt=""></p>
<p><img src="/images/javascript/js-26.jpeg" alt=""></p>
<p><strong>解决方案1：</strong></p>
<p>在node环境中可以使用<code>qs</code>模块的<code>qs.stringify(data)</code>来处理，即</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</div><div class="line">axios(&#123;</div><div class="line">	...</div><div class="line">	headers: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</div><div class="line">	<span class="attr">data</span>: qs.stringify(data)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>解决方案2：</strong></p>
<p>在非node环境下可以使用<code>axios</code>的一个请求配置项<code>transformRequest</code>，即</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">axios(&#123;</div><div class="line">  ...</div><div class="line">  headers: &#123; <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span> &#125;,</div><div class="line">  <span class="attr">transformRequest</span>: [<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> ret = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> it <span class="keyword">in</span> data) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(data, it)) &#123;</div><div class="line">        ret = <span class="string">`<span class="subst">$&#123;ret + <span class="built_in">encodeURIComponent</span>(it)&#125;</span>=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(data[it])&#125;</span>&amp;`</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">  &#125;],</div><div class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;);</div></pre></td></tr></table></figure>
<p><img src="/images/javascript/js-27.jpeg" alt=""></p>
<p><img src="/images/javascript/js-28.jpeg" alt=""></p>
<p><strong>总结：</strong></p>
<p><code>headers: { &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39; }</code>是将请求类型<code>request payload</code>转换成<code>form data</code>。而<code>qs</code>模块跟<code>transformRequest</code>则是将对象格式<code>{a: &#39;1&#39;, b: &#39;2&#39;, c: &#39;3&#39;}</code>转为表单格式<code>a=1&amp;b=2&amp;c=3</code>。</p>
<p>axios：<a href="https://www.awesomes.cn/repo/mzabriskie/axios" target="_blank" rel="external">https://www.awesomes.cn/repo/mzabriskie/axios</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 鼠标从不同方向移入移出判断]]></title>
      <url>https://lucius0.github.io/2017/05/08//archivers/mouse-direction/</url>
      <content type="html"><![CDATA[<p><img src="/images/workshop/004.gif" alt=""></p>
<h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>关于这个我在网上找到了答案，常见的解法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = (e.pageX - <span class="keyword">this</span>.offsetLeft - (w / <span class="number">2</span>)) * (w &gt; h ? (h / w) : <span class="number">1</span>); </div><div class="line"><span class="keyword">var</span> y = (e.pageY - <span class="keyword">this</span>.offsetTop - (h / <span class="number">2</span>)) * (h &gt; w ? (w / h) : <span class="number">1</span>); </div><div class="line"><span class="keyword">var</span> direction = <span class="built_in">Math</span>.round((((<span class="built_in">Math</span>.atan2(y, x) * (<span class="number">180</span> / <span class="built_in">Math</span>.PI)) + <span class="number">180</span>) / <span class="number">90</span>) + <span class="number">3</span>) % <span class="number">4</span>;</div><div class="line"></div><div class="line"><span class="comment">// e.pageX 			鼠标的x坐标</span></div><div class="line"><span class="comment">// this.offsetLeft 	移动的容器距离左边的位置，也可以说x坐标</span></div></pre></td></tr></table></figure>
<p>解题思路：</p>
<p><img src="/images/javascript/js-23.png" alt=""></p>
<p>1、主要是将这个问题化为角度来算；</p>
<p>2、我们将P设为原点<code>(this.offetLeft, this.offetTop)</code>，o设为圆心<code>（this.offsetLeft + (w / 2), this.offsetTop + (h / 2)）</code>；</p>
<p>3、鼠标移入该容器相对于圆心o的坐标为<code>（e.pageX - o.x, e.pageY - o.y）</code>，即上文的<code>(e.pageX - this.offsetLeft - (w / 2))</code>与<code>(e.pageY - this.offsetTop - (h / 2))</code>；</p>
<p>4、<code>(w &gt; h ? (h / w) : 1)</code>与<code>(h &gt; w ? (w / h) : 1)</code>的意思就是将<strong>矩形换算为正方形</strong>，例如有一个宽3x，高是x的矩形，相对原点P的右下角坐标就是{x:3x,y:1x}，换算成正方形，即坐标点为正方形的右下角，矩形的四个角即一一对一个正方形的四个角形成正方形ABCD；</p>
<p>5、<code>Math.atan2(x, y)</code>返回角度值，换算成弧度则为<code>((Math.atan2(y, x) * (180 / Math.PI))</code>，结果为(-180, 180)，加上180，就是(0, 360)。</p>
<p>6、除以90，即跟4一样道理，AoD，DoC，CoB，BoA都是90度角，目的就是将矩阵的角度跟方形的角度做个换算。</p>
<p>7、加3是因为想让计算的顺序为上，之前我们的角度区间是从右边开始，那么加3就会从上开始计算，也就是上，右，下，左的顺序；</p>
<p>8、Math.round以及4取模使得计算结果为0，1，2，3，为什么要这么做呢？Math.round使得坐标轴45度角划分四个象限，而4取模就可以知道鼠标移入移出是在计算过后的哪个象限了。</p>
<h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><p>根据斜率，转自<a href="http://www.cnblogs.com/lyzg/p/5689761.html" target="_blank" rel="external">http://www.cnblogs.com/lyzg/p/5689761.html</a></p>
<p><img src="/images/javascript/js-24.png" alt=""></p>
<p>1、上图以浏览器可视区域左上角为原点建立坐标系，坐标系与数学坐标系方向一致，往右表示x轴正方向，往下表示y轴负方向；</p>
<p>2、图中点(x1,y1)代表元素框左上角，(x4,y4)代表元素框右下角，(x0,y0)代表元素框的中心点，（x,y）表示鼠标移入移出时与元素框的边的交点；</p>
<p>3、根据下面的公式：(y2 - y1) / (x2 - x1)</p>
<p>可得(x1,y1)与（x4,y4)这条对角线的斜率为 k = (y1-y4)/(x1-x4)。由于对称性，元素框另外一条对角线的斜率一定是 -k。</p>
<p>同时由于(x1,y1)与（x4,y4)这条对角线在坐标系中一定经过的是第二和第四象限，所以k肯定是负值，而 -k一定是正值。</p>
<p>4、根据同样的公式，当鼠标移入移出时的瞬间，与元素边框的交点与元素框中心点的斜率 k1 = (y-y0)/(x-x0)。</p>
<p>5、由图可知，当 k &lt; k1 &lt; –k时，鼠标一定是从元素的左右方向移动的；反之，一定是从上下方向移动的。</p>
<p>当鼠标是从左右方向移动时，如果x &gt; x0，那么鼠标就是从右边移动的，反之就是从左边移动的；</p>
<p>当鼠标是从上下方向移动时，如果y &gt; y0时，那么鼠标就是从上边移动的，反之就是从下边移动的。</p>
<p>注意：坐标系中所有的y值都是负的。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这个模块完成鼠标方向判断的功能</span></div><div class="line"><span class="keyword">var</span> MouseDirection = <span class="function"><span class="keyword">function</span> (<span class="params">element, opts</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> $element = $(element);</div><div class="line"></div><div class="line">    <span class="comment">//enter leave代表鼠标移入移出时的回调</span></div><div class="line">    opts = $.extend(&#123;&#125;, &#123;</div><div class="line">        <span class="attr">enter</span>: $.noop,</div><div class="line">        <span class="attr">leave</span>: $.noop</div><div class="line">    &#125;, opts || &#123;&#125;);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> dirs = [<span class="string">'top'</span>, <span class="string">'right'</span>, <span class="string">'bottom'</span>, <span class="string">'left'</span>];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span> (<span class="params">element, e</span>) </span>&#123;</div><div class="line">        <span class="comment">/*以浏览器可视区域的左上角建立坐标系*/</span></div><div class="line"></div><div class="line">        <span class="comment">//表示左上角和右下角及中心点坐标</span></div><div class="line">        <span class="keyword">var</span> x1, y1, x4, y4, x0, y0;</div><div class="line"></div><div class="line">        <span class="comment">//表示左上角和右下角的对角线斜率</span></div><div class="line">        <span class="keyword">var</span> k;</div><div class="line"></div><div class="line">        <span class="comment">//用getBoundingClientRect比较省事，而且它的兼容性还不错</span></div><div class="line">        <span class="keyword">var</span> rect = element.getBoundingClientRect();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!rect.width) &#123;</div><div class="line">            rect.width = rect.right - rect.left;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!rect.height) &#123;</div><div class="line">            rect.height = rect.bottom - rect.top;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//求各个点坐标 注意y坐标应该转换为负值，因为浏览器可视区域左上角为(0,0)，整个可视区域属于第四象限</span></div><div class="line">        x1 = rect.left;</div><div class="line">        y1 = -rect.top;</div><div class="line"></div><div class="line">        x4 = rect.left + rect.width;</div><div class="line">        y4 = -(rect.top + rect.height);</div><div class="line"></div><div class="line">        x0 = rect.left + rect.width / <span class="number">2</span>;</div><div class="line">        y0 = -(rect.top + rect.height / <span class="number">2</span>);</div><div class="line"></div><div class="line">        <span class="comment">//矩形不够大，不考虑</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(x1 - x4) &lt; <span class="number">0.0001</span>) <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line"></div><div class="line">        <span class="comment">//计算对角线斜率</span></div><div class="line">        k = (y1 - y4) / (x1 - x4);</div><div class="line"></div><div class="line">        <span class="keyword">var</span> range = [k, -k];</div><div class="line"></div><div class="line">        <span class="comment">//表示鼠标当前位置的点坐标</span></div><div class="line">        <span class="keyword">var</span> x, y;</div><div class="line"></div><div class="line">        x = e.clientX;</div><div class="line">        y = -e.clientY;</div><div class="line"></div><div class="line">        <span class="comment">//表示鼠标当前位置的点与元素中心点连线的斜率</span></div><div class="line">        <span class="keyword">var</span> kk;</div><div class="line"></div><div class="line">        kk = (y - y0) / (x - x0);</div><div class="line"></div><div class="line">        <span class="comment">//如果斜率在range范围内，则鼠标是从左右方向移入移出的</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">isFinite</span>(kk) &amp;&amp; range[<span class="number">0</span>] &lt; kk &amp;&amp; kk &lt; range[<span class="number">1</span>]) &#123;</div><div class="line">            <span class="comment">//根据x与x0判断左右</span></div><div class="line">            <span class="keyword">return</span> x &gt; x0 ? <span class="number">1</span> : <span class="number">3</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//根据y与y0判断上下</span></div><div class="line">            <span class="keyword">return</span> y &gt; y0 ? <span class="number">0</span> : <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    $element.on(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> r = calculate(<span class="keyword">this</span>, e);</div><div class="line">        opts.enter($element, dirs[r]);</div><div class="line">    &#125;).on(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> r = calculate(<span class="keyword">this</span>, e);</div><div class="line">        opts.leave($element, dirs[r]);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>总结：我觉得第二种方法很简单更能理解，只是在实现起来代码量会更多点。</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[100-days-of-css]]></title>
      <url>https://lucius0.github.io/2017/05/05//archivers/100-days-of-css/</url>
      <content type="html"><![CDATA[<h2 id="001-登录界面"><a href="#001-登录界面" class="headerlink" title="001 登录界面"></a>001 登录界面</h2><p><img src="/images/workshop/001.jpeg" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-001/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="002-ofo共享单车输入框"><a href="#002-ofo共享单车输入框" class="headerlink" title="002 ofo共享单车输入框"></a>002 ofo共享单车输入框</h2><p><img src="/images/workshop/002.jpeg" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-002/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="003-账单分期"><a href="#003-账单分期" class="headerlink" title="003 账单分期"></a>003 账单分期</h2><p><img src="/images/workshop/003.jpeg" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-003/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="004-不同方向hover效果"><a href="#004-不同方向hover效果" class="headerlink" title="004 不同方向hover效果"></a>004 不同方向hover效果</h2><p><img src="/images/workshop/004.gif" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-004/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="005-canvas-圆环倒计时"><a href="#005-canvas-圆环倒计时" class="headerlink" title="005 canvas 圆环倒计时"></a>005 canvas 圆环倒计时</h2><p><img src="/images/workshop/005.gif" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-005/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="006-时间线"><a href="#006-时间线" class="headerlink" title="006 时间线"></a>006 时间线</h2><p><img src="/images/workshop/006.gif" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-006/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="007-刮刮乐"><a href="#007-刮刮乐" class="headerlink" title="007 刮刮乐"></a>007 刮刮乐</h2><p><img src="/images/workshop/007.gif" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-007/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="008-圆形菜单"><a href="#008-圆形菜单" class="headerlink" title="008 圆形菜单"></a>008 圆形菜单</h2><p><img src="/images/workshop/008.gif" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-008/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="009-丝带效果"><a href="#009-丝带效果" class="headerlink" title="009 丝带效果"></a>009 丝带效果</h2><p><img src="/images/workshop/009.png" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-009/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="010-鼠标悬停滑出动画"><a href="#010-鼠标悬停滑出动画" class="headerlink" title="010 鼠标悬停滑出动画"></a>010 鼠标悬停滑出动画</h2><p><img src="/images/workshop/010.gif" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-010/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="011-风琴效果"><a href="#011-风琴效果" class="headerlink" title="011 风琴效果"></a>011 风琴效果</h2><p><img src="/images/workshop/011.gif" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-011/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="012-进度条"><a href="#012-进度条" class="headerlink" title="012 进度条"></a>012 进度条</h2><p><img src="/images/workshop/012.gif" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-012/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<h2 id="013-简易播放器"><a href="#013-简易播放器" class="headerlink" title="013 简易播放器"></a>013 简易播放器</h2><p><img src="/images/workshop/013.jpeg" alt=""></p>
<p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-013/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[h5播放器学习]]></title>
      <url>https://lucius0.github.io/2017/05/05//archivers/h5-video-learning/</url>
      <content type="html"><![CDATA[<p><code>video</code>的概念在h5已经是存在了很久了，但是等到小视频、短视频元年的大火大热之后，国内才慢慢的进入淘汰flash播放器加紧脚本学习h5播放器。然而在国外（YouTube）早已用上了h5播放器，因此我也不能落后，得加紧时间学习，不然就没饭吃了。</p>
<p>好了，在了解html5播放器的知识之前，我们需要了解一下以下的前置知识，当作扩充一下自己的知识库。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="封装格式"><a href="#封装格式" class="headerlink" title="封装格式"></a>封装格式</h3><p>将一些<strong>视频信息</strong>，<strong>音频信息</strong>，<strong>时间码</strong>，<strong>编码器信息</strong>，打包成一个文件，便于管理以及编辑，常见的有AVI，RMVB，MOV，MP4，FLV等。为什么要有这么多封装格式呢？可以想下为什么图片有那么多封装格式呢？如PNG，JPG，GIF等，道理是一个样的。</p>
<h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><p>简单来说，编码方式就是我们压缩或者解压音视频数据的一个算法。MPEG 2，MPEG 4，Prores 422，Prores 444，H.265 以及常用的 H.264。不同的编码方式会让视频呈现出不同的分辨率以及视频大小，封装格式以及编码方式都会影响视频的质量。</p>
<p>在每个影片容器中，音频和视频轨道都使用不同的编解码器来编码。编解码器决定了浏览器在播放时应该如何解码音频和视频。</p>
<h3 id="码率"><a href="#码率" class="headerlink" title="码率"></a>码率</h3><p>码率就是指视频或者音频每秒钟的数据量，单位是MBPS或者KBPS。码率越高视频就越清晰，但是码率同时会受分辨率和帧速率影响。</p>
<p>举个例子：</p>
<ul>
<li><p><em>一个视频分辨率为 1080P，码率为5MBPS</em> 会比 <em>一个视频分辨率为 4K，码率照样为5MBPS</em>的清晰。因为分辨率更高的同时，是需要高码率来做支撑的，也就是同码率的情况下，分辨率越高视频越不清晰。</p>
</li>
<li><p><em>一个视频帧速率为 30帧，码率为5MBPS</em> 会比 <em>一个视频帧速率为 60帧，码率照样为5MBPS</em>的清晰。因为帧速率更高的同时，是需要高码率来做支撑的，也就是同码率的情况下，帧速率越高视频越不清晰。</p>
</li>
</ul>
<p>码率分为：CBR（固定码率），VBR（可变码率）。</p>
<ul>
<li><p>CBR（固定码率）：指的是每一秒码率都是相同的。假如在网络观看视频且网速比较快的情况下，就不会出现卡顿的情况，但是，画面若比较单薄，画面信息比较少，突然颜色变丰富了，画面信息突然多了，那么这下子可能会出现模糊的情况。</p>
</li>
<li><p>VBR（可变码率）：指的是每一秒码率都是变化不固定的。可变码率会根据你视频当中画面的信息量，来自动调整码率，这样就不会出现突然颜色变丰富导致的模糊现象。但是，当我们观看的视频对网速有一定的要求，码率忽高忽低时，那么可能就会造成卡顿的情况。</p>
</li>
</ul>
<h3 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h3><p>指的是单位长度内，视频包含的像素数量。常见的有 1280 x 720，1920 x 1080，2560 x 1440（2K），4096 x 2304（4K）。</p>
<p><strong>小结：</strong></p>
<p>一个完整的视频大概会拥有<em>meta信息，视频编码器(H.264, MPEG 4)，音频编码器(AAC,OGG)，字幕，描述信息等</em></p>
<h2 id="Flash"><a href="#Flash" class="headerlink" title="Flash"></a>Flash</h2><p>在h5没有出来之前，市面上的播放器几乎都是Flash来播放视频的。最开始是使用<code>embed</code>的方式嵌入播放器，其会调用系统的原生播放器，如windows的media player，mac的quick time等。</p>
<p><code>embed</code>虽然只需要一行代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">"src/player.swf"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>但是它完全就像黑盒子，无法获取它里面的动态信息，甚至无法跟它交互。但是还可以用<code>object</code>的形式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span> <span class="attr">class</span>=<span class="string">"player"</span> <span class="attr">data</span>=<span class="string">"//static.hdslb.com/play.swf"</span> <span class="attr">width</span>=<span class="string">"950"</span> <span class="attr">height</span>=<span class="string">"482"</span> <span class="attr">id</span>=<span class="string">"player_placeholder"</span> <span class="attr">style</span>=<span class="string">"visibility: visible;"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"bgcolor"</span> <span class="attr">value</span>=<span class="string">"#ffffff"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowfullscreeninteractive"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowfullscreen"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"quality"</span> <span class="attr">value</span>=<span class="string">"high"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"allowscriptaccess"</span> <span class="attr">value</span>=<span class="string">"always"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"wmode"</span> <span class="attr">value</span>=<span class="string">"direct"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"flashvars"</span> <span class="attr">value</span>=<span class="string">"cid=17022717&amp;amp;aid=10303607&amp;amp;pre_ad=0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></div></pre></td></tr></table></figure>
<p>flash播放flv，是因为flash本身就内建了H.264，而h5则需要浏览器产商如chrome去支持，但是，要想让嵌入的代码发挥作用，浏览器必须安装相对应的插件，而且还版本合适。插件是在一个封闭的环境中运行，通过脚本无法修改或者操作视频内容。如果插件没有提供API，那么插件运行环境无异于文档中一个独立王国。</p>
<h2 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h2><p>先上demo代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"src/player.mp4"</span> <span class="attr">controls</span>&gt;</span></div><div class="line">	您的浏览器不支持 video 标签。</div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是目前<code>video</code>只支持的视频格式有：MP4(MPEG 4文件使用H264视频编解码器和AAC音频编解码器)，WebM(WebM文件使用VP8视频编解码器和Vorbis音频编解码器)，Ogg(Ogg文件使用Theoraship编解码器和Vorbis音频编解码器)，并且在不同浏览器上不同表现。实际上h5还可以支持m3u8，但m3u8是mac专有的视频格式，所以mac\ios下的浏览器都支持m3u8的播放，而其他浏览器则需要第三方支持解码。</p>
<h3 id="Browser-Support"><a href="#Browser-Support" class="headerlink" title="Browser Support"></a>Browser Support</h3><table>
<thead>
<tr>
<th>Browser</th>
<th>MP4</th>
<th>WebM</th>
<th>Ogg</th>
</tr>
</thead>
<tbody>
<tr>
<td>IE</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>Chrome</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Firefox</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Safari</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>Opera</td>
<td>YES(&gt;=25)</td>
<td>YES</td>
<td>YES</td>
</tr>
</tbody>
</table>
<p>注意：<code>video</code>可以添加多个source源来进行兼容适配，这样当第一个不兼容可以往下读取，同样也可以兼容flash播放器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"src/test.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"src/test.webm"</span> <span class="attr">type</span>=<span class="string">"video/webm"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">src</span>=<span class="string">"src/lyric.vtt"</span> <span class="attr">srclang</span>=<span class="string">"en"</span> <span class="attr">kind</span>=<span class="string">"subtitles"</span> <span class="attr">label</span>=<span class="string">"English"</span> <span class="attr">default</span>&gt;</span> <span class="comment">&lt;!-- 字幕 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">id</span>=<span class="string">"flowplayer"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"400"</span> <span class="attr">data</span>=<span class="string">"player.swf"</span> <span class="attr">type</span>=<span class="string">"application/x-shockwave-flash"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"movie"</span> <span class="attr">value</span>=<span class="string">"player.swf"</span> /&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"flashvars"</span> <span class="attr">value</span>=<span class="string">'config=&#123;"url":"src/test.mp4"&#125;'</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>您的浏览器不支持此视频<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">object</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Media-Type"><a href="#Media-Type" class="headerlink" title="Media Type"></a>Media Type</h3><table>
<thead>
<tr>
<th>File Format</th>
<th>Media Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>MP4</td>
<td>video/mp4</td>
</tr>
<tr>
<td>WebM</td>
<td>video/webm</td>
</tr>
<tr>
<td>Ogg</td>
<td>video/ogg</td>
</tr>
</tbody>
</table>
<h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>因为pc、android、ios存在差异性，在这里只罗列pc的事件</p>
<table>
<thead>
<tr>
<th>#</th>
<th>event(PC)</th>
<th>readyState</th>
<th>视频状态</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>loadstart</td>
<td>NOTHING</td>
<td>-</td>
</tr>
<tr>
<td>2</td>
<td>suspend</td>
<td>NOTHING</td>
<td>-</td>
</tr>
<tr>
<td>3</td>
<td>play</td>
<td>NOTHING</td>
<td>-</td>
</tr>
<tr>
<td>4</td>
<td>waiting</td>
<td>NOTHING</td>
<td>-</td>
</tr>
<tr>
<td>5</td>
<td>durationchange</td>
<td>METADATA</td>
<td>获取到视频长度</td>
</tr>
<tr>
<td>6</td>
<td>loadedmetadata</td>
<td>METADATA</td>
<td>获取到元数据</td>
</tr>
<tr>
<td>7</td>
<td>loadeddata</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>8</td>
<td>canplay</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>9</td>
<td>playing</td>
<td>ENOUGHDATA</td>
<td>开始播放</td>
</tr>
<tr>
<td>10</td>
<td>canplaythrough</td>
<td>ENOUGHDATA</td>
<td>可以流畅播放</td>
</tr>
<tr>
<td>11</td>
<td>progress</td>
<td>ENOUGHDATA</td>
<td>持续下载</td>
</tr>
<tr>
<td>12</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>播放进度变化</td>
</tr>
<tr>
<td>..</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>23</td>
<td>progress</td>
<td>ENOUGHDATA</td>
<td>下载完毕</td>
</tr>
<tr>
<td>24</td>
<td>suspend</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>25</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>继续播放中</td>
</tr>
<tr>
<td>..</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
<tr>
<td>48</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>49</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>50</td>
<td>seeking</td>
<td>METADATA</td>
<td>-</td>
</tr>
<tr>
<td>51</td>
<td>waiting</td>
<td>METADATA</td>
<td>-</td>
</tr>
<tr>
<td>52</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>53</td>
<td>seeked</td>
<td>ENOUGHDATA</td>
<td>播放完毕进度回到起点</td>
</tr>
<tr>
<td>54</td>
<td>canplay</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>55</td>
<td>playing</td>
<td>ENOUGHDATA</td>
<td>循环播放</td>
</tr>
<tr>
<td>56</td>
<td>canplaythrough</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>57</td>
<td>timeupdate</td>
<td>ENOUGHDATA</td>
<td>-</td>
</tr>
<tr>
<td>..</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><strong><a href="https://github.com/Lucius0/100-days-of-css/blob/master/lucius-013/index.html" target="_blank" rel="external">github ==&gt; </a></strong></p>
<p><strong>参考资料：</strong></p>
<ul>
<li><p><a href="http://ask.dcloud.net.cn/article/569" target="_blank" rel="external">http://ask.dcloud.net.cn/article/569</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000006461476" target="_blank" rel="external">https://segmentfault.com/a/1190000006461476</a></p>
</li>
<li><p><a href="https://www.w3schools.com/html/html5_video.asp" target="_blank" rel="external">https://www.w3schools.com/html/html5_video.asp</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/HTML5_video" target="_blank" rel="external">https://en.wikipedia.org/wiki/HTML5_video</a></p>
</li>
<li><p><a href="http://www.xuanfengge.com/html5-video-play.html" target="_blank" rel="external">http://www.xuanfengge.com/html5-video-play.html</a></p>
</li>
<li><p><a href="https://www.zhihu.com/question/20997688" target="_blank" rel="external">https://www.zhihu.com/question/20997688</a></p>
</li>
<li><p><a href="http://yanhaijing.com/html/2016/03/12/html5-video/" target="_blank" rel="external">http://yanhaijing.com/html/2016/03/12/html5-video/</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css常见的前端布局]]></title>
      <url>https://lucius0.github.io/2017/05/01//archivers/css-layouts/</url>
      <content type="html"><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="margin-定宽"><a href="#margin-定宽" class="headerlink" title="margin + 定宽"></a>margin + 定宽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>适用定宽</li>
</ul>
<h3 id="table-margin"><a href="#table-margin" class="headerlink" title="table + margin"></a>table + margin</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>display: table</code> 表现类似<code>block</code>，但是宽度为<strong>内容宽</strong></p>
</li>
<li><p>无需设置父元素样式（支持IE8及其以上版本，IE8以下则需要嵌入<code>&lt;table&gt;</code></p>
</li>
</ul>
<h3 id="inline-block-text-align"><a href="#inline-block-text-align" class="headerlink" title="inline-block + text-align"></a>inline-block + text-align</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></div><div class="line">    Demo</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>兼容IE6</li>
</ul>
<h3 id="absolute-margin-left"><a href="#absolute-margin-left" class="headerlink" title="absolute + margin-left"></a>absolute + margin-left</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span>  &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>; <span class="comment">/* width/2 */</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>固定宽度</p>
</li>
<li><p>相比<code>transform</code>，兼容性更好</p>
</li>
</ul>
<h3 id="absolute-transform"><a href="#absolute-transform" class="headerlink" title="absolute + transform"></a>absolute + transform</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>绝对定位脱离文档流，不会对后续布局造成影响</p>
</li>
<li><p><code>transform</code>为CSS3属性，存在兼容问题</p>
</li>
</ul>
<h3 id="flex-justify-content"><a href="#flex-justify-content" class="headerlink" title="flex + justify-content"></a>flex + justify-content</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span>  &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>只需要设置父节点</p>
</li>
<li><p><code>flex</code>有兼容问题</p>
</li>
</ul>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="table-cell-vertical-align"><a href="#table-cell-vertical-align" class="headerlink" title="table-cell + vertical-align"></a>table-cell + vertical-align</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>兼容性好，IE8以下版本需要调整页面结构<code>table</code></li>
</ul>
<h3 id="absolute-transform-1"><a href="#absolute-transform-1" class="headerlink" title="absolute + transform"></a>absolute + transform</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>绝对定位脱离文档流，但<strong>绝对定位元素师唯一的元素则父元素会失去高度</strong></p>
</li>
<li><p><code>transform</code>有兼容问题</p>
</li>
<li><p>同水平居中也可以使用<code>margin-top实现</code></p>
</li>
</ul>
<h3 id="flex-align-items"><a href="#flex-align-items" class="headerlink" title="flex + align-items"></a>flex + align-items</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>flex</code>有兼容问题</li>
</ul>
<h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><h3 id="absolute-transform-2"><a href="#absolute-transform-2" class="headerlink" title="absolute + transform"></a>absolute + transform</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>绝对定位脱离文档流</p>
</li>
<li><p><code>transform</code>有兼容问题</p>
</li>
</ul>
<h3 id="inline-block-text-align-table-cell-vertical-align"><a href="#inline-block-text-align-table-cell-vertical-align" class="headerlink" title="inline-block + text-align + table-cell + vertical-align"></a>inline-block + text-align + table-cell + vertical-align</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">display</span>: table-cell;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>兼容好</li>
</ul>
<h3 id="flex-justify-content-align-items"><a href="#flex-justify-content-align-items" class="headerlink" title="flex + justify-content + align-items"></a>flex + justify-content + align-items</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">justify-content</span>: center; <span class="comment">/* 水平居中 */</span></div><div class="line">    <span class="attribute">align-items</span>: center; <span class="comment">/*垂直居中*/</span></div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>只需要设置父节点</p>
</li>
<li><p><code>flex</code>有兼容问题</p>
</li>
</ul>
<h2 id="一列定宽，一列自适应"><a href="#一列定宽，一列自适应" class="headerlink" title="一列定宽，一列自适应"></a>一列定宽，一列自适应</h2><h3 id="float-margin"><a href="#float-margin" class="headerlink" title="float + margin"></a>float + margin</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>IE 6 有3像素的BUG，解决<strong>可以在<code>.left</code>加入<code>margin-left:-3px</code></strong>，当然也有其他的解决方法，如下：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-fix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.right-fix</span> &#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>此方法不会存在IE 6中3像素的问题，但<code>.left</code>不可选择，需要设置<code>.left {position: relation}</code></strong>来提高层级。</p>
<h3 id="float-overflow"><a href="#float-overflow" class="headerlink" title="float + overflow"></a>float + overflow</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>设置<code>overflow: hidden</code>会触发BFC块级格式上下文，就是无论在BFC里面做什么操作，外面都不会受影响。但是此方法不被IE 6支持。</strong></p>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"paren"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="comment">/*宽度为剩余宽度*/</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong><code>table</code> 的显示特性为每列的单元格宽度和一定等与表格宽度。 <code>table-layout: fixed</code> 可加速渲染，也是设定布局优先。<code>table-cell</code> 中不可以设置 <code>margin</code> 但是可以通过 <code>padding</code> 来设置间距</strong></p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>兼容问题</li>
</ul>
<h2 id="等分布局"><a href="#等分布局" class="headerlink" title="等分布局"></a>等分布局</h2><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.column</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>兼容IE 8 以上版本</li>
</ul>
<h3 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span> + <span class="selector-class">.column</span> &#123; <span class="comment">/* 相邻兄弟 */</span></div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="table-1"><a href="#table-1" class="headerlink" title="table"></a>table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent-fix"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent-fix</span>	&#123;</div><div class="line">	<span class="attribute">margin-left</span>: -<span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">	<span class="attribute">display</span>: table;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="comment">/*可以布局优先，也可以单元格宽度平分在没有设置的情况下*/</span></div><div class="line">	<span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.column</span> &#123;</div><div class="line">	<span class="attribute">display</span>: table-cell;</div><div class="line">	<span class="attribute">padding-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="等高布局"><a href="#等高布局" class="headerlink" title="等高布局"></a>等高布局</h2><h3 id="table-2"><a href="#table-2" class="headerlink" title="table"></a>table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">	<span class="attribute">display</span>: table;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">	<span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">	<span class="attribute">display</span>: table-cell;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">	<span class="attribute">display</span>: table-cell;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>table</code> 的特性为每列等宽，每行等高可以用于解决此需求</li>
</ul>
<h3 id="flex-2"><a href="#flex-2" class="headerlink" title="flex"></a>flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">	<span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意这里实际上使用了<code>align-items: stretch</code>，flex 默认的 <code>align-items</code>的值为 <code>stretch</code> </strong></p>
<h3 id="float-1"><a href="#float-1" class="headerlink" title="float"></a>float</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>,</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">padding-bottom</span>: <span class="number">9999px</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">9999px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>此方法只有背景显示高度相等，左右真实高度其实不想等，但兼容性较好。</li>
</ul>
<p>参考资料：</p>
<ul>
<li><a href="http://www.xingxin.me/posts/590058affd9e613545f2d1f3" target="_blank" rel="external">http://www.xingxin.me/posts/590058affd9e613545f2d1f3</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[css的一些小记]]></title>
      <url>https://lucius0.github.io/2017/03/19//archivers/css-notes/</url>
      <content type="html"><![CDATA[<h2 id="before-和-after"><a href="#before-和-after" class="headerlink" title=":before 和 :after"></a>:before 和 :after</h2><p>伪类<code>:before</code>和<code>:after</code>默认是一个行内元素，所以这个元素设置<code>width/height</code>是无效的，就像给<code>a</code>元素设置<code>width/height</code>一样，但是可以通过设置<code>position:absolute;</code>，对这个元素的<code>display</code>属性计算为<code>inline-block</code>值，但是设置了<code>width/height</code>针对的是<code>:before/:after</code>生成的匿名替换元素，而不是其中的<code>content</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 无效</div><div class="line">span:before &#123;</div><div class="line">    content: url(xxx.png);</div><div class="line">    width: 800px;</div><div class="line">    height: 600px;</div><div class="line">&#125;</div><div class="line">// 可以</div><div class="line">span:before &#123;</div><div class="line">    content: '';</div><div class="line">    background-image:url(xxx.png);</div><div class="line">    background-size:800px 600px;</div><div class="line">    width: 800px;</div><div class="line">    height: 600px;</div><div class="line">    position: absolute; // 设置定位类型</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a>inline-block</h2><h3 id="元素间隔"><a href="#元素间隔" class="headerlink" title="元素间隔"></a>元素间隔</h3><p><code>inline-block</code>使得元素水平排列，但如果两个<code>inline-block</code>元素之间存在<strong>空格</strong>或者<strong>换行</strong>就会出现奇怪的元素间隔，即使使用了<code>{padding: 0; margin: 0}</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#text p &#123; display: inline-block; padding: 10px; background-color: red; color: #fff;&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/css/css-27.png" alt=""></p>
<p>常见的解决方法：</p>
<p>1、元素之间不要存在<strong>空格</strong>或者<strong>换行符</strong>；</p>
<p>2、父容器的<code>font-size:0</code>。</p>
<p>去除<code>inline-block</code>之间的间隔有很多种方法，可以参考张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="external">去除inline-block元素间间距的N种方法</a></p>
<h3 id="元素对齐问题"><a href="#元素对齐问题" class="headerlink" title="元素对齐问题"></a>元素对齐问题</h3><p>两<code>inline-block</code>元素，不存在文本的情况下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#test p &#123;display: inline-block;&#125;</div><div class="line">.c1, .c2 &#123;width: 100px; height: 100px;&#125;</div><div class="line">.c1 &#123;border: 1px solid #f00;&#125;</div><div class="line">.c2 &#123;border: 1px solid #000;&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/css/css-28.png" alt=""></p>
<p>两<code>inline-block</code>元素存在文本的情况下</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#test p &#123;display: inline-block;&#125;</div><div class="line">.c1, .c2 &#123;width: 100px; height: 100px;&#125;</div><div class="line">.c1 &#123;border: 1px solid #f00;&#125;</div><div class="line">.c2 &#123;border: 1px solid #000;&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="/images/css/css-29.png" alt=""></p>
<p>常见的解决方法：</p>
<p>给图片或者背景设置<code>vertical-align: top</code>即可，或者给有文本的元素设置<code>overflow:hidden</code></p>
<p>出现这种的原因是因为<code>inline-block</code>的默认属性是<code>vertical-align: baseline</code>，即以父元素的基线对齐，但当出现文本的时候，则会影响了对齐的基线。</p>
<p>来自官方的答案：<a href="https://link.zhihu.com/?target=http%3A//www.w3.org/TR/CSS21/visudet.html%23leading" target="_blank" rel="external">“Visual formatting model details”</a></p>
<blockquote>
<p>The baseline of an ‘inline-block’ is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its ‘overflow’ property has a computed value other than ‘visible’, in which case the baseline is the bottom margin edge.</p>
</blockquote>
<h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>页面上的每一个元素都可以看成一个盒模型。</p>
<p><img src="/images/css/css-30.png" alt=""></p>
<p>可以知道盒模型由四部分组成<code>content + padding + border + margin</code>，因此一个元素的宽度应该是：<code>总宽度 = margin-left + border-left + padding-left + width + padding-right + border-right + margin-right</code>。</p>
<p>但是以上有问题的是，在<strong>IE(低于IE 9)</strong>的宽度为：<code>总宽度 = width + margin-right + margin-left</code>。因此出现了<code>box-sizing: border-box</code>的属性，当设置<code>box-sizing: border-box</code>属性时，<code>border</code> 和 <code>padding</code> 就被包含在了宽高之内，和 IE 之前的标准是一样的。</p>
<h2 id="Chrome-小于12号字体"><a href="#Chrome-小于12号字体" class="headerlink" title="Chrome 小于12号字体"></a>Chrome 小于12号字体</h2><p>相对于其他的浏览器，chrome的默认最小字体只能是<code>12px</code>，无论你设置再小也是只能是<code>12px</code>，那假如有一个需求是要你兼容其他平台，包括chrome的字体表现小于<code>12px</code>的呢？可以使用css3的一个属性<code>transform: scale(n)</code>。</p>
<h2 id="text-overflow-ellipsis"><a href="#text-overflow-ellipsis" class="headerlink" title="text-overflow: ellipsis"></a>text-overflow: ellipsis</h2><p><strong>多行文本</strong>在当前标准是不支持<code>text-overflow: ellipsis</code>。在草案中有一个不规范的属性<code>-webkit-line-clamp: &lt;number&gt;</code> <a href="http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariCSSRef/Articles/StandardCSSProperties.html#//apple_ref/doc/uid/TP30001266-UnsupportedProperties" target="_blank" rel="external">(unsupported WebKit property)</a>倒是可以支持这一需求，但是目前也只是在草案中。<code>text-overflow: ellipsis</code>需要<code>overflow: hidden</code>跟<code>white-space: nowrap</code>的支持，在IE 6还需要给元素设置<strong>宽度</strong>，至于多行文本，可以用<em>Jquery插件</em>的<em>Jquery-dotdotdot</em>，或者通过伪元素<code>:after</code>也可以很巧妙的解决这个问题。</p>
<p>在此帖一下张老师的分析以及他的方案：<a href="http://www.zhangxinxu.com/wordpress/2009/09/%E5%85%B3%E4%BA%8E%E6%96%87%E5%AD%97%E5%86%85%E5%AE%B9%E6%BA%A2%E5%87%BA%E7%94%A8%E7%82%B9%E7%82%B9%E7%82%B9-%E7%9C%81%E7%95%A5%E5%8F%B7%E8%A1%A8%E7%A4%BA/" target="_blank" rel="external">关于文字内容溢出用点点点(…)省略号表示</a></p>
<h2 id="letter-spacing-无法居中的问题"><a href="#letter-spacing-无法居中的问题" class="headerlink" title="letter-spacing 无法居中的问题"></a>letter-spacing 无法居中的问题</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">letter-spacing</span>: 20<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">text-indent</span>: 20<span class="selector-tag">px</span>;</div><div class="line"><span class="selector-tag">text-align</span><span class="selector-pseudo">:center</span>;</div></pre></td></tr></table></figure>
<h2 id="blur"><a href="#blur" class="headerlink" title="blur"></a>blur</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">filter: blur(10px);</div><div class="line">-webkit-filter: blur(10px);</div><div class="line">-moz-filter: blur(10px);</div><div class="line">-o-filter: blur(10px);</div><div class="line">-ms-filter: blur(10px);</div><div class="line">filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius="4");</div></pre></td></tr></table></figure>
<h2 id="work-wrap-amp-amp-work-break"><a href="#work-wrap-amp-amp-work-break" class="headerlink" title="work-wrap &amp;&amp; work-break"></a>work-wrap &amp;&amp; work-break</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">    666 asdjkhaksdhksdhkjahskajhsdasdasdaaskashdkasdhkad 872934729347</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line">span &#123;</div><div class="line">    word-wrap: break-word;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/css/css-31.png" alt=""></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">    666 asdjkhaksdhksdhkjahskajhsdasdasdaaskashdkasdhkad 872934729347</div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line">span &#123;</div><div class="line">    word-break: break-all;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/css/css-32.png" alt=""></p>
<p><code>word-wrap: break-word</code> 会把过长的字符串换行再折断溢出部分，而<code>word-break: break-all</code> 会把过长的字符串在该行就将溢出的折断。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[七个你可能不了解的CSS单位]]></title>
      <url>https://lucius0.github.io/2017/03/19//archivers/7-css-units-you-might-not-know-about/</url>
      <content type="html"><![CDATA[<p>我们很容易无法摆脱的使用我们所熟悉的CSS技术，当新的问题出现，这样会使我们处于不利的地位。</p>
<p>随着Web继续的发展，对新的解决方案的需求也会继续增大。因此，作为网页设计师和前端开发人员，我们别无选择，只有去了解我们的工具集并且熟悉它。</p>
<p>这意味着我们还要了解一些特殊的工具-那些不经常使用的，但是当需要它们的时候，它们恰恰是最正确的工具。</p>
<p>今天，我将要向你介绍一些你以前可能不知道的CSS工具。这些工具都是计量单位，就像像素或者相对单位,但是很可能你从来没听说过它们！让我们一探究竟吧。</p>
<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>我们将从你已经熟悉的东西开始。<code>em</code>单位被定义为当前字体大小。例如，如果你在<code>body</code>元素上设置一个字体大小，那么在<code>body</code>元素内的任何子元素的<code>em</code>值都等于这个字体大小。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </div><div class="line"></div><div class="line">body &#123; font-size: 14px; &#125; </div><div class="line">div &#123; font-size: 1.2em; // calculated at 14px * 1.2, or 16.8px &#125;</div></pre></td></tr></table></figure>
<p>在这里，我们说这个<code>div</code>将有一个<code>1.2em</code>的<code>font-size</code>。它是所继承的字体大小的<code>1.2</code>倍，在这个例子中为<code>14px</code>。结果为<code>16.8px</code>.</p>
<p>但是，当你在每个元素内都级联<code>em</code>定义的字体大小将会发生什么？在下面的代码片段中我们应用和上面一模一样的CSS.每个<code>div</code>从它们的父节点继承字体大小，带给我们逐渐增加的字体大小。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span> </div><div class="line">        Test <span class="comment">&lt;!-- 14 * 1.2 = 16.8px --&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span> </div><div class="line">            Test <span class="comment">&lt;!-- 16.8 * 1.2 = 20.16px --&gt;</span> </div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span> </div><div class="line">                Test <span class="comment">&lt;!-- 20.16 * 1.2 = 24.192px --&gt;</span> </div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p data-height="300" data-theme-id="0" data-slug-hash="xbZQRQ" data-user="Envato Tuts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/tutsplus/pen/xbZQRQ" target="_blank" rel="external">Custom Flexbox Alignment With Auto Margins</a> forked by Envato Tuts(<a href="http://codepen.io" target="_blank" rel="external">@Envato Tuts</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>虽然在某些情况下可能需要这个，但是通常你可能想基于一个唯一的度量标准来按比例缩放。在这种情况下，你应该用<code>rem</code>。<code>rem</code>中的”<code>r</code>“代表”<code>root</code>“；这等同于<code>font-size</code>基于根元素进行设置；在大多数情况下根元素为<code>html</code>元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">html &#123; font-size: 14px; &#125; </div><div class="line">div &#123; font-size: 1.2rem; &#125;</div></pre></td></tr></table></figure>
<p>在上一个示例中三个嵌套的<code>div</code>的字体大小计算结果都为<code>16.8px</code>。</p>
<h3 id="对网格布局的好处"><a href="#对网格布局的好处" class="headerlink" title="对网格布局的好处"></a>对网格布局的好处</h3><p><code>rem</code>不是只对定义字体大小有用。比如，你可以使用<code>rem</code>把整个网格系统或者UI样式库基于HTML根元素的字体大小上,然后在特定的地方使用<code>em</code>比例缩放。这将带给你更加可预测的字体大小和比例缩放。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.container &#123; </div><div class="line">    width: 70rem; // 70 * 14px = 980px </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从概念上讲，像这样一个策略背后的想法是为了允许你的界面随着你的内容按比例缩放。然而，这可能不一定对每个案例都有意义。</p>
<p>“<a href="http://caniuse.com/#feat=rem" target="_blank" rel="external">rem(root em)单位</a>“的兼容性列表。</p>
<h2 id="vh和vw"><a href="#vh和vw" class="headerlink" title="vh和vw"></a>vh和vw</h2><p>响应式网页设计技术很大程度上依赖于比例规则。然而，CSS比例不总是每个问题的最佳解决方案。CSS宽度是相对于最近的包含父元素。如果你想使用显示窗口的宽度或高度而不是父元素的宽度将会怎么样？这正是<code>vh</code>和<code>vw</code>单位所提供的。</p>
<p><code>vh</code>等于viewport高度的<code>1/100</code>.例如，如果浏览器的高是<code>900px</code>,<code>1vh</code>求得的值为<code>9px</code>。同理，如果显示窗口宽度为<code>750px</code>,<code>1vw</code>求得的值为<code>7.5px</code>。</p>
<p>这些规则表面上看起来有无尽的用途。例如，做一个占满高度的或者接近占满高度的幻灯片，可以用一个非常简单的方法实现，只要用一行CSS：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.slide &#123;</div><div class="line">    height: 100vh;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设想你想要一个占满屏幕宽度的标题。为做到这一点，你将会用<code>vw</code>来设置一个字体大小。这个大小将会随着浏览器的宽度按比例缩放。</p>
<p data-height="300" data-theme-id="0" data-slug-hash="gbPQga" data-user="Envato Tuts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/tutsplus/pen/gbPQga" target="_blank" rel="external">Custom Flexbox Alignment With Auto Margins</a> forked by Envato Tuts(<a href="http://codepen.io" target="_blank" rel="external">@Envato Tuts</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p><a href="http://caniuse.com/#feat=viewport-units" target="_blank" rel="external">视窗单位: vw, vh</a>的兼容性列表。</p>
<h2 id="vmin-和-vmax"><a href="#vmin-和-vmax" class="headerlink" title="vmin 和 vmax"></a>vmin 和 vmax</h2><p><code>vh</code>和<code>vm</code>总是与视口的高度和宽度有关，与之不同的，<code>vmin</code>和<code>vmax</code>是与这次宽度和高度的最大值或最小值有关，取决于哪个更大和更小。例如，如果浏览器设置为<code>1100px</code>宽、<code>700px</code>高，<code>1vmin</code>会是<code>7px</code>,<code>1vmax</code>为<code>11px</code>。然而，如果宽度设置为<code>800px</code>，高度设置为<code>1080px</code>，<code>1vmin</code>将会等于<code>8px</code>而<code>1vmax</code>将会是<code>10.8px</code>。</p>
<p>所以你什么时候可能用到这些值？</p>
<p>设想你需要一个总是在屏幕上可见的元素。使用高度和宽度设置为低于<code>100</code>的<code>vmin</code>值将可以实现这个效果。例如，一个正方形的元素总是至少接触屏幕的两条边可能是这样定义的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123; </div><div class="line">    height: 100vmin; width: 100vmin; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/css/css-24.png" alt=""></p>
<p>如果你需要一个总是覆盖可视窗口的正方形(一直接触屏幕的四条边),使用相同的规则只是把单位换成<code>vmax</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.box &#123; </div><div class="line">    height: 100vmax; width: 100vmax; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/images/css/css-25.png" alt=""></p>
<p>这些规则的组合提供了一个非常灵活的方式，用新的、令人兴奋的方式利用你的可视窗口的大小。</p>
<p><a href="http://caniuse.com/#feat=viewport-units" target="_blank" rel="external">Viewport units: vmin, vmax</a> “兼容列表。</p>
<h2 id="ex和ch"><a href="#ex和ch" class="headerlink" title="ex和ch"></a>ex和ch</h2><p><code>ex</code>和<code>ch</code>单位，与<code>em</code>和<code>rem</code>相似，依赖于当前字体和字体大小。然而，与<code>em</code>和<code>rem</code>不同的是，这两个单位只也依赖于<code>font-family</code>，因为它们被定为基于特殊字体的法案。</p>
<p><code>ch</code>单位，或者字符单位被定义为0字符的宽度的“先进的尺寸”。在”Eric Meyer’s的博客”中可以找到一些非常有趣的讨论关于这意味着什么，但是基本的概念是，给定一个等宽字体的字体，一个N个字符单位宽的盒子，比如<code>width：40ch;</code>,可以一直容纳一个有40个字符的应用那个特定字体的字符串。虽然这个特殊规则的传统用途与列出盲文有关，但是这里创造性的可行性一定会超越这些简单的用途。</p>
<p><code>ex</code>单位被定义为”当前字体的x-height或者一个<code>em</code>的一半”。给定的字体的<code>x-height</code>是指那个字体的小写x的高度。通常，这是这个字体的中间的标志。</p>
<p><img src="/images/css/css-26.png" alt=""></p>
<p>对于这种单位有很多的用途，大多数是用于排版的微调。例如，<code>sup</code>元素,代表上标，可以用相对定位和一个<code>1ex</code>的底部值在行内被推高。类似地，你可以拉低一个下标元素。浏览器默认支持这些利用上标和下标特性的<code>vertical-align</code>规则，但是如果你想要更精细的控制，你可以像这样更明确的处理样式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sup &#123; </div><div class="line">    position: relative; bottom: 1ex; </div><div class="line">&#125; </div><div class="line"></div><div class="line">sub &#123; </div><div class="line">    position: relative; bottom: -1ex; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ex</code>单位在<a href="http://www.w3.org/TR/REC-CSS1/#length-units" target="_blank" rel="external">CSS1</a>中已经存在，但是你不会找到对<code>ch</code>单位有像这样坚实的支持。具体支持，在Eric Meyer’s 的博客中查看<a href="http://www.quirksmode.org/css/units-values/" target="_blank" rel="external">CSS单位和值</a>。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>密切关注CSS的持续发展和扩张是非常重要的，一边在你的工具集里知道所有的工具。也许你会遇到一个特殊的问题需要一个意想不到的解决方案，利用这些更隐蔽的计量单位之一。花时间去阅读新规范，记录来自好的资源的新闻资讯！</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://webdesign.tutsplus.com/articles/taking-the-erm-out-of-ems--webdesign-12321" target="_blank" rel="external">Taking the “Erm..” Out of Ems</a></li>
<li><a href="https://webdesign.tutsplus.com/articles/taking-ems-even-further--webdesign-12543" target="_blank" rel="external">Taking Ems Even Further</a></li>
<li><a href="http://caniuse.com/#feat=viewport-units" target="_blank" rel="external">Caniuse Viewport units</a></li>
<li><a href="http://www.w3cplus.com/css/css-font-sizing.html" target="_blank" rel="external">CSS的font-size属性</a></li>
<li><a href="http://www.w3cplus.com/css/r-i-p-rem-viva-css-reference-pixel.html" target="_blank" rel="external">Rem VS Px</a></li>
<li><a href="http://www.w3cplus.com/css/the-lengths-of-css.html" target="_blank" rel="external">CSS的长度单位</a></li>
<li><a href="http://www.w3cplus.com/css3/define-font-size-with-css3-rem" target="_blank" rel="external">CSS3的REM设置字体大小</a></li>
<li><a href="http://www.w3cplus.com/css/px-to-em" target="_blank" rel="external">CSS中强大的EM</a></li>
</ul>
<script src="http://codepen.io/assets/embed/ei.js"> </script>

<p>转自：<a href="https://www.w3cplus.com/css/7-css-units-you-might-not-know-about.html" target="_blank" rel="external">https://www.w3cplus.com/css/7-css-units-you-might-not-know-about.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS - relative 和 absolute 小记]]></title>
      <url>https://lucius0.github.io/2017/03/02//archivers/relative-absolute-note/</url>
      <content type="html"><![CDATA[<p>我在之前翻译过有关于css定位的文章 <a href="/2016/10/30//archivers/5-things-you-should-know-about-css/" title="《5件你需要知道的css定位》">《5件你需要知道的css定位》</a>。那么这次是看了张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2010/12/css-%E7%9B%B8%E5%AF%B9%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">相对定位和绝对定位</a>之后的小记，巩固下基础知识。</p>
<h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><h3 id="包裹性"><a href="#包裹性" class="headerlink" title="包裹性"></a>包裹性</h3><p><code>position: absolute</code>跟<code>float: left</code>一样具有包裹性，即让元素<code>inline-block</code>化，例如div标签默认宽度100%显示，一旦有了包裹性，即100%默认宽度就会成了自适应内部元素的宽度。<a href="http://www.zhangxinxu.com/study/201012/position-absolute-inline-block.html" target="_blank" rel="external">absolute的inline-block化demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.div &#123; padding:20px; margin-bottom:10px; background-color:#f0f3f9; &#125;</div><div class="line">.abs &#123; position:absolute; &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>无absolute<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div abs"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>absolute后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>float 也是 <code>inline-block</code>元素，可以利用 float 使得一些内联元素如 span 支持 width 属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 以下目的都是一样的 --&gt;</span></div><div class="line">span &#123; display:block; width:100px; &#125;</div><div class="line">span &#123; float:left; width:100px; &#125;</div><div class="line">span &#123; position:absolute; width:100px; &#125;</div></pre></td></tr></table></figure>
<h3 id="破坏性"><a href="#破坏性" class="headerlink" title="破坏性"></a>破坏性</h3><p>float 会使<strong>高度</strong>失效，之所以<strong>宽度</strong>还在，是因为还在DOM tree，位置还是；而 absolute 因为脱离文档流，所以宽高都失效。<a href="http://www.zhangxinxu.com/study/201012/position-absolute-destroy.html" target="_blank" rel="external">absolute的破坏性demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.div &#123; padding:20px; margin:10px 0 0 10px; background-color:#f0f3f9; float:left; &#125;</div><div class="line">.abs &#123; position:absolute; &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片无absolute<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"abs"</span> <span class="attr">data-src</span>=<span class="string">"http://image.zhangxinxu.com/image/study/s/s256/mm1.jpg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>图片absolute后<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="常见absolute布局的替代实现方案"><a href="#常见absolute布局的替代实现方案" class="headerlink" title="常见absolute布局的替代实现方案"></a>常见absolute布局的替代实现方案</h3><p><strong>margin替换</strong></p>
<p>margin 可以代替 absolute 对其元素定位，如B相对于A元素右下角定位，常见的就是用B元素 absolute 定位并且使用 bottom 跟 right 属性定位。这样会存在问题，一是当父容器为 static 时候，B会定位错乱，二是当父容器的宽度改变，那么B的定位也随之改变。而利用 margin 的做法是怎样的呢？A跟B不在同一个 inline-block 里，可以让A表现为 block 属性，并且使B裹上一个表现为 inline-block 的容器，这样B元素就可以使用 margin 来灵活定位到右下角了。<a href="http://www.zhangxinxu.com/study/201012/position-absolute-replace-method-2.html" target="_blank" rel="external">absolute/margin定位布局对比demo</a></p>
<h3 id="absolute正业之元素隐藏"><a href="#absolute正业之元素隐藏" class="headerlink" title="absolute正业之元素隐藏"></a>absolute正业之元素隐藏</h3><p>除了使用<code>display: none</code>和<code>display:block/inline</code>来控制DOM元素显隐，还可以利用 absolute ，且有三个好处：<strong>页面可用性，回流与渲染，配合JavaScript的控制。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.hidden&#123;</div><div class="line">    position:absolute;</div><div class="line">    top:-9999em;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hidden&#123;</div><div class="line">    position:absolute;</div><div class="line">    visibility:hidden;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.hidden&#123;</div><div class="line">    position:absolute;</div><div class="line">    clip: rect(1px 1px 1px 1px); /* IE6, IE7 */</div><div class="line">    clip: rect(1px, 1px, 1px, 1px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>1、可用性隐藏：</strong>“选项卡内容”，“更多收起展开”这些会不利于盲人这类需要借助屏幕阅读器的用户，但是可用性隐藏也存在一个问题，就是响应键盘焦点Tab切换的时候，假如你用的是 absolute 隐藏的时候，是可以被响应焦点的。</p>
<p><strong>2、回流与渲染：</strong>使用<code>display:none</code>会造成重绘跟回流，详细可以看“<a href="http://www.zhangxinxu.com/wordpress/?p=311" target="_blank" rel="external">最小化浏览器中的回流(reflow)</a>”和“<a href="http://www.zhangxinxu.com/wordpress/?p=600" target="_blank" rel="external">回流与重绘：CSS性能让JavaScript变慢？</a>”</p>
<p><strong>3、配合JavaScript的控制：</strong> 隐藏可以看上面的，但是显示我们只需要<code>dom.style.position = &quot;static&quot;;</code>，就无需担心原本标签的是inline水平还是block水平。</p>
<h3 id="absolute与等高布局"><a href="#absolute与等高布局" class="headerlink" title="absolute与等高布局"></a>absolute与等高布局</h3><p><a href="http://www.zhangxinxu.com/wordpress/?p=694" target="_blank" rel="external">纯CSS实现侧边栏/分栏高度自动相等</a> 与 <a href="http://www.zhangxinxu.com/wordpress/?p=1187" target="_blank" rel="external">我所知道的几种display:table-cell的应用</a> 均可以实现等高布局。</p>
<p>现在是利用 absolute 来实现等高布局，应用了<code>position: absolute</code>元素无宽度无高度。<a href="http://www.zhangxinxu.com/study/201103/absolute-equal-height-layout.html" target="_blank" rel="external">绝对定位与等高布局demo</a></p>
<p>核心代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.equal_height&#123;width:100%; height:999em; position:absolute; left:0; top:0;&#125;</div></pre></td></tr></table></figure>
<p>同时，满足以下条件：</p>
<ol>
<li><p>高度999em的绝对定位层位于侧栏容器内，侧栏<code>position</code>为<code>relative</code></p>
</li>
<li><p>该栏实际元素内容用一个与absolute绝对定位层为兄弟关系的标签层包裹，<code>position</code>为<code>relative</code>，<code>z-index</code>值1或其他</p>
</li>
<li><p>左右栏的父标签需设置<code>overflow:hidden</code>，同时为了兼容IE6/7，需设置<code>position</code>为<code>relative</code></p>
</li>
</ol>
<p><img src="/images/css/css-23.png" alt=""></p>
<p><strong>原理：</strong>由于绝对定位元素无高度的特性无宽度的特性，我们可以伪造一个高度足够高的绝对定位层（设置背景色，边框等属性），同时设置父标签溢出隐藏，那么其多出来的高度就不会显示了，也就实现了看上去的等高布局效果了。</p>
<h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>1、定位</p>
<p>relative 与 absolute 不同的是，relative 相对于自身位移，而 absolute 是相对于容器位移，张老师形象的称为“幻影位移“，什么这么说呢？因为 relative 是不会脱离文档流的，即就算你离开了自己本来的位置，那个位置还在，还是属于你的，只是你的”幻影“离开了原来的位置，表现也就变了。<a href="http://www.zhangxinxu.com/study/201108/css-relative-skill-move.html" target="_blank" rel="external">relative属性幻影瞬移技能demo</a></p>
<p>2、z-index</p>
<p>relative 跟 absolute 一样拥有 <code>z-index</code> 属性</p>
<p>3、限制 absolute</p>
<p>当 absolute 的父容器的定位是 relative 时，absolute 元素也就只能在 relative 限制下移动了，即 absolute 的<code>top\left</code>则是相对于 relative 移动的。</p>
<h3 id="relative-最小化影响"><a href="#relative-最小化影响" class="headerlink" title="relative 最小化影响"></a>relative 最小化影响</h3><p><a href="http://www.zhangxinxu.com/study/201108/css-relative-mini-effect-rule-unfollow.html" target="_blank" rel="external">未遵循最小化影响原则实现demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.test &#123;width:25em; margin:2em auto;&#125;</div><div class="line">.box &#123; padding:2em; border:1px solid #beceeb; border-radius:2px; background-color:#f0f3f9; position:relative; &#125;</div><div class="line">.ok &#123; color:green; font-size:6em; position:absolute; right:-11px; bottom:-.5em; &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">        CSS relative相对定位的最小化影响原则</div><div class="line">        <span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"ok"</span>&gt;</span>√<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.zhangxinxu.com/study/201108/css-relative-mini-effect-rule.html" target="_blank" rel="external">遵循最小化影响原则实现demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.test &#123;width:25em; margin:2em auto;&#125;</div><div class="line">.box &#123; padding:2em; border:1px solid #beceeb; border-radius:2px; background-color:#f0f3f9; &#125;</div><div class="line">.rel &#123; position:relative; &#125;</div><div class="line">.ok &#123; color:green; font-size:6em; position:absolute; right:-10px; top:-1em; &#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>CSS relative相对定位的最小化影响原则<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rel"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span> <span class="attr">class</span>=<span class="string">"ok"</span>&gt;</span>√<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>absolute+margin</code>（左上角元素定位，作用于当前元素）、<code>float+relative</code>（右上角元素定位，作用于当前元素）和<code>relative+absolute</code>（右下角元素定位，直接父标签+当前定位元素）。而目前web届大肆使用的外层div层设置relative属性，里面一些absolute元素定位的方法是不推荐的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript 启动性能瓶颈分析与解决方案]]></title>
      <url>https://lucius0.github.io/2017/03/01//archivers/javascript-start-up-performance/</url>
      <content type="html"><![CDATA[<p>在 Web 开发中，随着需求的增加与代码库的扩张，我们最终发布的 Web 页面也逐渐膨胀。不过这种膨胀远不止意味着占据更多的传输带宽，其还意味着用户浏览网页时可能更差劲的性能体验。浏览器在下载完某个页面依赖的脚本之后，其还需要经过语法分析、解释与运行这些步骤。而本文则会深入分析浏览器对于 JavaScript 的这些处理流程，挖掘出那些影响你应用启动时间的罪魁祸首，并且根据我个人的经验提出相对应的解决方案。回顾过去，我们还没有专门地考虑过如何去优化 JavaScript 解析/编译这些步骤；我们预想中的是解析器在发现<code>&lt;script&gt;</code>标签后会瞬时完成解析操作，不过这很明显是痴人说梦。下图是对于 V8 引擎工作原理的概述：</p>
<p><img src="/images/javascript/js-03.png" alt=""></p>
<h2 id="到底是什么拖慢了我们应用的启动时间？"><a href="#到底是什么拖慢了我们应用的启动时间？" class="headerlink" title="到底是什么拖慢了我们应用的启动时间？"></a>到底是什么拖慢了我们应用的启动时间？</h2><p>在启动阶段，语法分析，编译与脚本执行占据了 JavaScript 引擎运行的绝大部分时间。换言之，这些过程造成的延迟会真实地反应到用户可交互时延上；譬如用户已经看到了某个按钮，但是要好几秒之后才能真正地去点击操作，这一点会大大影响用户体验。</p>
<p><img src="/images/javascript/js-04.png" alt=""></p>
<p>上图是我们使用 Chrome Canary 内置的 V8 RunTime Call Stats 对于某个网站的分析结果；需要注意的是桌面浏览器中语法解析与编译占用的时间还是蛮长的，而在移动端中占用的时间则更长。实际上，对于 Facebook, Wikipedia, Reddit 这些大型网站中语法解析与编译所占的时间也不容忽视：</p>
<p><img src="/images/javascript/js-05.png" alt=""></p>
<p>上图中的粉色区域表示花费在 V8 与 Blink’s C++ 中的时间，而橙色和黄色分别表示语法解析与编译的时间占比。Facebook 的 Sebastian Markbage 与 Google 的 Rob Wormald 也都在 Twitter 发文表示过 JavaScript 的语法解析时间过长已经成为了不可忽视的问题，后者还表示这也是 Angular 启动时主要的消耗之一。</p>
<p><img src="/images/javascript/js-06.jpg" alt=""></p>
<p>随着移动端浪潮的涌来，我们不得不面对一个残酷的事实：移动端对于相同包体的解析与编译过程要花费相当于桌面浏览器2~5倍的时间。当然，对于高配的 iPhone 或者 Pixel 这样的手机相较于 Moto G4 这样的中配手机表现会好很多；这一点提醒我们在测试的时候不能仅用身边那些高配的手机，而应该中高低配兼顾：</p>
<p><img src="/images/javascript/js-07.jpg" alt=""></p>
<p>上图是部分桌面浏览器与移动端浏览器对于 1MB 的 JavaScript 包体进行解析的时间对比，显而易见的可以发现不同配置的移动端手机之间的巨大差异。当我们应用包体已经非常巨大的时候，使用一些现代的打包技巧，譬如代码分割，TreeShaking，Service Workder 缓存等等会对启动时间有很大的影响。另一个角度来看，即使是小模块，你代码写的很糟或者使用了很糟的依赖库都会导致你的主线程花费大量的时间在编译或者冗余的函数调用中。我们必须要清醒地认识到全面评测以挖掘出真正性能瓶颈的重要性。</p>
<h2 id="JavaScript-语法解析与编译是否成为了大部分网站的瓶颈？"><a href="#JavaScript-语法解析与编译是否成为了大部分网站的瓶颈？" class="headerlink" title="JavaScript 语法解析与编译是否成为了大部分网站的瓶颈？"></a>JavaScript 语法解析与编译是否成为了大部分网站的瓶颈？</h2><p>我曾不止一次听到有人说，我又不是 Facebook，你说的 JavaScript 语法解析与编译到<br>底会对其他网站造成什么样的影响呢？对于这个问题我也很好奇，于是我花费了两个月的时间对于超过 6000 个网站进行分析；这些网站囊括了 React，Angular，Ember，Vue 这些流行的框架或者库。大部分的测试是基于 WebPageTest 进行的，因此你可以很方便地重现这些测试结果。<strong>光纤接入的桌面浏览器大概需要 8 秒的时间才能允许用户交互，而 3G 环境下的 Moto G4 大概需要 16 秒 才能允许用户交互。</strong></p>
<p><img src="/images/javascript/js-08.png" alt=""></p>
<p><strong>大部分应用在桌面浏览器中会耗费约 4 秒的时间进行 JavaScript 启动阶段（语法解析、编译、执行）：</strong></p>
<p><img src="/images/javascript/js-09.jpg" alt=""></p>
<p>而在移动端浏览器中，大概要花费额外 36% 的时间来进行语法解析：</p>
<p>另外，统计显示并不是所有的网站都甩给用户一个庞大的 JS 包体，用户下载的经过 Gzip 压缩的平均包体大小是 410KB，这一点与 HTTPArchive 之前发布的 420KB 的数据基本一致。不过最差劲的网站则是直接甩了 10MB 的脚本给用户，简直可怕。</p>
<p><img src="/images/javascript/js-10.png" alt=""></p>
<p>通过上面的统计我们可以发现，包体体积固然重要，但是其并非唯一因素，语法解析与编译的耗时也不一定随着包体体积的增长而线性增长。总体而言小的 JavaScript 包体是会加载地更快（忽略浏览器、设备与网络连接的差异），但是同样 200KB 的大小，不同开发者的包体在语法解析、编译上的时间却是天差地别，不可同日而语。</p>
<h2 id="现代-JavaScript-语法解析-amp-编译性能评测"><a href="#现代-JavaScript-语法解析-amp-编译性能评测" class="headerlink" title="现代 JavaScript 语法解析 &amp; 编译性能评测"></a>现代 JavaScript 语法解析 &amp; 编译性能评测</h2><h3 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h3><p>打开 Timeline( Performance panel ) &gt; Bottom-Up/Call Tree/Event Log 就会显示出当前网站在语法解析/编译上的时间占比。如果你希望得到更完整的信息，那么可以打开 V8 的 Runtime Call Stats。在 Canary 中，其位于 Timeline 的 Experims &gt; V8 Runtime Call Stats 下。</p>
<p><img src="/images/javascript/js-11.jpg" alt=""></p>
<h3 id="Chrome-Tracing"><a href="#Chrome-Tracing" class="headerlink" title="Chrome Tracing"></a>Chrome Tracing</h3><p>打开 about:tracing 页面，Chrome 提供的底层的追踪工具允许我们使用disabled-by-default-v8.runtime_stats来深度了解 V8 的时间消耗情况。V8 也提供了<a href="https://docs.google.com/presentation/d/1Lq2DD28CGa7bxawVH_2OcmyiTiBn74dvC6vn2essroY/edit#slide=id.g1a504e63c9_2_84" target="_blank" rel="external">详细的指南</a>来介绍如何使用这个功能。</p>
<p><img src="/images/javascript/js-12.jpg" alt=""></p>
<h3 id="WebPageTest"><a href="#WebPageTest" class="headerlink" title="WebPageTest"></a>WebPageTest</h3><p><img src="/images/javascript/js-13.png" alt=""></p>
<p>WebPageTest 中 Processing Breakdown 页面在我们启用 Chrome &gt; Capture Dev Tools Timeline 时会自动记录 V8 编译、EvaluateScript 以及 FunctionCall 的时间。我们同样可以通过指明<code>disabled-by-default-v8.runtime_stats</code>的方式来启用 Runtime Call Stats。</p>
<p><img src="/images/javascript/js-14.png" alt=""></p>
<h3 id="User-Timing"><a href="#User-Timing" class="headerlink" title="User Timing"></a>User Timing</h3><p>我们还可以使用 Nolan Lawson 推荐的<a href="https://w3c.github.io/user-timing/#dom-performance-mark" target="_blank" rel="external">User Timing API</a>来评估语法解析的时间。不过这种方式可能会受 V8 预解析过程的影响，我们可以借鉴 Nolan 在 optimize-js 评测中的方式，在脚本的尾部添加随机字符串来解决这个问题。我基于 Google Analytics 使用相似的方式来评估真实用户与设备访问网站时候的解析时间：</p>
<p><img src="/images/javascript/js-15.jpg" alt=""></p>
<h3 id="DeviceTiming"><a href="#DeviceTiming" class="headerlink" title="DeviceTiming"></a>DeviceTiming</h3><p>Etsy 的 <a href="https://github.com/danielmendel/DeviceTiming" target="_blank" rel="external">DeviceTiming</a> 工具能够模拟某些受限环境来评估页面的语法解析与执行时间。其将本地脚本包裹在了某个仪表工具代码内从而使我们的页面能够模拟从不同的设备中访问。可以阅读 <a href="http://talks.desp.in/unpacking-the-black-box" target="_blank" rel="external">Daniel Espeset 的Benchmarking JS Parsing and Execution on Mobile Devices</a> 一文来了解更详细的使用方式。</p>
<p><img src="/images/javascript/js-16.jpg" alt=""></p>
<h2 id="我们可以做些什么以降低-JavaScript-的解析时间？"><a href="#我们可以做些什么以降低-JavaScript-的解析时间？" class="headerlink" title="我们可以做些什么以降低 JavaScript 的解析时间？"></a>我们可以做些什么以降低 JavaScript 的解析时间？</h2><ul>
<li><p>减少 JavaScript 包体体积。我们在上文中也提及，更小的包体往往意味着更少的解析工作量，也就能降低浏览器在解析与编译阶段的时间消耗。</p>
</li>
<li><p>使用代码分割工具来按需传递代码与懒加载剩余模块。这可能是最佳的方式了，类似于<a href="https://developers.google.com/web/fundamentals/performance/prpl-pattern/" target="_blank" rel="external">PRPL</a>这样的模式鼓励基于路由的分组，目前被 Flipkart, Housing.com 与 Twitter 广泛使用。</p>
</li>
<li><p>Script streaming: 过去 V8 鼓励开发者使用<code>async/defer</code>来基于<a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html" target="_blank" rel="external">script streaming</a>实现 10-20% 的性能提升。这个技术会允许 HTML 解析器将相应的脚本加载任务分配给专门的 script streaming 线程，从而避免阻塞文档解析。V8 推荐尽早加载较大的模块，毕竟我们只有一个 streamer 线程。</p>
</li>
<li><p>评估我们依赖的解析消耗。我们应该尽可能地选择具有相同功能但是加载地更快的依赖，譬如使用 Preact 或者 Inferno 来代替 React，二者相较于 React 体积更小具有更少的语法解析与编译时间。Paul Lewis 在最近的一篇文章中也讨论了框架启动的代价，与 Sebastian Markbage 的说法不谋而合：最好地评测某个框架启动消耗的方式就是先渲染一个界面，然后删除，最后进行重新渲染。第一次渲染的过程会包含了分析与编译，通过对比就能发现该框架的启动消耗。</p>
</li>
</ul>
<p>如果你的 JavaScript 框架支持 AOT（ahead-of-time）编译模式，那么能够有效地减少解析与编译的时间。Angular 应用就受益于这种模式：</p>
<p><img src="/images/javascript/js-17.png" alt=""></p>
<h2 id="现代浏览器是如何提高解析与编译速度的？"><a href="#现代浏览器是如何提高解析与编译速度的？" class="headerlink" title="现代浏览器是如何提高解析与编译速度的？"></a>现代浏览器是如何提高解析与编译速度的？</h2><p>不用灰心，你并不是唯一纠结于如何提升启动时间的人，我们 V8 团队也一直在努力。我们发现之前的某个评测工具 Octane 是个不错的对于真实场景的模拟，它在微型框架与冷启动方面很符合真实的用户习惯。而基于这些工具，V8 团队在过去的工作中也实现了大约 25% 的启动性能提升：</p>
<p><img src="/images/javascript/js-18.jpg" alt=""></p>
<p>本部分我们就会对过去几年中我们使用的提升语法解析与编译时间的技巧进行阐述。</p>
<h3 id="代码缓存"><a href="#代码缓存" class="headerlink" title="代码缓存"></a>代码缓存</h3><p><img src="/images/javascript/js-19.png" alt=""></p>
<p>Chrome 42 开始引入了所谓的代码缓存的概念，为我们提供了一种存放编译后的代码副本的机制，从而当用户二次访问该页面时可以避免脚本抓取、解析与编译这些步骤。除以之外，我们还发现在重复访问的时候这种机制还能避免 40% 左右的编译时间，这里我会深入介绍一些内容：</p>
<ul>
<li><p>代码缓存会对于那些在 72 小时之内重复执行的脚本起作用。</p>
</li>
<li><p>对于 Service Worker 中的脚本，代码缓存同样对 72 小时之内的脚本起作用。</p>
</li>
<li><p>对于利用 Service Worker 缓存在 Cache Storage 中的脚本，代码缓存能在脚本首次执行的时候起作用。</p>
</li>
</ul>
<p>总而言之，对于主动缓存的 JavaScript 代码，最多在第三次调用的时候其能够跳过语法分析与编译的步骤。我们可以通过<code>chrome://flags/#v8-cache-strategies-for-cache-storage</code>来查看其中的差异，也可以设置 <code>js-flags=profile-deserialization</code> 运行 Chrome 来查看代码是否加载自代码缓存。不过需要注意的是，代码缓存机制仅会缓存那些经过编译的代码，主要是指那些顶层的往往用于设置全局变量的代码。而对于类似于函数定义这样懒编译的代码并不会被缓存，不过 IIFE 同样被包含在了 V8 中，因此这些函数也是可以被缓存的。</p>
<h3 id="Script-Streaming"><a href="#Script-Streaming" class="headerlink" title="Script Streaming"></a>Script Streaming</h3><p><a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html" target="_blank" rel="external">Script Streaming</a>允许在后台线程中对异步脚本执行解析操作，可以对于页面加载时间有大概 10% 的提升。上文也提到过，这个机制同样会对同步脚本起作用。</p>
<p><img src="/images/javascript/js-20.png" alt=""></p>
<p>这个特性倒是第一次提及，因此 V8 会允许所有的脚本，即使阻塞型的<code>&lt;script src=&#39;&#39;&gt;</code>脚本也可以由后台线程进行解析。不过缺陷就是目前仅有一个 streaming 后台线程存在，<br>因此我们建议首先解析大的、关键性的脚本。在实践中，我们建议将<code>&lt;script defer&gt;</code>添加到<code>&lt;head&gt;</code>块内，这样浏览器引擎就能够尽早地发现需要解析的脚本，然后将其分配给后台线程进行处理。我们也可以查看 DevTools Timeline 来确定脚本是否被后台解析，特别是当你存在某个关键性脚本需要解析的时候，更需要确定该脚本是由 streaming 线程解析的。</p>
<p><img src="/images/javascript/js-21.png" alt=""></p>
<h3 id="语法解析-amp-编译优化"><a href="#语法解析-amp-编译优化" class="headerlink" title="语法解析 &amp; 编译优化"></a>语法解析 &amp; 编译优化</h3><p>我们同样致力于打造更轻量级、更快的解析器，目前 V8 主线程中最大的瓶颈在于所谓的非线性解析消耗。譬如我们有如下的代码片：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, module</span>) </span>&#123; … &#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> <span class="title">module</span>(<span class="params"></span>) </span>&#123; my functions &#125;)</div></pre></td></tr></table></figure>
<p>V8 并不知道我们编译主脚本的时候是否需要module这个模块，因此我们会暂时放弃编译它。而当我们打算编译module时，我们需要重分析所有的内部函数。这也就是所谓的 V8 解析时间非线性的原因，任何一个处于 N 层深度的函数都有可能被重新分析 N 次。V8 已经能够在首次编译的时候搜集所有内部函数的信息，因此在未来的编译过程中 V8 会忽略所有的内部函数。对于上面这种module形式的函数会是很大的性能提升，建议阅读<a href="https://docs.google.com/presentation/d/1214p4CFjsF-NY4z9in0GEcJtjbyVQgU0A-UqEvovzCs/edit#slide=id.p" target="_blank" rel="external">The V8 Parser(s) — Design, Challenges, and Parsing JavaScript Better</a>来获取更多内容。V8 同样在寻找合适的分流机制以保证启动时能在后台线程中执行 JavaScript 编译过程。</p>
<h3 id="预编译-JavaScript？"><a href="#预编译-JavaScript？" class="headerlink" title="预编译 JavaScript？"></a>预编译 JavaScript？</h3><p>每隔几年就有人提出引擎应该提供一些处理预编译脚本的机制，换言之，开发者可以使用构建工具或者其他服务端工具将脚本转化为字节码，然后浏览器直接运行这些字节码即可。从我个人观点来看，直接传送字节码意味着更大的包体，势必会增加加载时间；并且我们需要去对代码进行签名以保证能够安全运行。目前我们对于 V8 的定位是尽可能地避免上文所说的内部重分析以提高启动时间，而预编译则会带来额外的风险。不过我们欢迎大家一起来讨论这个问题，虽然 V8 目前专注于提升编译效率以及推广利用 Service Worker 缓存脚本代码来提升启动效率。我们在 BlinkOn7 上与 Facebook 以及 Akamai 也讨论过预编译相关内容点击预览。</p>
<h3 id="Optimize-JS-优化"><a href="#Optimize-JS-优化" class="headerlink" title="Optimize JS 优化"></a>Optimize JS 优化</h3><p>类似于 V8 这样的 JavaScript 引擎在进行完整的解析之前会对脚本中的大部分函数进行预解析，这主要是考虑到大部分页面中包含的 JavaScript 函数并不会立刻被执行。</p>
<p><img src="/images/javascript/js-22.png" alt=""></p>
<p>预编译能够通过只处理那些浏览器运行所需要的最小函数集合来提升启动时间，不过这种机制在 IIFE 面前却反而降低了效率。尽管引擎希望避免对这些函数进行预处理，但是远不如optimize-js这样的库有作用。optimize-js 会在引擎之前对于脚本进行处理，对于那些立即执行的函数插入圆括号从而保证更快速地执行。这种预处理对于 Browserify, Webpack 生成包体这样包含了大量即刻执行的小模块起到了非常不错的优化效果。尽管这种小技巧并非 V8 所希望使用的，但是在当前阶段不得不引入相应的优化机制。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>启动阶段的性能至关重要，缓慢的解析、编译与执行时间可能成为你网页性能的瓶颈所在。我们应该评估页面在这个阶段的时间占比并且选择合适的方式来优化。我们也会继续致力于提升 V8 的启动性能，尽我所能！</p>
<h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><ul>
<li><p><a href="https://www.youtube.com/watch?v=RWLzUnESylc" target="_blank" rel="external">Planning for Performance</a></p>
</li>
<li><p><a href="https://twitter.com/MSEdgeDev/status/819985530775404544" target="_blank" rel="external">Solving the Web Performance Crisis by Nolan Lawson</a></p>
</li>
<li><p><a href="https://timkadlec.com/2014/09/js-parse-and-execution-time/" target="_blank" rel="external">JS Parse and Execution Time</a></p>
</li>
<li><p><a href="http://carlos.bueno.org/2010/02/measuring-javascript-parse-and-load.html" target="_blank" rel="external">Measuring Javascript Parse and Load</a></p>
</li>
<li><p><a href="https://www.safaribooksonline.com/library/view/velocity-conference-new/9781491900406/part78.html" target="_blank" rel="external">Unpacking the Black Box: Benchmarking JS Parsing and Execution on Mobile Devices</a> (<a href="https://speakerdeck.com/desp/unpacking-the-black-box-benchmarking-js-parsing-and-execution-on-mobile-devices" target="_blank" rel="external">slides</a>)</p>
</li>
<li><p><a href="https://aerotwist.com/blog/when-everything-is-important-nothing-is/" target="_blank" rel="external">When everything’s important, nothing is!</a></p>
</li>
<li><p><a href="http://benediktmeurer.de/2016/12/16/the-truth-about-traditional-javascript-benchmarks/" target="_blank" rel="external">The truth about traditional JavaScript benchmarks</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/1096907/do-browsers-parse-javascript-on-every-page-load/" target="_blank" rel="external">Do Browsers Parse JavaScript On Every Page Load</a></p>
</li>
</ul>
<p>转自：<a href="https://segmentfault.com/a/1190000008340139#articleHeader10" target="_blank" rel="external">https://segmentfault.com/a/1190000008340139#articleHeader10</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue - 生命周期和钩子]]></title>
      <url>https://lucius0.github.io/2017/02/27//archivers/vue-life-cycle-and-hook/</url>
      <content type="html"><![CDATA[<p>生命周期的示例图，可以参考 <a href="/2017/01/08//archivers/vue-beginning/" title="《Vue.js 初体验》">《Vue.js 初体验》</a> 中的<strong>生命周期</strong>。</p>
<p>结合上面给的生命周期示例图，我们大致清楚Vue从创建到销毁的整个过程，接下来我们来利用代码讲解下具体每个钩子的实际作用。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"refHook"</span> &gt;</span>this is refHook<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">message</span> : <span class="string">"this is data message"</span></div><div class="line">      &#125;,</div><div class="line">     <span class="attr">beforeCreate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   beforeCreate'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); <span class="comment">//undefined </span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  <span class="comment">//undefined </span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); <span class="comment">//已被初始化</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   created'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  <span class="comment">//已被初始化 </span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); <span class="comment">//已被初始化</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   beforeMount'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); <span class="comment">//已被初始化</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  <span class="comment">//已被初始化 </span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); <span class="comment">//已被初始化</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   mounted'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); <span class="comment">//已被初始化</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  <span class="comment">//已被初始化 </span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); <span class="comment">//已被初始化</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   beforeUpdate'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data); </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); </div><div class="line">      &#125;,</div><div class="line">      <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   updated'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);  </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);  </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); </div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeDestroy</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   beforeDestroy'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);  </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);   </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs); </div><div class="line">      &#125;,</div><div class="line">      <span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;   destroyed'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el); </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);  </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message);   </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</div><div class="line">      &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如下图我们看到从创建到挂载的整个流程，特别注意的是，在<code>beforeMount</code>时，我们可以看到<code>el</code>还是<code>[[ message ]]</code>(<em>ps: 这里的 [ 指的是花括弧，因为hexo会把花括弧给视为关键字符</em>)，这里就是运用到了<strong>visual dom</strong>的原理，直到<code>mounted</code>才把数据渲染进去。</p>
<p><img src="/images/vue/vue-15.png" alt=""></p>
<p><strong>小结：</strong></p>
<ol>
<li><p><code>beforecreated</code>：el 和 data 还未初始化，<del>但是refs已经初始化完成了</del>，refs也是只是拿到对象，属性方法还没渲染完毕([Vue warn]: Error in beforecreated hook)。</p>
</li>
<li><p><code>created</code>：完成了 data 数据的初始化，el没有</p>
</li>
<li><p><code>beforeMount</code>：完成了 el 和 data 初始化 </p>
</li>
<li><p><code>mounted</code>：完成挂载，refs的组件属性方法渲染完成</p>
</li>
</ol>
<p>在控制台输入<code>app.message = &#39;hello vue&#39;</code>，会看到vue触发<code>beforeUpdate</code>以及<code>updated</code>。</p>
<p><img src="/images/vue/vue-16.png" alt=""></p>
<p>至于销毁，<code>app.$destroy()</code>，会触发<code>beforeDestroy</code>和<code>destroyed</code>，但是销毁之后，我们重新修改<code>app.message = &#39;hello&#39;</code>是不会再生效的了，也就是原先的dom依旧存在，但是已经无法使用vue来控制dom元素的变化了。</p>
<p>那么组件的生命周期是什么样的呢？我们同样也来做一下简单的模拟。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">child-com</span> <span class="attr">:child-msg</span>=<span class="string">"childMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-com</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">Vue.component(<span class="string">'childCom'</span>, &#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">"&lt;div&gt;&#123;&#123;childMsg&#125;&#125; - &#123;&#123;message&#125;&#125;&lt;/div&gt;"</span>,</div><div class="line">  <span class="attr">props</span>: [<span class="string">'childMsg'</span>],</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">message</span>: <span class="string">"this is child data message"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">beforeCreate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child beforeCreate'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"props  : "</span> + <span class="keyword">this</span>.childMsg, <span class="keyword">this</span>.childMsg);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child created'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"props  : "</span> + <span class="keyword">this</span>.childMsg, <span class="keyword">this</span>.childMsg);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">beforeMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child beforeMount'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"props  : "</span> + <span class="keyword">this</span>.childMsg, <span class="keyword">this</span>.childMsg);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child mounted'</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"props  : "</span> + <span class="keyword">this</span>.childMsg, <span class="keyword">this</span>.childMsg);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child beforeUpdate'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child updated'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">beforeDestroy</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child beforeDestroy'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  child destroyed'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">message</span> : <span class="string">"this is data message"</span>,</div><div class="line">        <span class="attr">childMsg</span>: <span class="string">"this is childMsg"</span></div><div class="line">    &#125;,</div><div class="line">     <span class="attr">beforeCreate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent beforeCreate'</span>);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent created'</span>);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent beforeMount'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent mounted'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el, <span class="keyword">this</span>.$el);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"data   : "</span> + <span class="keyword">this</span>.$data, <span class="keyword">this</span>.$data);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"message: "</span> + <span class="keyword">this</span>.message, <span class="keyword">this</span>.message); </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>, <span class="string">"refs   : "</span> + <span class="keyword">this</span>.$refs, <span class="keyword">this</span>.$refs);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent beforeUpdate'</span>);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent updated'</span>);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeDestroy</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent beforeDestroy'</span>);</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.group(<span class="string">'=========================================&gt;&gt;&gt;&gt;&gt;&gt;  parent destroyed'</span>);</div><div class="line">      &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们可以看到，<code>props</code>的数据是跟<code>data</code>的出现周期是一样的，组件是在父容器执行<code>beforeMount</code>时初始化的，在<code>beforeCreate</code>操作<code>props</code>数据则会报错，因为那个时候还没挂载到app实例化对象上。还有注意一下<code>parent beforeMount</code>，这个跟之前说的虚拟dom的原理一样，先占坑，然后再挂载。</p>
<p><img src="/images/vue/vue-17.png" alt=""></p>
<p>在<code>created</code>时，组件的<code>props</code>数据出来了，注意组件的<code>el</code>在<code>beforeMount</code>时，是不会像父容器那样先占坑的，而是等到<code>mounted</code>之后才把数据渲染上去，之后返回父容器的<code>mounted</code>方法，才会把组件数据都渲染到dom上面去。</p>
<p><img src="/images/vue/vue-18.png" alt=""></p>
<p><strong>总结：</strong></p>
<blockquote>
<p>beforecreate : 举个栗子：可以在这加个loading事件<br>created ：在这结束loading，还做一些初始化，实现函数自执行<br>mounted ： 在这发起后端请求，拿回数据，配合路由钩子做一些事情<br>beforeDestory： 你确认删除XX吗？<br>destoryed ：当前组件已被删除，清空相关内容</p>
</blockquote>
<p>参考资料：<a href="http://www.cnblogs.com/gagag/p/6246493.html" target="_blank" rel="external">http://www.cnblogs.com/gagag/p/6246493.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue - props]]></title>
      <url>https://lucius0.github.io/2017/02/24//archivers/vue-props/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Vue 2.x相比较Vue 1.x而言，升级变化除了实现了Virtual-Dom以外，给使用者最大不适就是移除的组件的<code>props</code>的双向绑定功能。以往在Vue1.x中利用<code>props</code>的<code>twoWay</code>和<code>.sync</code>绑定修饰符就可以实现<code>props</code>的双向绑定功能，但是在Vue2中彻底废弃了此功能，如果需要双向绑定需要自己来实现。</p>
<h2 id="Vue2的组件props通信方式"><a href="#Vue2的组件props通信方式" class="headerlink" title="Vue2的组件props通信方式"></a>Vue2的组件props通信方式</h2><p>在Vue2中组件的props的数据流动改为了只能单向流动，即只能由组件外（调用组件方）通过组件的DOM属性<code>attribute</code>传递<code>props</code>给组件内，组件内只能被动接收组件外传递过来的数据，并且在组件内，不能修改由外层传来的<code>props</code>数据。</p>
<p><img src="/images/vue/vue-12.jpg" alt=""></p>
<p>关于这一点的修改官方给的解释：</p>
<blockquote>
<p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</p>
</blockquote>
<p>虽然废弃了props的双向绑定对于整个项目整体而言是有利且正确的，但是在某些时候我们确实需要从组件内部修改props的需求</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>假设我要做一个iOS风格的开关按钮，需求就只有两个：</p>
<ol>
<li><p>点击按钮实现 开/关 状态切换</p>
</li>
<li><p>不点击按钮，也可以通过外部修改数据切换开关状态，比如级联联动开关。</p>
</li>
</ol>
<p><img src="/images/vue/vue-13.jpg" alt=""></p>
<p>代码大致是类似这样的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!--开关组件--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">switchbtn</span> <span class="attr">:result</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">switchbtn</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!--外部控制--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"change"</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//开关组件代码</span></div><div class="line">Vue.component(<span class="string">"switchbtn"</span>,&#123;</div><div class="line">    <span class="attr">template</span>:<span class="string">"&lt;div @click='change'&gt;&#123;&#123;result?'开':'关'&#125;&#125;&lt;/div&gt;"</span>,</div><div class="line">    <span class="attr">props</span>:[<span class="string">"result"</span>],</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">        change()&#123;</div><div class="line">            <span class="keyword">this</span>.result=!<span class="keyword">this</span>.result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//调用组件</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">"#app"</span>,</div><div class="line">    <span class="attr">data</span>:&#123;</div><div class="line">        <span class="attr">result</span>:<span class="literal">true</span><span class="comment">//开关状态数据</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">        change()&#123;</div><div class="line">            <span class="keyword">this</span>.result=!<span class="keyword">this</span>.result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>但是在vue2.0中上面的代码在点击开关时会报错：</p>
<blockquote>
<p>[Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “result” (found in component )</p>
</blockquote>
<p>组件内不能修改props的值，同时修改的值也不会同步到组件外层，即调用组件方不知道组件内部当前的状态是什么</p>
<h2 id="实现组件属性的双向绑定方式"><a href="#实现组件属性的双向绑定方式" class="headerlink" title="实现组件属性的双向绑定方式"></a>实现组件属性的双向绑定方式</h2><h3 id="在组件内的data对象中创建一个props属性的副本"><a href="#在组件内的data对象中创建一个props属性的副本" class="headerlink" title="在组件内的data对象中创建一个props属性的副本"></a>在组件内的data对象中创建一个props属性的副本</h3><p>因为<code>result</code>不可写，所以需要在data中创建一个副本<code>myResult</code>变量，初始值为props属性<code>result</code>的值，同时在组件内所有需要调用props的地方调用这个data对象<code>myResult</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">"switchbtn"</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">"&lt;div @click='change'&gt;&#123;&#123;myResult?'开':'关'&#125;&#125;&lt;/div&gt;"</span>,</div><div class="line">    <span class="attr">props</span>: [<span class="string">"result"</span>],</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">myResult</span>: <span class="keyword">this</span>.result<span class="comment">//data中新增字段</span></div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    ......</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="创建针对props属性的watch来同步组件外对props的修改"><a href="#创建针对props属性的watch来同步组件外对props的修改" class="headerlink" title="创建针对props属性的watch来同步组件外对props的修改"></a>创建针对props属性的watch来同步组件外对props的修改</h3><p>此时在组件外（父组件）修改了组件的props，会同步到组件内对应的props上，但是不会同步到你刚刚在data对象中创建的那个副本上，所以需要再创建一个针对props属性<code>result</code>的watch（监听），当props修改后对应data中的副本<code>myResult</code>也要同步数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">"switchbtn"</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">"&lt;div @click='change'&gt;&#123;&#123;myResult?'开':'关'&#125;&#125;&lt;/div&gt;"</span>,</div><div class="line">    <span class="attr">props</span>: [<span class="string">"result"</span>],</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">myResult</span>: <span class="keyword">this</span>.result</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">watch</span>: &#123;</div><div class="line">        result(val) &#123;</div><div class="line">            <span class="keyword">this</span>.myResult = val;<span class="comment">//新增result的watch，监听变更并同步到myResult上</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    ......</div></pre></td></tr></table></figure>
<h3 id="创建针对props副本的watch，通知到组件外"><a href="#创建针对props副本的watch，通知到组件外" class="headerlink" title="创建针对props副本的watch，通知到组件外"></a>创建针对props副本的watch，通知到组件外</h3><p>此时在组件内修改了props的副本<code>myResult</code>，组件外不知道组件内的props状态，所以需要再创建一个针对props副本<code>myResult</code>，即对应data属性的watch。<br>在组件内向外层（父组件）发送通知，通知组件内属性变更，然后由外层（父组件）自己来变更他的数据</p>
<p><strong>最终全部代码：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">switchbtn</span> <span class="attr">:result</span>=<span class="string">"result"</span> @<span class="attr">on-result-change</span>=<span class="string">"onResultChange"</span>&gt;</span><span class="tag">&lt;/<span class="name">switchbtn</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"change"</span> @<span class="attr">click</span>=<span class="string">"change"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">"switchbtn"</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">"&lt;div @click='change'&gt;&#123;&#123;myResult?'开':'关'&#125;&#125;&lt;/div&gt;"</span>,</div><div class="line">    <span class="attr">props</span>: [<span class="string">"result"</span>],</div><div class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">myResult</span>: <span class="keyword">this</span>.result<span class="comment">//①创建props属性result的副本--myResult</span></div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">watch</span>: &#123;</div><div class="line">        result(val) &#123;</div><div class="line">            <span class="keyword">this</span>.myResult = val;<span class="comment">//②监听外部对props属性result的变更，并同步到组件内的data属性myResult中</span></div><div class="line">        &#125;,</div><div class="line">        myResult(val)&#123;</div><div class="line">            <span class="comment">//xxcanghai 小小沧海 博客园</span></div><div class="line">            <span class="keyword">this</span>.$emit(<span class="string">"on-result-change"</span>,val);<span class="comment">//③组件内对myResult变更后向外部发送事件通知</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        change() &#123;</div><div class="line">            <span class="keyword">this</span>.myResult = !<span class="keyword">this</span>.myResult;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">"#app"</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">result</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">        change() &#123;</div><div class="line">            <span class="keyword">this</span>.result = !<span class="keyword">this</span>.result;</div><div class="line">        &#125;,</div><div class="line">        onResultChange(val)&#123;</div><div class="line">            <span class="keyword">this</span>.result=val;<span class="comment">//④外层调用组件方注册变更方法，将组件内的数据变更，同步到组件外的数据状态中</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>至此，实现了组件内数据与组件外的数据的<strong>双向绑定</strong>，组件内外数据的同步。最后归结为一句话就是：组件内部自己变了告诉外部，外部决定要不要变。</p>
<p><img src="/images/vue/vue-14.jpg" alt=""></p>
<h3 id="什么样的props适合做双向绑定？"><a href="#什么样的props适合做双向绑定？" class="headerlink" title="什么样的props适合做双向绑定？"></a>什么样的props适合做双向绑定？</h3><p>首先要声明的是双向绑定的props肯定是不利于组件间的数据状态管理，尤其是在复杂的业务中更是如此，所以要尽可能的少用双向绑定，过于复杂的数据处理建议使用Vuex （<a href="http://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="external">http://vuex.vuejs.org/zh-cn/intro.html</a>）</p>
<p>但是在我们平时使用过程中又确实有props双向绑定的需求，个人认为只有在满足以下条件时再使用双向绑定的props。</p>
<ol>
<li><p>组件内部需要修改props。</p>
</li>
<li><p>组件需要可以由外部在运行时动态控制，而非单纯初始化。</p>
</li>
<li><p>组件外部需要读取组件内的状态来进行处理</p>
</li>
</ol>
<p>满足上述条件的有比如本例中的switch开关组件，需要外部控制开关状态；再比如Tab多标签页组件的activeIndex属性，需要可以由外部控制标签页当前打开哪一页等等。</p>
<h2 id="自动化的props双向绑定处理"><a href="#自动化的props双向绑定处理" class="headerlink" title="自动化的props双向绑定处理"></a>自动化的props双向绑定处理</h2><h3 id="Vue的mixin组件——propsync"><a href="#Vue的mixin组件——propsync" class="headerlink" title="Vue的mixin组件——propsync"></a>Vue的mixin组件——propsync</h3><p>通过上例也可以看出在Vue2.0中实现props的双向绑定很麻烦，如果有两个props需要做双向绑定上面的代码就要实现两遍，代码极其冗余。所以我写了一个mixin来自动化处理props的双向绑定的需求——<code>propsync</code>。</p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol>
<li><p>实现了在组件内自动创建所有prop对应的data属性，方便组件内修改prop使用。解决了vue2.0中不允许组件内直接修改prop的设计。</p>
</li>
<li><p>实现了组件外修改组件prop，组件内自动同步修改到data属性。</p>
</li>
<li><p>实现了组件内修改了data属性（由prop创建的），自动向组件外发出事件通知有内部prop修改。由组件外决定是否要将修改同步到组件外</p>
</li>
</ol>
<h3 id="propsync的使用方法"><a href="#propsync的使用方法" class="headerlink" title="propsync的使用方法"></a>propsync的使用方法</h3><h4 id="编写组件"><a href="#编写组件" class="headerlink" title="编写组件"></a>编写组件</h4><ol>
<li><p>对于编写组件时，如果需要props双向绑定，则直接引入mixin，并在配置中声明mixin即可： <code>mixins: [propsync]</code></p>
</li>
<li><p>此mixin会根据prop的名称生成对应的data属性名，默认为在prop属性名前面增加”p_”，即若prop中有字段名为<code>active</code>，则自动生成名为<code>p_active</code>的data字段（props到data的名称变更方法可自行修改，详见propsync源码开头配置）</p>
</li>
<li><p>propsync默认会将所有props创建双向绑定，可通过<code>propsync:false</code>来声明此props不需要创建双向绑定。</p>
</li>
</ol>
<p>例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> propsync <span class="keyword">from</span> <span class="string">'./mixins/propsync'</span>;<span class="comment">//引入mixin文件</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"tab"</span>,</div><div class="line">  <span class="attr">mixins</span>: [propsync],<span class="comment">//声明使用propsync的mixin (https://cn.vuejs.org/v2/api/#mixins)</span></div><div class="line">  props: &#123;</div><div class="line">    <span class="attr">active</span>: &#123;</div><div class="line">      <span class="attr">type</span>: [<span class="built_in">String</span>, <span class="built_in">Number</span>],<span class="comment">//会被propsync自动实现双向绑定，在data中创建p_active变量</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">width</span>: &#123;</div><div class="line">      <span class="attr">type</span>: [<span class="built_in">Number</span>, <span class="built_in">String</span>],</div><div class="line">      <span class="attr">propsync</span>:<span class="literal">false</span><span class="comment">//不会被propsync实现双向绑定</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    setActive(page, index, e) &#123;</div><div class="line">      <span class="keyword">this</span>.p_active = index;<span class="comment">//可以直接使用this.p_active</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="调用组件"><a href="#调用组件" class="headerlink" title="调用组件"></a>调用组件</h4><p>引入propsync后，会在内部双向绑定的data变更后触发一个<code>onPropsChange</code>事件。遂在调用组件处，增加一个事件监听 onPropsChange（可修改），当组件内修改了props时<code>propsync</code>会触发此事件，返回参与依次为：<strong>修改prop名称，修改后值，修改前值</strong>。可以由当前组件调用方（父组件）来决定是否要将组件内的变更同步到调用方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;tab :active=<span class="string">"active"</span> @onPropsChange=<span class="string">"change"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">tab</span>&gt;</span></span></div><div class="line">  </div><div class="line">......略</div><div class="line">&#123;</div><div class="line">  <span class="attr">data</span>:&#123;</div><div class="line">   <span class="attr">active</span>:<span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>:&#123;</div><div class="line">   <span class="attr">change</span>:<span class="function"><span class="keyword">function</span>(<span class="params">propName,newVal,oldVal</span>)</span>&#123;</div><div class="line">     <span class="keyword">this</span>[propName]=newVal;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">"组件tab的"</span> +propName+ <span class="string">"属性变更为"</span> +newVal);</div><div class="line">   &#125; </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Vue的mixin组件propsync已经托管至Github：<a href="https://github.com/xxcanghai/cnblogsFiles/blob/master/vue-mixins/propsync.js" target="_blank" rel="external">https://github.com/xxcanghai/cnblogsFiles/blob/master/vue-mixins/propsync.js</a></p>
<p>原文链接：<a href="http://www.cnblogs.com/xxcanghai/p/6124699.html" target="_blank" rel="external">http://www.cnblogs.com/xxcanghai/p/6124699.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git diff]]></title>
      <url>https://lucius0.github.io/2017/02/23//archivers/git-diff/</url>
      <content type="html"><![CDATA[<h2 id="change却未stage"><a href="#change却未stage" class="headerlink" title="change却未stage"></a>change却未stage</h2><p>常见的一种做法就是使用<code>git diff</code>来查看工作目录还未stage的文件差异。</p>
<p><strong>实验方法：</strong></p>
<ol>
<li><p>修改一下simplegit.rb，添加一个方法</p>
</li>
<li><p>然后在README文件中添加一个作者</p>
</li>
<li><p>然后我们用<code>git add</code>命令把README文件载入(stage)</p>
</li>
<li><p>运行<code>git status</code>会显示README载入了，而simplegit.rb只是修改了还未载入</p>
</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ vim lib/simplegit.rb</div><div class="line">$ vim README</div><div class="line">$ git add README</div><div class="line">$ git status</div><div class="line"># On branch master</div><div class="line"># Changes to be committed:</div><div class="line">#   (use "git reset HEAD &lt;file&gt;..." to unstage)</div><div class="line">#</div><div class="line"># modified:   README</div><div class="line">#</div><div class="line"># Changed but not updated:</div><div class="line">#   (use "git add &lt;file&gt;..." to update what will be committed)</div><div class="line">#   (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</div><div class="line">#</div><div class="line"># modified:   lib/simplegit.rb</div><div class="line">#</div></pre></td></tr></table></figure>
<p>那么，我现在想查看一下对simplegit.rb文件究竟做了什么改动？在我载入之前怎么查看这些改动的内容呢？答案是只需运行不带任何参数的<code>git diff</code>命令即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git diff</div><div class="line">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</div><div class="line">index dd5ecc4..8ac6604 100644</div><div class="line">--- a/lib/simplegit.rb</div><div class="line">+++ b/lib/simplegit.rb</div><div class="line">@@ -25,6 +25,10 @@ class SimpleGit</div><div class="line">     command("git log -n 25 #&#123;treeish&#125;")</div><div class="line">   end</div><div class="line">+  def log_single(branch = 'master')</div><div class="line">+    command("git log --pretty=oneline #&#123;branch&#125;")</div><div class="line">+  end</div><div class="line">+</div><div class="line">   def blame(path)</div><div class="line">     command("git blame #&#123;path&#125;")</div><div class="line">   end</div></pre></td></tr></table></figure>
<p>这样就可以看到我添加到文件中的内容，现在我可以决定是不是要将其载入了。注意，README文件的修改并没有显示出来。</p>
<h2 id="stage但未commit"><a href="#stage但未commit" class="headerlink" title="stage但未commit"></a>stage但未commit</h2><p>为了查看载入（staged）而并未提交（not committed）的内容差异，可以使用<code>git diff --stage</code>命令（在git 1.6之前的版本中，使用<code>--cached</code>）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git diff --staged</div><div class="line">diff --git a/README b/README</div><div class="line">index c526f88..879f0d4 100644</div><div class="line">--- a/README</div><div class="line">+++ b/README</div><div class="line">@@ -8,3 +8,4 @@ It is an example for the Git Peepcode book that I'm currently writin</div><div class="line"> Author : Scott Chacon (schacon@gmail.com)</div><div class="line">          Orange Peel Chacon (opchacon@gmail.com)</div><div class="line">          Magnus O. Chacon (mchacon@gmail.com)</div><div class="line">+         Josephine Chacon (jo.chacon@gmail.com)</div></pre></td></tr></table></figure>
<p>适应情形：在运行<code>git commit（不带&#39;-a&#39;）</code>之前，查看所有载入而未提交的变更内容。</p>
<h2 id="最后一次提交之后的所有变更"><a href="#最后一次提交之后的所有变更" class="headerlink" title="最后一次提交之后的所有变更"></a>最后一次提交之后的所有变更</h2><p>现在，如果你想查看最后一次提交之后工作目录中文件的变更，你可以在<code>git diff</code>之后加一个HEAD来进行比对：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">$ git diff HEAD</div><div class="line">diff --git a/README b/README</div><div class="line">index c526f88..879f0d4 100644</div><div class="line">--- a/README</div><div class="line">+++ b/README</div><div class="line">@@ -8,3 +8,4 @@ It is an example for the Git Peepcode book that I'm currently writin</div><div class="line"> Author : Scott Chacon (schacon@gmail.com)</div><div class="line">          Orange Peel Chacon (opchacon@gmail.com)</div><div class="line">          Magnus O. Chacon (mchacon@gmail.com)</div><div class="line">+         Josephine Chacon (jo.chacon@gmail.com)</div><div class="line">diff --git a/lib/simplegit.rb b/lib/simplegit.rb</div><div class="line">index dd5ecc4..8ac6604 100644</div><div class="line">--- a/lib/simplegit.rb</div><div class="line">+++ b/lib/simplegit.rb</div><div class="line">@@ -25,6 +25,10 @@ class SimpleGit</div><div class="line">     command("git log -n 25 #&#123;treeish&#125;")</div><div class="line">   end</div><div class="line">+  def log_single(branch = 'master')</div><div class="line">+    command("git log --pretty=oneline #&#123;branch&#125;")</div><div class="line">+  end</div><div class="line">+</div><div class="line">   def blame(path)</div><div class="line">     command("git blame #&#123;path&#125;")</div><div class="line">   end</div></pre></td></tr></table></figure>
<p>适用情形：在运行<code>git commit -a</code>之前。显示所有载入的和未载入的变更。</p>
<h2 id="从一个特定点开始文件的修改情况"><a href="#从一个特定点开始文件的修改情况" class="headerlink" title="从一个特定点开始文件的修改情况"></a>从一个特定点开始文件的修改情况</h2><p>这也是最常见的一个问题。譬如，如何查看创建v1.6这个标签之后README文件所发生的修改呢，可以这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ git diff v1<span class="number">.6</span><span class="number">.0</span> -- README </div><div class="line">diff --git a/README b/README</div><div class="line">index <span class="number">548142</span>c.<span class="number">.5</span>fa41b7 <span class="number">100644</span></div><div class="line">--- a/README</div><div class="line">+++ b/README</div><div class="line">@@ <span class="number">-24</span>,<span class="number">7</span> +<span class="number">24</span>,<span class="number">7</span> @@ It was originally written by Linus Torvalds <span class="keyword">with</span> help <span class="keyword">of</span> a group o</div><div class="line"> hackers around the net. It is currently maintained by Junio C Hamano.</div><div class="line"> Please read the file INSTALL <span class="keyword">for</span> installation instructions.</div><div class="line">-See Documentation/tutorial.txt to get started, then see</div><div class="line">+See Documentation/gittutorial.txt to get started, then see</div><div class="line"> Documentation/everyday.txt <span class="keyword">for</span> a useful minimum set <span class="keyword">of</span> commands,</div><div class="line"> and <span class="string">"man git-commandname"</span> <span class="keyword">for</span> documentation <span class="keyword">of</span> each command.</div></pre></td></tr></table></figure>
<p>上面就显示出了工作目录中README文件的版本差异–如果你做了本地修改，载入或未载入，都会在这次比对中显示出来。</p>
<h2 id="两次提交的差异比对"><a href="#两次提交的差异比对" class="headerlink" title="两次提交的差异比对"></a>两次提交的差异比对</h2><p>如果你想对两次快照做差异比对，也即项目的两个版本之间比对–直接在<code>git diff</code>后跟上要比对的两个版本号即可：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff v1<span class="number">.0</span> v1<span class="number">.1</span></div></pre></td></tr></table></figure>
<p>diff命令加这样的参数，显示某些统计数，下面是显示v1.6.1.1和v1.6.1.2两个版本之间差异的统计数字：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ git diff v1<span class="number">.6</span><span class="number">.1</span><span class="number">.1</span> v1<span class="number">.6</span><span class="number">.1</span><span class="number">.2</span> --stat</div><div class="line"> Documentation/RelNotes<span class="number">-1.6</span><span class="number">.1</span><span class="number">.2</span>.txt |   <span class="number">39</span> +++++++++++++</div><div class="line"> Documentation/config.txt           |    <span class="number">4</span> +-</div><div class="line"> Documentation/git-ls-tree.txt      |    <span class="number">8</span> +++-</div><div class="line"> GIT-VERSION-GEN                    |    <span class="number">2</span> +-</div><div class="line"> RelNotes                           |    <span class="number">2</span> +-</div><div class="line"> builtin-commit.c                   |    <span class="number">6</span> ++</div><div class="line"> builtin-gc.c                       |    <span class="number">8</span> ++-</div><div class="line"> builtin-grep.c                     |   <span class="number">15</span> +++++-</div><div class="line"> builtin-log.c                      |   <span class="number">28</span> +++++++++-</div><div class="line"> builtin-ls-tree.c                  |    <span class="number">7</span> ++-</div><div class="line"> builtin-send-pack.c                |   <span class="number">43</span> +++++++--------</div><div class="line"> diffcore-rename.c                  |    <span class="number">9</span> +++-</div><div class="line"> git-sh-setup.sh                    |    <span class="number">2</span> +-</div><div class="line"> sha1_file.c                        |    <span class="number">3</span> +-</div><div class="line"> sha1_name.c                        |    <span class="number">2</span> +-</div><div class="line"> t/t2300-cd-to-toplevel.sh          |    <span class="number">4</span> +-</div><div class="line"> t/t4014-format-patch.sh            |   <span class="number">52</span> +++++++++++++++++-</div><div class="line"> t/t5519-push-alternates.sh         |  <span class="number">106</span> ++++++++++++++++++++++++++++++++++++</div><div class="line"> t/t7002-grep.sh                    |    <span class="number">7</span> +++</div><div class="line"> test-path-utils.c                  |    <span class="number">2</span> +-</div><div class="line"> <span class="number">20</span> files changed, <span class="number">306</span> insertions(+), <span class="number">43</span> deletions(-)</div></pre></td></tr></table></figure>
<p>还可以深入查看某个具体文件的变更比对：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git diff v1<span class="number">.6</span><span class="number">.1</span><span class="number">.1</span> v1<span class="number">.6</span><span class="number">.1</span><span class="number">.2</span> -- sha1_file.c</div><div class="line">diff --git a/sha1_file.c b/sha1_file.c</div><div class="line">index <span class="number">52</span>d1ead..ce5ea12 <span class="number">100644</span></div><div class="line">--- a/sha1_file.c</div><div class="line">+++ b/sha1_file.c</div><div class="line">@@ <span class="number">-2337</span>,<span class="number">7</span> +<span class="number">2337</span>,<span class="number">8</span> @@ <span class="keyword">static</span> int create_tmpfile(char *buffer, size_t bufsiz, <span class="keyword">const</span> c</div><div class="line"> <span class="keyword">static</span> int write_loose_object(<span class="keyword">const</span> unsigned char *sha1, char *hdr, int hdrlen,</div><div class="line">                              <span class="keyword">void</span> *buf, unsigned long len, time_t mtime)</div><div class="line"> &#123;</div><div class="line">-       int fd, size, ret;</div><div class="line">+       int fd, ret;</div><div class="line">+       size_t size;</div><div class="line">        unsigned char *compressed;</div><div class="line">        z_stream stream;</div><div class="line">        char *filename;</div></pre></td></tr></table></figure>
<p>执行之后会显示sha1_file.c文件在v1.6.1.1和v1.6.1.2两个版本之间的比对结果。</p>
<h2 id="在合并某分支前查看变更内容"><a href="#在合并某分支前查看变更内容" class="headerlink" title="在合并某分支前查看变更内容"></a>在合并某分支前查看变更内容</h2><p>这是个比较奇怪的问题，因为如果你开始是工作在一个主分支上，而后生成了两个分支，如果直接对比快照的话，结果只会显示从一个状态到另一个状态的差异比对结果。<br>举例来说，如果你创建了一个<code>dev</code>的分支，进入这个分支给<code>lib/simplegit.rb</code>添加了一个函数，然后回到了<code>master</code>分支，删除了README文件的一行，然后运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff master dev</div></pre></td></tr></table></figure>
<p>结果会显示你给某个文件中添加了方法，还往README文件添加了一行内容。为什么会这样？因为对<code>dev</code>分支来说，README文件还是原样，而在’master’上，你已经删掉了一行，这样直接对两个快照进行对比就好似’dev’分支添加了一行进去一样。你想查看的实际上是在创建dev分支之后在这条分支上的差异对比，所以应该执行这样的命令：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff master...dev</div></pre></td></tr></table></figure>
<p>这就不会拿master分支上最后一个快照和dev分支上最后一个快照进行比对–而是用dev与master所交的那个分歧点和现在的dev分支上最后一个快照进行比对。在我们这个例子中，这样比对的结果是显示对那个文件添加了一个函数。如果你目前正处在master分支上，你可以运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff ...dev</div></pre></td></tr></table></figure>
<p>跟上面的结果是一样的。所以，如果你想查看将要合并的某个分支会有什么样的变化，可以执行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git diff ...(branch)</div></pre></td></tr></table></figure>
<p>将branch替换为你想要合并的分支名即可。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js 2.0 源码学习]]></title>
      <url>https://lucius0.github.io/2017/01/20//archivers/code-review-for-vue/</url>
      <content type="html"><![CDATA[<h2 id="Vue2-0-介绍"><a href="#Vue2-0-介绍" class="headerlink" title="Vue2.0 介绍"></a>Vue2.0 介绍</h2><p>1.0版本正式发布后，就在业务中开始使用，将原先jQuery的功能逐步的进行迁移。16年10月1日，Vue2.0版本正式发布了，其中核心代码都进行了重写，于是就专门花时间，对Vue2.0的源码进行了学习。本篇文章就是2.0源码学习的总结。</p>
<p>先对Vue2.0的新特性做一个简单的介绍：</p>
<ul>
<li><p><strong>大小 &amp; 性能</strong>：Vue2.0的线上包gzip后只有12kb，而1.0需要22kb，react需要44kb。而且Vue2.0的性能在react等几个框架中，性能是最快的。</p>
</li>
<li><p><strong>VDOM</strong>：实现了virtual dom，并且将静态子树进行了提取，减少界面重绘时的对比。与1.0对比性能有明显提升。</p>
</li>
<li><p><strong>Server Render</strong>：2.0还对Server Render做了支持。</p>
</li>
</ul>
<p>Vue的最新源码可以去<a href="https://github.com/vuejs/vue" target="_blank" rel="external">https://github.com/vuejs/vue</a>获得。本文讲的是2.0.3版本，2.0.3可以去<a href="https://github.com/vuejs/vue/tree/v2.0.3" target="_blank" rel="external">https://github.com/vuejs/vue/tree/v2.0.3</a>这里获得。</p>
<p>下面开始进入正题，首先从生命周期开始。</p>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="/images/vue/vue-07.png" alt=""></p>
<p>上图就是官方给出的Vue 2.0的生命周期图，其中包含了Vue对象生命周期过程中的几个核心步骤。了解这几个过程，可以很好帮助我们理解Vue的创建与销毁过程。从图中我们可以看出，生命周期分为4个周期：</p>
<ul>
<li><p><strong>create</strong>：<code>new Vue</code>时，会先进行create，创建出Vue对象。</p>
</li>
<li><p><strong>mount</strong>：根据<code>el，template，render</code>方法等属性，会生成DOM，并添加到对应位置。</p>
</li>
<li><p><strong>update</strong>：当数据发生变化后，会重新渲染DOM，并进行替换。</p>
</li>
<li><p><strong>destroy</strong>：销毁时触发。</p>
</li>
</ul>
<p>那么这4个过程在源码中是怎么实现的？我们从<code>new Vue</code>中开始。</p>
<h2 id="new-Vue"><a href="#new-Vue" class="headerlink" title="new Vue"></a>new Vue</h2><p>为了更好的理解new的过程，我整理了一个序列图：</p>
<p><img src="/images/vue/vue-08.jpg" alt=""></p>
<p>new Vue的过程主要涉及到三个对象：<code>vm、compiler、watcher</code>。其中，<code>vm</code>表示<code>Vue</code>的具体对象；<code>compiler</code>负责将<code>template</code>解析为<code>AST render</code>方法；<code>watcher</code>用于观察数据变化，以实现数据变化后进行<code>re-render</code>。</p>
<p>下面来分析下具体过程和代码：</p>
<p>首先，运行<code>new Vue()</code>的时候，会进入代码<code>src/core/instance/index.js</code>的Vue构造函数中，并执行<code>this._init()</code>方法。在<code>_init</code>中，会对各个功能进行初始化，并执行<code>beforeCreate</code>和<code>created</code>两个生命周期方法。核心代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">initLifecycle(vm)</div><div class="line">initEvents(vm)</div><div class="line">callHook(vm, <span class="string">'beforeCreate'</span>)</div><div class="line">initState(vm)</div><div class="line">callHook(vm, <span class="string">'created'</span>)</div><div class="line">initRender(vm)</div></pre></td></tr></table></figure>
<blockquote>
<p>这个过程有一点需要注意：<code>beforeCreate</code>和<code>create</code>之间只有<code>initState</code>，和官方给出的生命周期并不完全一样。这里的<code>initState</code>是用于初始化<code>data，props</code>等的监听的。</p>
</blockquote>
<p>在<code>init</code>的最后，会运行<code>initRender</code>方法。在该方法中，会运行<code>vm.$mount</code>方法，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (vm.$options.el) &#123;</div><div class="line">  vm.$mount(vm.$options.el)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里的<code>vm.$mount</code>可以在业务代码中调用，这样，<code>new</code> 过程和 <code>mount</code> 过程就可以根据业务情况进行分离。</p>
</blockquote>
<p>这里的<code>$mount</code>在<code>src/entries/web-runtime-with-compiler.js</code>中，主要逻辑是根据<code>el，template，render</code>三个属性来获得<code>AST render</code>方法。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!options.render) &#123;   <span class="comment">// 如果有render方法，直接运行mount</span></div><div class="line">  <span class="keyword">let</span> template = options.template</div><div class="line">  <span class="keyword">if</span> (template) &#123;  <span class="comment">// 如果有template， 获取template参数对于的HTML作为模板</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> template === <span class="string">'string'</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (template.charAt(<span class="number">0</span>) === <span class="string">'#'</span>) &#123;</div><div class="line">        template = idToTemplate(template)</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (template.nodeType) &#123;</div><div class="line">      template = template.innerHTML</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">        warn(<span class="string">'invalid template option:'</span> + template, <span class="keyword">this</span>)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;  <span class="comment">// 如果没有template, 且存在el，则获取el的outerHTML作为模板</span></div><div class="line">    template = getOuterHTML(el)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (template) &#123; <span class="comment">// 如果获取到了模板，则将模板转化为render方法</span></div><div class="line">    <span class="keyword">const</span> &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</div><div class="line">      warn,</div><div class="line">      shouldDecodeNewlines,</div><div class="line">      <span class="attr">delimiters</span>: options.delimiters</div><div class="line">    &#125;, <span class="keyword">this</span>)</div><div class="line">    options.render = render</div><div class="line">    options.staticRenderFns = staticRenderFns</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</div></pre></td></tr></table></figure>
<blockquote>
<p>这个过程有三点需要注意：<br>1、compile时，将最大的静态子树提取出来作为单独的AST渲染方法，以提升后面vNode对比时的性能。所以，当存在多个连续的静态标签时，可以在外边添加一个静态父节点，这样，staticRenderFns数目可以减少，从而提升性能。<br>2、Vue2.0 中的模板有三种引用方法：el，template，render(JSX)。其中优先级是render &gt; template &gt; el。<br>3、el，template两种写法，最后都会通过compiler转化为render(JSX)来运行，也就是说，直接写成render(JSX)的性能是最佳的。当然，如果使用了构建工具，最终生成的包就是使用的render(JSX)。这样子，在源码上就可以不用过多考虑这一块的性能了，直接用可维护性最好的方式就行。</p>
</blockquote>
<p>将模板转化为render，用到了<code>compileToFunction</code>方法，该方法最后会通过<code>src/compiler/index.js</code>文件中的<code>compile</code>方法，将模板转化为AST语法结构的render方法，并对静态子树进行分离。</p>
<p>完成<code>render</code>方法的生成后，会进入<code>_mount(src/core/instance/lifecycle.js)</code>中进行DOM更新。该方法的核心逻辑如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vm._watcher = <span class="keyword">new</span> Watcher(vm, () =&gt; &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;, noop)</div></pre></td></tr></table></figure>
<p>首先会new一个watcher对象，在watcher对象创建后，会运行传入的方法<code>vm._update(vm._render(), hydrating)</code> (watcher的逻辑在下面的watcher小节中细讲)。其中的<code>vm._render()</code>主要作用就是运行前面的compile生成的render方法，并返回一个vNode对象。这里的vNode就是一个虚拟的DOM节点。</p>
<p>拿到vNode后，传入 <code>vm._update()</code> 方法，进行DOM更新。</p>
<h2 id="VDOM"><a href="#VDOM" class="headerlink" title="VDOM"></a>VDOM</h2><p>上面已经讲完了<code>new Vue</code>过程中的主要步骤，其中涉及到template如何转化为DOM的过程，这里单独拿出来讲下。先上序列图：</p>
<p><img src="/images/vue/vue-09.jpg" alt=""></p>
<p>从图中可以看出，从template到DOM，有三个过程：</p>
<ul>
<li><p><strong>template -&gt; AST render</strong> (compiler解析template)</p>
</li>
<li><p><strong>AST render -&gt; vNode</strong> (render方法运行)</p>
</li>
<li><p><strong>vNode -&gt; DOM</strong> (vdom.patch)</p>
</li>
</ul>
<p>首先template在compiler中解析为AST render方法的过程。上一节中有说到，<code>initState</code>后，会调用<code>src/entries/web-runtime-with-compiler.js</code>中的<code>Vue.prototype.$mount</code>方法。在<code>$mount</code>中，会获取template，然后调用<code>src/platforms/web/compiler/index.js</code>的<code>compilerToFunction</code>方法。在该方法中，会运行compile将template解析为多个render方法，也就是AST render。这里的compile在文件<code>src/compiler/index.js</code>中，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ast = parse(template.trim(), options)   <span class="comment">// 解析template为AST</span></div><div class="line">optimize(ast, options)  <span class="comment">// 提取static tree</span></div><div class="line"><span class="keyword">const</span> code = generate(ast, options)  <span class="comment">// 生成render 方法</span></div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">  ast,</div><div class="line">  <span class="attr">render</span>: code.render,</div><div class="line">  <span class="attr">staticRenderFns</span>: code.staticRenderFns</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，compile方法就是将template以AST的方式进行解析，并转化为render方法进行返回。</p>
<p>再看第二个过程，AST render -&gt; vNode。这个过程很简单，就是将AST render方法进行运行，获得返回的vNode对象。</p>
<p>最后一步，vNode -&gt; DOM。该过程中，存在vNode的对比以及DOM的添加修改操作。在上一节中，有讲到<code>vm._update()</code>方法中对DOM进行更新。<code>_update</code>的主要代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/core/instance/lifecycle.js</span></div><div class="line"><span class="keyword">if</span> (!prevVnode) &#123;</div><div class="line">  <span class="comment">// Vue.prototype.__patch__ is injected in entry points</span></div><div class="line">  <span class="comment">// based on the rendering backend used.</span></div><div class="line">  vm.$el = vm.__patch__(vm.$el, vnode, hydrating)  <span class="comment">// 首次添加</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  vm.$el = vm.__patch__(prevVnode, vnode)  <span class="comment">// 数据变化后触发的DOM更新</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，无论是首次添加还是后期的update，都是通过<code>__patch__</code>来更新的。这里的<code>__patch__</code>核心步骤是在<code>src/core/vdom/patch.js</code>中的patch方法进行实现，源码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!oldVnode) &#123;</div><div class="line">      ...</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      ...</div><div class="line">      if (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</div><div class="line">        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly)  <span class="comment">// diff并更新DOM。</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        elm = oldVnode.elm</div><div class="line">        parent = nodeOps.parentNode(elm)</div><div class="line">        ...</div><div class="line">        if (parent !== <span class="literal">null</span>) &#123;</div><div class="line">          nodeOps.insertBefore(parent, vnode.elm, nodeOps.nextSibling(elm))  <span class="comment">// 添加element到DOM。</span></div><div class="line">          removeVnodes(parent, [oldVnode], <span class="number">0</span>, <span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>首先添加很简单，就是通过<code>insertBefore</code>将转换好的element添加到DOM中。如果update，则会调动<code>patchVNode()</code>。最后来看下<code>patchVNode</code>的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span> (<span class="params">oldVnode, vnode, insertedVnodeQueue, removeOnly</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  const elm = vnode.elm = oldVnode.elm</div><div class="line">  <span class="keyword">const</span> oldCh = oldVnode.children</div><div class="line">  <span class="keyword">const</span> ch = vnode.children</div><div class="line">  ...</div><div class="line">  if (isUndef(vnode.text)) &#123;</div><div class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;  <span class="comment">// 当都存在时，更新Children</span></div><div class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;  <span class="comment">// 只存在新节点时，即添加节点</span></div><div class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class="string">''</span>)</div><div class="line">      addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;  <span class="comment">// 只存在老节点时，即删除节点</span></div><div class="line">      removeVnodes(elm, oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;  <span class="comment">// 删除了textContent</span></div><div class="line">      nodeOps.setTextContent(elm, <span class="string">''</span>)</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123; <span class="comment">// 修改了textContent</span></div><div class="line">    nodeOps.setTextContent(elm, vnode.text)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中有调用了<code>updateChildren</code>来更新子节点，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span> (<span class="params">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  while (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</div><div class="line">    <span class="keyword">if</span> (isUndef(oldStartVnode)) &#123;</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx] <span class="comment">// Vnode has been moved left</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUndef(oldEndVnode)) &#123;</div><div class="line">      oldEndVnode = oldCh[--oldEndIdx]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</div><div class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue)</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx]</div><div class="line">      newStartVnode = newCh[++newStartIdx]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</div><div class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue)</div><div class="line">      oldEndVnode = oldCh[--oldEndIdx]</div><div class="line">      newEndVnode = newCh[--newEndIdx]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></div><div class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue)</div><div class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx]</div><div class="line">      newEndVnode = newCh[--newEndIdx]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></div><div class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue)</div><div class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</div><div class="line">      oldEndVnode = oldCh[--oldEndIdx]</div><div class="line">      newStartVnode = newCh[++newStartIdx]</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到<code>updateChildren</code>中，又通过<code>patchVnode</code>来更新当前节点。梳理一下，<code>patch</code>通过<code>patchVnode</code>来更新根节点，然后通过<code>updateChildren</code>来更新子节点，具体子节点，又通过<code>patchVnode</code>来更新，通过一个类似于递归的方式逐个节点的完成对比和更新。</p>
<blockquote>
<p>Vue 2.0中如何去实现VDOM的思路是否清晰，通过4层结构，很好的实现了可维护性，也为实现server render，weex等功能提供了可能。拿server render举例，只需要将最后<code>vNode -&gt; DOM</code> 改成 <code>vNode -&gt; String</code> 或 <code>vNode -&gt; Stream</code>，就可以实现server render。剩下的compiler和Vue核心逻辑都不需要改。</p>
</blockquote>
<h2 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h2><p>我们都知道MVVM框架的特征就是当数据发生变化后，会自动更新对应的DOM节点。使用MVVM之后，业务代码中就可以完成不写DOM操作代码，不仅可以将业务代码聚焦在业务逻辑上，还可以提供业务的可维护性和可测试性。那么Vue2.0中是怎么实现对数据变化的监听呢？照例，先看序列图：</p>
<p><img src="/images/vue/vue-10.jpg" alt=""></p>
<p>可以看出，整个Watcher的过程可以分为三个过程。</p>
<ul>
<li><p>对state设置setter/getter</p>
</li>
<li><p>对vm设置好watcher，添加好state触发setter时的排序方法</p>
</li>
<li><p>state变化触发执行</p>
</li>
</ul>
<p>在前面有说过，在生命周期函数<code>beforeCreate</code>和<code>created</code>直接，会运行方法<code>initState()</code>。在<code>initState</code>中，会对props，data，computed等属性添加<code>setter/getter</code>。拿data举例，设置<code>setter/getter</code>的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> data = vm.$options.data</div><div class="line">  ...</div><div class="line">  <span class="comment">// proxy data on instance</span></div><div class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</div><div class="line">  <span class="keyword">let</span> i = keys.length</div><div class="line">  <span class="keyword">while</span> (i--) &#123;</div><div class="line">    ...</div><div class="line">    proxy(vm, keys[i])   <span class="comment">// 设置vm._data为代理</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// observe data</span></div><div class="line">  observe(data)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调用<code>observe</code>方法，会对data添加好观察者，核心代码为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(obj, key, &#123;</div><div class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> value = getter ? getter.call(obj) : val</div><div class="line">    <span class="keyword">if</span> (Dep.target) &#123;</div><div class="line">      dep.depend()  <span class="comment">// 处理好依赖watcher</span></div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">    ...</div><div class="line">    childOb = observe(newVal)  <span class="comment">// 对新数据重新observe</span></div><div class="line">    dep.notify()  <span class="comment">// 通知到dep进行数据更新</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>这个时候，对data的监听已经完成。可以看到，当data发生变化时，会运行dep.notify()。在notify方法中，会去运行watcher的update方法，内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">update () &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.lazy) &#123;</div><div class="line">    <span class="keyword">this</span>.dirty = <span class="literal">true</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</div><div class="line">    <span class="keyword">this</span>.run()</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    queueWatcher(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">run () &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</div><div class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.get()</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>update</code> 方法中，<code>queueWatcher</code> 方法的目的是通过 <code>nextTicker</code> 来执行 <code>run</code> 方法，属于支线逻辑，就不分析了，这里直接看 <code>run</code> 的实现。<code>run</code> 方法其实很简单，就是简单的调用 <code>get</code> 方法，而 <code>get</code> 方法会通过执行 <code>this.getter()</code> 来更新DOM。</p>
<p>那么<code>this.getter</code>是什么呢？本文最开始分析<code>new Vue</code>过程时，有讲到运行<code>_mount</code>方法时，会运行如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vm._watcher = <span class="keyword">new</span> Watcher(vm, () =&gt; &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;, noop)</div></pre></td></tr></table></figure>
<p>那么<code>this.getter</code>就是这里Watcher方法的第二参数。来看下<code>new Watcher</code>的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> (</div><div class="line">    vm: Component,</div><div class="line">    expOrFn: string | Function,</div><div class="line">    cb: Function,</div><div class="line">    options?: Object = &#123;&#125;</div><div class="line">  ) &#123;</div><div class="line">    ...</div><div class="line">    if (<span class="keyword">typeof</span> expOrFn === <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.getter = expOrFn</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.getter = parsePath(expOrFn)</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    this.value = <span class="keyword">this</span>.lazy</div><div class="line">      ? <span class="literal">undefined</span></div><div class="line">      : <span class="keyword">this</span>.get()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，在new Vue过程中，Watcher会在构造完成后主动调用this.get()来触发this.getter()方法的运行，以达到更新DOM节点。</p>
<p>总结一下这个过程：首先_init时，会对Data设置好setter方法，setter方法中会调用dep.notify()，以便数据变化时通知DOM进行更新。然后new Watcher时，会更新DOM的方法进行设置，也就是Watcher.getter方法。最后，当Data发生变化时候，dep.notify()运行，运行到watcher.getter()时，就会去运行render和update逻辑，最终达到DOM更新的目的。</p>
<h2 id="总结和收获"><a href="#总结和收获" class="headerlink" title="总结和收获"></a>总结和收获</h2><p>刚开始觉得看源码，是因为希望能了解下Vue 2.0的实现，看看能不能得到一些从文档中无法知道的细节，用于提升运行效率。把主要流程理清楚后，的确了解到一些，这里做个整理：</p>
<ul>
<li><p>el属性传入的如果不是element，最后会通过<code>document.querySelector</code>来获取的，这个接口性能较差，所以，el传入一个element性能会更好。</p>
</li>
<li><p><code>$mount</code>方法中对html，body标签做了过滤，这两个不能用来作为渲染的根节点。</p>
</li>
<li><p>每一个组件都会从<code>_init</code>开始重新运行，所以，当存在一个长列表时，将子节点作为一个组件，性能会较差。</p>
</li>
<li><p><code>*.vue</code>文件会在构建时转化为render方法，而render方法的性能比指定template更好。所以，源码使用<code>*.vue</code>的方式，性能会更好。</p>
</li>
<li><p>如果需要自定义<code>delimiters</code>，每一个组件都需要单独指定。</p>
</li>
<li><p>如果是<code>*.vue</code>文件，制定<code>delimiters</code>是失效的，因为<code>vue-loader</code>对<code>*.vue</code>文件进行解析时，并没有将<code>delimiters</code>传递到<code>compiler.compile()</code>中。</p>
</li>
</ul>
<p>转自：<a href="https://segmentfault.com/a/1190000007484936" target="_blank" rel="external">https://segmentfault.com/a/1190000007484936</a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p>下面是取自<a href="http://jiongks.name/blog/a-big-map-to-intro-vue-next/" target="_blank" rel="external">通过一张图走进 Vue 2.0</a>的Vue2.0的结构图</p>
<p><img src="/images/vue/vue-11.jpg" alt=""></p>
<hr>
<p><strong>参考资料</strong></p>
<p><a href="http://www.cnblogs.com/dh-dh/p/5606596.html" target="_blank" rel="external">详解vue的数据binding原理</a></p>
<p><a href="https://github.com/banama/aboutVue/blob/master/vue-event.md" target="_blank" rel="external">Vue的事件解读</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js 组件]]></title>
      <url>https://lucius0.github.io/2017/01/10//archivers/vue-component/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p>
<p><img src="/images/vue/vue-02.png" alt=""></p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p><code>Vue.component(tagName, options)</code></p>
<p>如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建组件构造器</span></div><div class="line"><span class="keyword">var</span> myComponent = Vue.extend(&#123;</div><div class="line">	<span class="attr">template</span>: <span class="string">'#template'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 注册组件</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, myComponent)</div><div class="line"></div><div class="line"><span class="comment">// 在Vue实例作用范围内使用组件</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>通过使用组件实例选项注册，可以使组件<strong>仅在另一个实例/组件的作用域</strong>中可用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Child = &#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  components: &#123;</div><div class="line">    <span class="comment">// &lt;my-component&gt; 将只在父模板可用</span></div><div class="line">    <span class="string">'my-component'</span>: Child</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>组件的<code>data</code>必须是<strong>函数</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span> : <span class="number">1</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">// wrong </span></div><div class="line"><span class="keyword">var</span> c1 = Vue.extend(&#123;</div><div class="line">	<span class="attr">data</span>: data</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// right</span></div><div class="line"><span class="keyword">var</span> c2 = Vue.extend(&#123;</div><div class="line">	data () &#123;</div><div class="line">		<span class="keyword">return</span> &#123; <span class="attr">a</span> : <span class="number">1</span>&#125;</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="协同工作"><a href="#协同工作" class="headerlink" title="协同工作"></a>协同工作</h2><p>在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。</p>
<h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>组件实例的作用域是<strong>孤立</strong>的，<code>props</code>是单向的，只能由父组件传递给子组件，反之则会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">  <span class="comment">// 声明 props</span></div><div class="line">  props: [<span class="string">'message'</span>],</div><div class="line">  <span class="comment">// 就像 data 一样，prop 可以用在模板内</span></div><div class="line">  <span class="comment">// 同样也可以在 vm 实例中像 “this.message” 这样使用</span></div><div class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">&lt;child message=<span class="string">"hello!"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<p>1、html不区分大小写，<code>prop</code>会从 camelCase转为 kebab-case</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">  <span class="comment">// camelCase in JavaScript</span></div><div class="line">  props: [<span class="string">'myMessage'</span>],</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// ===&gt;&gt;</span></div><div class="line"></div><div class="line">&lt;!-- kebab-<span class="keyword">case</span> <span class="keyword">in</span> HTML --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">my-message</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>2、动态prop</p>
<p>可以用<code>v-bind</code>动态绑定props的值到父组件的数据中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"parentMsg"</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-bind:my-message</span>=<span class="string">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3、字面量vs动态语法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 传递了一个字符串<span class="string">"1"</span> --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">some-prop</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span></div><div class="line">&lt;!-- 传递实际的数字 --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind:some-prop</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>4、改变组件prop值</p>
<p>定义一个局部 data 属性，并将 prop 的初始值作为局部数据的初始值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">props: [<span class="string">'initialCounter'</span>],</div><div class="line"><span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="keyword">this</span>.initialCounter &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>prop 作为需要被转变的原始值传入，定义一个 computed 属性，此属性从 prop 的值计算得出</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">props: [<span class="string">'size'</span>],</div><div class="line"><span class="attr">computed</span>: &#123;</div><div class="line">  <span class="attr">normalizedSize</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、prop 检测</p>
<p>prop 可以添加检测机制，目前 type 有<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Function</code>、<code>Object</code>、<code>Array</code>，也可以自定义类型，使用<code>instanceof</code>检测。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'example'</span>, &#123;</div><div class="line">  <span class="attr">props</span>: &#123;</div><div class="line">    <span class="comment">// 基础类型检测 （`null` 意思是任何类型都可以）</span></div><div class="line">    propA: <span class="built_in">Number</span>,</div><div class="line">    <span class="comment">// 多种类型</span></div><div class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</div><div class="line">    <span class="comment">// 必传且是字符串</span></div><div class="line">    propC: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">      <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 数字，有默认值</span></div><div class="line">    propD: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">      <span class="attr">default</span>: <span class="number">100</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 数组／对象的默认值应当由一个工厂函数返回</span></div><div class="line">    propE: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="built_in">Object</span>,</div><div class="line">      <span class="attr">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 自定义验证函数</span></div><div class="line">    propF: &#123;</div><div class="line">      <span class="attr">validator</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p><code>$on(eventName)</code>监听事件</p>
<p><code>$emit(eventName)</code>触发事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"counter-event-example"</span>&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">  &lt;!-- 监听事件：increment，监听函数：incrementTotal --&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button-counter</span> <span class="attr">v-on:increment</span>=<span class="string">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;button v-on:click="increment"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">counter</span>: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">increment</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.counter += <span class="number">1</span></div><div class="line">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>) <span class="comment">// 抛出事件</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#counter-event-example'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">total</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">incrementTotal</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.total += <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>若想绑定<strong>原生事件</strong>，可以用<code>.native</code>修饰<code>v-on</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;my-component v-on:click.native=<span class="string">"doTheThing"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="slot-内容分发"><a href="#slot-内容分发" class="headerlink" title="slot(内容分发)"></a>slot(内容分发)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;app&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">app-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">app-footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1、<code>&lt;app&gt;</code> 组件不知道它的挂载点会有什么内容。挂载点的内容是由<code>&lt;app&gt;</code>的父组件决定的。</p>
<p>2、<code>&lt;app&gt;</code> 组件很可能有它自己的模版。</p>
<p><strong>编译作用域</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;child-component&gt;</div><div class="line">  &#123;&#123; message &#125;&#125; // message 的数据是绑定在父组件而非子组件</div><div class="line">&lt;/child-component&gt;</div><div class="line"></div><div class="line">&lt;!-- 无效 --&gt;</div><div class="line">&lt;child-component v-show="someChildProperty"&gt;&lt;/child-component&gt;</div></pre></td></tr></table></figure>
<p>上面例子出现无效的原因是：假定 <code>someChildProperty</code> 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。</p>
<p>如果要绑定子组件内的指令到一个组件的根节点，应当在它的模板内这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'child-component'</span>, &#123;</div><div class="line">  <span class="comment">// 有效，因为是在正确的作用域内</span></div><div class="line">  template: <span class="string">'&lt;div v-show="someChildProperty"&gt;Child&lt;/div&gt;'</span>,</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">someChildProperty</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>slot简单来说就在包装在子组件里的其他元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">app-layout</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">app-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>渲染结果为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>动态组件</strong></p>
<p>使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code> 特性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#example'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">currentView</span>: <span class="string">'home'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">    <span class="attr">home</span>: &#123; <span class="comment">/* ... */</span> &#125;,</div><div class="line">    <span class="attr">posts</span>: &#123; <span class="comment">/* ... */</span> &#125;,</div><div class="line">    <span class="attr">archive</span>: &#123; <span class="comment">/* ... */</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">&lt;component v-bind:is=<span class="string">"currentView"</span>&gt;</div><div class="line">  <span class="xml"><span class="comment">&lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>keep-alive</strong></p>
<p>切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;keep-alive&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentView"</span>&gt;</span></span></div><div class="line">    <span class="comment">&lt;!-- 非活动组件将被缓存！ --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line">&lt;<span class="regexp">/keep-alive&gt;</span></div></pre></td></tr></table></figure>
<p>学习参考文章(v1.0)：</p>
<ul>
<li><p><a href="http://www.cnblogs.com/keepfool/p/5625583.html" target="_blank" rel="external">http://www.cnblogs.com/keepfool/p/5625583.html</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/keepfool/p/5637834.html" target="_blank" rel="external">http://www.cnblogs.com/keepfool/p/5637834.html</a></p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js 初体验]]></title>
      <url>https://lucius0.github.io/2017/01/08//archivers/vue-beginning/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Vue.js 主要是利用到ECMAScript 5的特性，因此IE 8以下的浏览器都不支持，可以通过<a href="http://caniuse.com/#feat=es5" target="_blank" rel="external">caniuse</a>来查看浏览器的支持情况。</p>
<p><a href="http://doc.vue-js.com/v2/guide/index.html" target="_blank" rel="external">官方</a>的介绍是：</p>
<p>Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用<a href="http://doc.vue-js.com/v2/guide/single-file-components.html" target="_blank" rel="external">单文件组件</a>和<a href="http://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="external">Vue生态系统支持的库</a>开发的复杂单页应用。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<p>如果你是有经验的前端开发者，想知道 Vue.js 与其它库/框架的区别，查看<a href="http://doc.vue-js.com/v2/guide/comparison.html" target="_blank" rel="external">对比其它框架</a>。</p>
<p><img src="/images/vue/vue-01.jpeg" alt=""></p>
<p>其中<code>view</code>对应如下类似dom代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>model</code>则为POJO，</p>
<p><code>var data = {msg: &#39;hello&#39;}</code></p>
<p>所以vue.js充当的就是vm，数据层以及视觉层的桥梁</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	<span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">	<span class="attr">data</span>: &#123;</div><div class="line">		<span class="attr">msg</span>: data.msg</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>组件系统</strong></p>
<p><img src="/images/vue/vue-02.png" alt=""></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="直接引入"><a href="#直接引入" class="headerlink" title="直接引入"></a>直接引入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dir</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">dir</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"scripts/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">	<span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="通过vue-cli"><a href="#通过vue-cli" class="headerlink" title="通过vue-cli"></a>通过vue-cli</h3><p>全局安装vue-cli就可以了</p>
<p><code>npm install --global vue-cli</code></p>
<p>详细的可以<a href="http://doc.vue-js.com/v2/guide/installation.html" target="_blank" rel="external">查看</a></p>
<h2 id="基本属性及其方法"><a href="#基本属性及其方法" class="headerlink" title="基本属性及其方法"></a>基本属性及其方法</h2><p>可以查看<a href="http://doc.vue-js.com/v2/api/" target="_blank" rel="external">官网的API</a>，v1.0 跟 v2.0 有区别。建议好好研究一下，在这里就不再赘述了。</p>
<p>那么父节点，或者说是根结点的结构是怎么样的呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	<span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">	<span class="attr">components</span>: &#123;</div><div class="line">		<span class="string">'header-component'</span>: headerComponent,</div><div class="line">		<span class="string">'body-component'</span>: bodyComponent,</div><div class="line">		<span class="string">'footer-component'</span>: footerComponent</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">data</span>: &#123;</div><div class="line">		...</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">methods</span>: &#123;</div><div class="line">		...</div><div class="line">	&#125;,</div><div class="line">	beforeCreate () &#123;&#125;,</div><div class="line">	created () &#123;&#125;,</div><div class="line">	beforeMount () &#123;&#125;,</div><div class="line">	...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>组件的组织结构</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> component = Vue.extend(&#123;</div><div class="line">	<span class="attr">template</span>: <span class="string">'#component'</span>,</div><div class="line">	<span class="attr">components</span>: &#123;</div><div class="line">		<span class="string">'child-header-component'</span>: childHeaderComponent</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">props</span>: &#123;&#125;,</div><div class="line">	<span class="attr">events</span>: &#123;&#125;,</div><div class="line">	<span class="attr">methods</span>: &#123;&#125;,</div><div class="line">	...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="/images/vue/vue-03.png" alt=""></p>
<p>vue是通过数据劫持的方式来做数据绑定的，其核心方法就是通过<code>Object.defineProperty()</code>来实现对属性的劫持。前面有提到这就是为什么不能支持IE 8以下的版本。要实现mvvm，需要实现以下的条件：</p>
<ol>
<li><p>实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动根据新老值的对比进行更新；</p>
</li>
<li><p>实现一个指令解析器Compile，对元素节点的指令进行遍历并且解析，根据指令来替换数据，并且更新函数；</p>
</li>
<li><p>实现一个watcher，作为Observer以及Compile的桥梁，能够订阅并且接收属性变动的通知，执行指令绑定相对应的回调函数，从而刷新视图；</p>
</li>
<li><p>实现mvvm入口，组织上面的三个模块。</p>
</li>
</ol>
<p><img src="/images/vue/vue-04.jpeg" alt=""></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">data</span>: data</div><div class="line">&#125;)</div><div class="line">vm.a === data.a <span class="comment">// -&gt; true</span></div><div class="line"><span class="comment">// 设置属性也会影响到原始数据</span></div><div class="line">vm.a = <span class="number">2</span></div><div class="line">data.a <span class="comment">// -&gt; 2</span></div><div class="line"><span class="comment">// ... 反之亦然</span></div><div class="line">data.a = <span class="number">3</span></div><div class="line">vm.a <span class="comment">// -&gt; 3</span></div></pre></td></tr></table></figure>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>以下是 v2.0 的生命周期图</p>
<p><img src="/images/vue/vue-05.png" alt=""></p>
<p>而这是 v1.0 的生命周期图</p>
<p><img src="/images/vue/vue-06.png" alt=""></p>
<p>所以说v1.0跟v2.0还是有很大的差别的。</p>
<table>
<thead>
<tr>
<th>v1.0</th>
<th>v2.0</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>init</td>
<td>beforeCreate</td>
<td>组件实例刚被创建，组件属性计算之前，如 data 属性等</td>
</tr>
<tr>
<td>created</td>
<td>created</td>
<td>组件实例创建完成，属性已绑定，但 DOM 还未生成，<code>$el</code> 属性还不存在</td>
</tr>
<tr>
<td>beforeCompile</td>
<td>beforeMount</td>
<td>模板编译/挂载之前</td>
</tr>
<tr>
<td>compiled</td>
<td>mounted</td>
<td>板编译/挂载之后</td>
</tr>
<tr>
<td>ready</td>
<td>mounted</td>
<td>模板编译/挂载之后（不保证组件已在 document 中）</td>
</tr>
<tr>
<td>-</td>
<td>beforeUpdate</td>
<td>组件更新之前</td>
</tr>
<tr>
<td>-</td>
<td>updated</td>
<td>组件更新之后</td>
</tr>
<tr>
<td>-</td>
<td>activated</td>
<td>for <code>keep-alive</code>，组件被激活时调用</td>
</tr>
<tr>
<td>-</td>
<td>deactivated</td>
<td>for <code>keep-alive</code>，组件被移除时调用</td>
</tr>
<tr>
<td>attached</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>detached</td>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>beforeDestory</td>
<td>beforeDestory</td>
<td>组件销毁前调用</td>
</tr>
<tr>
<td>destoryed</td>
<td>destoryed</td>
<td>组件销毁后调用</td>
</tr>
</tbody>
</table>
<h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">普通文本：<span class="string">`&#123;&#123; &#125;&#125;`</span></div><div class="line"></div><div class="line">纯html：<span class="string">`&lt;div v-html="rawHtml"&gt;&lt;/div&gt;`</span></div><div class="line"></div><div class="line">*Mustache*不能用于html属性，应使用<span class="string">`v-bind`</span>指令</div><div class="line"></div><div class="line"><span class="string">`&lt;div v-bind:id="dynamicId"&gt;&lt;/div&gt;`</span></div><div class="line"></div><div class="line">javascript表达式</div><div class="line"></div><div class="line"><span class="string">`&#123;&#123; number + 1 &#125;&#125;`</span></div><div class="line"></div><div class="line"><span class="string">`&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;`</span></div><div class="line"></div><div class="line"><span class="string">`&#123;&#123; message.split('').reverse().join('') &#125;&#125;`</span></div><div class="line"></div><div class="line"><span class="string">`&lt;div v-bind:id="'list-' + id"&gt;&lt;/div&gt;`</span></div><div class="line"></div><div class="line">**注意：** Vue每个绑定只能包含**单个表达式**，如以下的则不会生效。</div><div class="line"></div><div class="line">&lt;!-- 这是语句，不是表达式 --&gt;</div><div class="line">&#123;&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;&#125;</div><div class="line">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</div><div class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="keyword">return</span> message &#125; &#125;&#125;</div></pre></td></tr></table></figure>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul>
<li><p>v-text：更新元素的 <code>textContent</code>。如果要更新部分的 <code>textContent</code> ，需要使用  {{ Mustache }}  插值。</p>
</li>
<li><p>v-html：更新元素的 <code>innerHTML</code> 。注意：<strong>内容按普通 HTML 插入 - 不会作为 Vue 模板进行编译。</strong></p>
</li>
<li><p>v-show：根据表达式之真假值，切换元素的 <code>display</code> CSS 属性。当条件变化时该指令触发过渡效果。</p>
</li>
<li><p>v-if：根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 <code>&lt;template&gt;</code> ，将提出它的内容作为条件块。当条件变化时该指令触发过渡效果。</p>
</li>
<li><p>v-else、v-else-if：前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code>。</p>
</li>
<li><p>v-for：基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 <code>alias in expression</code>，如<code>item in items</code>或<code>(item, index) in items</code>，同js的遍历，不局限于遍历数据结构，还可以遍历对象属性，当遍历对象时，可以<code>(value, key, index) in object</code>。</p>
</li>
<li><p>v-on：绑定事件监听器。事件类型由参数指定。</p>
<p><strong>修饰符：</strong></p>
<ul>
<li><p>.stop - 调用<code>event.stopPropagation()</code>，阻止单击事件冒泡。</p>
</li>
<li><p>.prevent - 调用 <code>event.preventDefault()</code>，提交事件不再重载页面。</p>
</li>
<li><p>.capture - 添加事件侦听器时使用 capture 模式，即捕获模式。</p>
</li>
<li><p>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</p>
</li>
<li><p>{keyCode | keyAlias} - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</p>
</li>
<li><p>.native - 监听组件根元素的原生事件。</p>
</li>
<li><p>.keyup[.enter | .tab | .delete | .esc | .space | .up | .down | .left | .right] - 无需解释</p>
</li>
</ul>
<p><strong>用法：</strong></p>
<p>用在普通元素上时，只能监听 原生 DOM 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件。在监听原生 DOM 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event</code> 属性： <code>v-on:click=&quot;handle(&#39;ok&#39;, $event)&quot;</code>。</p>
</li>
<li><p>v-bind：动态地绑定一个或多个特性，或一个组件 prop 到表达式。在绑定 <code>class</code> 或 <code>style</code> 特性时，支持其它类型的值，如数组或对象。</p>
<p><strong>参考：</strong><a href="https://cn.vuejs.org/v2/guide/class-and-style.html" target="_blank" rel="external">Class 与 Style 绑定</a>和<a href="https://cn.vuejs.org/v2/guide/components.html#Props" target="_blank" rel="external">组件 - 组件 Props</a></p>
</li>
<li><p>v-model：在表单控件或者组件上创建双向绑定。</p>
<p><strong>修饰符：</strong></p>
<ul>
<li><p><code>.lazy</code> - 取代 <code>input</code> 监听 <code>change</code> 事件</p>
</li>
<li><p><code>.number</code> - 输入字符串转为数字</p>
</li>
<li><p><code>.trim</code> - 输入首尾空格过滤</p>
</li>
</ul>
<p><strong>限制：</strong></p>
<ul>
<li><p><code>&lt;input&gt;</code></p>
</li>
<li><p><code>&lt;select&gt;</code></p>
</li>
<li><p><code>&lt;textarea&gt;</code></p>
</li>
<li><p>components</p>
</li>
</ul>
</li>
<li><p>v-pre：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</p>
</li>
<li><p>v-cloak：个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] { display: none }</code> 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕。</p>
<p><strong>用法：</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[v-cloak] &#123;</div><div class="line">  display: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;div v-cloak&gt;</div><div class="line">  &#123;&#123; message &#125;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">// 不会显示，直到编译结束。</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>v-once：只渲染元素和组件一次。随后的重新渲染,元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。</li>
</ul>
<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>虽然可以通过 {{ }}  可以绑定数据，但是太重的逻辑会使得模板过重难以维护，因此<code>computed</code>运营而生。</p>
<p>官方demo</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;div id="example"&gt;</div><div class="line">  &lt;p&gt;Original message: "&#123;&#123; message &#125;&#125;"&lt;/p&gt;</div><div class="line">  &lt;p&gt;Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: '#example',</div><div class="line">  data: &#123;</div><div class="line">    message: 'Hello'</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    // a computed getter</div><div class="line">    reversedMessage: function () &#123;</div><div class="line">      // `this` points to the vm instance</div><div class="line">      return this.message.split('').reverse().join('')</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// 只要 message 不发生变化，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数</div></pre></td></tr></table></figure>
<p>1、computed VS methods：<code>computed</code>基于依赖缓存，而<code>methods</code>则会每次执行函数，什么意思呢？<code>computed</code>只要相关依赖不发生改变，则不会重新取值，而<code>methods</code>则无论是否依赖会改变，都会重新调用函数计算一次。<em>当数据量大时，可以考虑有<code>computed</code>，而当你不想要有缓存则可以用<code>methods</code></em></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 计算属性将不会更新，因为 Date.now() 不是响应式依赖</span></div><div class="line">computed: &#123;</div><div class="line">  <span class="attr">now</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、computed VS $watch：<code>$watch</code>是观察Vue实例上数据变动，当数据发生变化时，<code>$watch</code>可以监听到其变化并作出相对应的逻辑处理。<code>$watch</code>跟<code>computed</code>使用场景只能视情况而定。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;div id="demo"&gt;&#123;&#123; fullName &#125;&#125;&lt;/div&gt;</div><div class="line"></div><div class="line">// $watch</div><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: '#demo',</div><div class="line">  data: &#123;</div><div class="line">    firstName: 'Foo',</div><div class="line">    lastName: 'Bar',</div><div class="line">    fullName: 'Foo Bar'</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    firstName: function (val) &#123;</div><div class="line">      this.fullName = val + ' ' + this.lastName</div><div class="line">    &#125;,</div><div class="line">    lastName: function (val) &#123;</div><div class="line">      this.fullName = this.firstName + ' ' + val</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">// computed</div><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: '#demo',</div><div class="line">  data: &#123;</div><div class="line">    firstName: 'Foo',</div><div class="line">    lastName: 'Bar'</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    fullName: function () &#123;</div><div class="line">      return this.firstName + ' ' + this.lastName</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>computed</code> 相比 <code>$watch</code> 简单多。</p>
<p>3、计算属性默认情况下只有<code>getter</code>，并没有<code>setter</code>，我们可以提供</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  <span class="attr">fullName</span>: &#123;</div><div class="line">    <span class="comment">// getter</span></div><div class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// setter</span></div><div class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</div><div class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</div><div class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h2><p>class：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">======================================================================</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span></span></span></div><div class="line">     <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">data: &#123;</div><div class="line">  <span class="attr">isActive</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">hasError</span>: <span class="literal">false</span></div><div class="line">&#125;</div><div class="line">======================================================================</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data: &#123;</div><div class="line">  <span class="attr">classObject</span>: &#123;</div><div class="line">    <span class="attr">active</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">======================================================================</div><div class="line">&lt;div v-bind:class="[activeClass, errorClass]"&gt;</div><div class="line">data: &#123;</div><div class="line">  activeClass: 'active',</div><div class="line">  errorClass: 'text-danger'</div><div class="line">&#125;</div><div class="line">======================================================================</div><div class="line">&lt;div v-bind:class="[isActive ? activeClass : '', errorClass]"&gt;</div><div class="line">&lt;div v-bind:class="[&#123; active: isActive &#125;, errorClass]"&gt;</div></pre></td></tr></table></figure>
<p>style：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div v-bind:style=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data: &#123;</div><div class="line">  <span class="attr">activeColor</span>: <span class="string">'red'</span>,</div><div class="line">  <span class="attr">fontSize</span>: <span class="number">30</span></div><div class="line">&#125;</div><div class="line">======================================================================</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">data: &#123;</div><div class="line">  <span class="attr">styleObject</span>: &#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'red'</span>,</div><div class="line">    <span class="attr">fontSize</span>: <span class="string">'13px'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">======================================================================</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="key"><a href="#key" class="headerlink" title="key"></a>key</h3><p>相关内容可以查看指令中的<code>v-for</code>，这里只讲述<code>key</code>，v2.0的<code>key</code>跟v1.0的<code>track-by</code>存在的意义一样，都是给每一项一个唯一标志符，这里需要利用到<code>v-bind</code>将<code>key</code>绑定起来。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意事项：</strong>由于js的限制， Vue 不能检测以下变动的数组：</p>
<p>1、当你利用索引直接设置一个项时，例如： <code>vm.items[indexOfItem] = newValue</code></p>
<p>解决方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Vue.set</span></div><div class="line">Vue.set(example1.items, indexOfItem, newValue)</div><div class="line"><span class="comment">// 或</span></div><div class="line"><span class="comment">// Array.prototype.splice`</span></div><div class="line">example1.items.splice(indexOfItem, <span class="number">1</span>, newValue)</div></pre></td></tr></table></figure>
<p>2、当你修改数组的长度时，例如： <code>vm.items.length = newLength</code></p>
<p>解决方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">example1.items.splice(newLength)</div></pre></td></tr></table></figure>
<h3 id="过滤-排序"><a href="#过滤-排序" class="headerlink" title="过滤|排序"></a>过滤|排序</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;li v-for="n in evenNumbers"&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</div><div class="line">data: &#123;</div><div class="line">  numbers: [ 1, 2, 3, 4, 5 ]</div><div class="line">&#125;,</div><div class="line">computed: &#123;</div><div class="line">  evenNumbers: function () &#123;</div><div class="line">    return this.numbers.filter(function (number) &#123;</div><div class="line">      return number % 2 === 0</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">======================================================================</div><div class="line"></div><div class="line">&lt;li v-for="n in even(numbers)"&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</div><div class="line">data: &#123;</div><div class="line">  numbers: [ 1, 2, 3, 4, 5 ]</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  even: function (numbers) &#123;</div><div class="line">    return numbers.filter(function (number) &#123;</div><div class="line">      return number % 2 === 0</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><p>可以查看<em>指令</em>中的<code>.keyup</code>，除了上面官方给的，还可以自定义<code>keycode</code>，如<code>Vue.config.keyCodes.f1 = 112</code>。</p>
<p>其中在v2.1.0版本中新增了以下的特性：</p>
<p>可以用如下修饰符开启鼠标或键盘事件监听，使在按键按下时发生响应。</p>
<ul>
<li><p><code>.ctrl</code></p>
</li>
<li><p><code>.alt</code></p>
</li>
<li><p><code>.shift</code></p>
</li>
<li><p><code>.meta</code></p>
</li>
</ul>
<p>举个例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Alt + C --&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.67</span>=<span class="string">"clear"</span>&gt;</span></span></div><div class="line"><span class="comment">&lt;!-- Ctrl + Click --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.ctrl</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>优点</strong>：</p>
<ol>
<li><p>从<code>v-on</code>方便定位方法；</p>
</li>
<li><p>无须再js绑定事件，viewmodel只是处理纯粹的逻辑；</p>
</li>
<li><p>viewModel被销毁，事件也会随之被清理</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[用shadowsocks加速git clone]]></title>
      <url>https://lucius0.github.io/2017/01/07//archivers/shadowsocks-and-git/</url>
      <content type="html"><![CDATA[<p>在中国，有时候就算翻墙，在使用git上还是存在速度很慢。那么我们可以利用shadowsocks的sock5代理，为我们的git操作加速。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos; </div><div class="line">git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos;</div></pre></td></tr></table></figure>
<p>shadowsocks的默认端口就是1080，上面的设置只是开启了<code>https</code>协议的代理，git协议开启代理可以查看<a href="http://segmentfault.com/q/1010000000118837" target="_blank" rel="external">这里</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git clone时遇到could not read from remote repository]]></title>
      <url>https://lucius0.github.io/2017/01/07//archivers/could-not-read-from-remote-repository/</url>
      <content type="html"><![CDATA[<p>git clone 时遇到如下的错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ git clone git@github.com:xxxxx/xxx</div><div class="line">Cloning into &apos;xxx&apos;...</div><div class="line">The authenticity of host &apos;github.com (192.30.252.128)&apos; can&apos;t be established.</div><div class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</div><div class="line">Are you sure you want to continue connecting (yes/no)? </div><div class="line">**Host key verification failed.**</div><div class="line">fatal: Could not read from remote repository.</div><div class="line"></div><div class="line">Please make sure you have the correct access rights</div><div class="line">and the repository exists.</div></pre></td></tr></table></figure>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>缺少 known_hosts 文件, 而且必须生成 github.com 的ip执行内容.</p>
<p>只要执行命令<code>ssh git@github.com</code>，这样在.ssh目录就有三个文件了，即<code>id_rsa</code>，<code>id_rsa.pub</code>，<code>known_hosts</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git pull时遇到error: cannot lock ref的错误]]></title>
      <url>https://lucius0.github.io/2017/01/06//archivers/error-cannot-lock-ref/</url>
      <content type="html"><![CDATA[<blockquote>
<p>git pull 时遇到 <strong>error: cannot lock ref ‘xxx’: ‘xxx’ exists; cannot create ‘xxx’</strong>，会导致pull失败。</p>
</blockquote>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>git工程的.git/refs目录下跟踪的某些git分支，在pull时候发现与远程仓库对应的分支refs不同，因此导致 git pull 失败</p>
<p><strong>举个例子：</strong></p>
<ol>
<li><p>A同事<code>$ git push -force</code>了test这个分支，导致远程仓库的分支被覆盖，而你本地的refs则会与远程仓库的分支不一致，产生问题；</p>
</li>
<li><p>git分支是不区分大小写，有人删除了远程仓库的分支又重新创建一个同样名字的分支同样也会产生问题。</p>
</li>
</ol>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>要么强行git pull，要么删除出现问题的refs文件夹，再git pull(推荐)</p>
<ol>
<li><p>删除有问题的refs，可以直接在.git/refs下面根据错误提示删除相对应的refs文件，如’refs/remotes/origin/testParent/test’，你也可以删除refs整个文件夹。</p>
</li>
<li><p>使用git命令<code>$ git update-ref -d refs/remotes/origin/testParent/test</code></p>
</li>
<li><p>强制执行pull，<code>$ git pull -p</code></p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack-dev-server]]></title>
      <url>https://lucius0.github.io/2017/01/05//archivers/webpack-dev-server/</url>
      <content type="html"><![CDATA[<h2 id="什么是webpack-dev-server？"><a href="#什么是webpack-dev-server？" class="headerlink" title="什么是webpack-dev-server？"></a>什么是webpack-dev-server？</h2><p>前端的开发一般都是本地调试开发的，一般情况下都是自己本地搭建tomcat、nginx之类的服务器。但是有时候这种服务器配置对于部分前端开发人员来说是相当的不友好，因为不熟悉，因此就有了webpack-dev-server的出现，它主要是启动了nodejs的一个框架<strong>express</strong>，不但可以实现浏览器的即时刷新，同时还可以监听和打包文件，简化了繁琐的操作和节约了宝贵的开发时间。</p>
<p>原理即启动<strong>express</strong>的http服务器，主要作用就是来监听资源文件，并且通过http服务器和客户端使用的websocket协议，当有资源发生变化，webpack-dev-server会实时编译并更新浏览器的内容。</p>
<p><strong>注意：启动webpack-dev-server后，在目标文件夹中是看不到编译后的文件的,实时编译后的文件都保存到了内存当中。因此使用webpack-dev-server进行开发的时候都看不到编译后的文件。</strong></p>
<h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><h3 id="一-安装"><a href="#一-安装" class="headerlink" title="一. 安装"></a>一. 安装</h3><p><code>$ npm install webpack-dev-server -g</code> 全局安装<br><code>$ npm install webpack-dev-server --save-dev</code> 项目安装(推荐)</p>
<h3 id="二-配置"><a href="#二-配置" class="headerlink" title="二. 配置"></a>二. 配置</h3><p>我们先来看看有什么参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">--content-base <span class="comment">//设定webpack-dev-server的director根目录。如果不进行设定的话，默认是在当前目录下。</span></div><div class="line">--quiet: <span class="comment">//控制台中不输出打包的信息，开发中一般设置为false，进行 打印，这样查看错误比较方面</span></div><div class="line">--no-info: <span class="comment">// 不显示任何信息</span></div><div class="line">--colors: <span class="comment">//对信息进行颜色输出</span></div><div class="line">--no-colors: <span class="comment">//对信息不进行颜色输出</span></div><div class="line">--compress:  <span class="comment">//开启gzip压缩</span></div><div class="line">--host &lt;hostname/ip&gt;: <span class="comment">//设置ip</span></div><div class="line">--port &lt;number&gt;: <span class="comment">//设置端口号，默认是:8080</span></div><div class="line">--inline: <span class="comment">//webpack-dev-server会在你的webpack.config.js的入口配置文件中再添加一个入口,</span></div><div class="line">--hot: <span class="comment">//开发热替换</span></div><div class="line">--open: <span class="comment">//启动命令，自动打开浏览器</span></div><div class="line">--history-api-fallback: <span class="comment">//查看历史url</span></div></pre></td></tr></table></figure>
<p>详细参数可以查看<a href="http://webpack.github.io/docs/webpack-dev-server.html#webpack-dev-server-cli" target="_blank" rel="external">http://webpack.github.io/docs/webpack-dev-server.html#webpack-dev-server-cli</a></p>
<p><strong>content-base: </strong>设定webpack-dev-server的根目录。如果不进行设定的话，默认是在当前目录下。</p>
<p><code>webpack-dev-server --content-base ./assets</code></p>
<p><strong>注意：若webpack.config.js中的output配置了publicPath这个字段的值的话，在index.html也要做出相对应的调整。因为webpack-dev-server的根目录是相对publicPath这个路径。</strong></p>
<p>举个例子，若webpack.config.js配置如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: <span class="string">'./src/js/index.js'</span>,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'./dist/js'</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">'bundle.js'</span>，</div><div class="line">        publicPath: <span class="string">'/assets/'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"assets/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>若webpack.config.js没有配置output的publicPath的话，那么index.html如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行命令为：<code>webpack-dev-server --content-base ./assets</code></p>
<h2 id="webpack-dev-server-热更新"><a href="#webpack-dev-server-热更新" class="headerlink" title="webpack-dev-server 热更新"></a>webpack-dev-server 热更新</h2><p>webpack-dev-server有两种自动刷新模式：</p>
<ul>
<li><p>Iframe mode(默认)</p>
</li>
<li><p>inline mode</p>
</li>
</ul>
<h3 id="Iframe-mode"><a href="#Iframe-mode" class="headerlink" title="Iframe mode"></a>Iframe mode</h3><p>在网页嵌入iframe，然后将我们的应用嵌入iframe当中，每次资源文件发生更改，就会刷新iframe，执行命令为<code>webpack-dev-server --content-base ./dist</code>，而访问路径为<code>localhost:8080/webpack-dev-server/index.html</code></p>
<h3 id="Inline-mode"><a href="#Inline-mode" class="headerlink" title="Inline-mode"></a>Inline-mode</h3><p>Inline-mode刷新模式是直接刷新页面，不会在页面增减任何的元素或者js插件，它是直接放在内存中，这种方式也是官方推荐的，并且速度相对来说比较快。实现Inline-mode刷新模式 有很多的方法，下面我们来列举一下：</p>
<p><strong>方法一：</strong>将代码内联到入口配置文件webpack.config.js文件entry属性里面，并且添加new<br> webpack.HotModuleReplacementPlugin()热点插件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">"webpack-dev-server"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">    <span class="comment">//项目的文件夹 可以直接用文件夹名称 默认会找index.js ，也可以确定是哪个文件名字</span></div><div class="line">    entry: [</div><div class="line">        <span class="string">'webpack-dev-server/client?http://localhost:8080/'</span>,</div><div class="line">        <span class="string">'./src/index.js'</span></div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">//输出的文件名,合并以后的js会命名为bundle.js</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">"dist/"</span>),</div><div class="line">        <span class="attr">publicPath</span>: <span class="string">"http://localhost:8088/dist/"</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这种方式比较容易，但是不够灵活，需要添加相关的热点插件。</p>
<p><strong>方法二：</strong>直接在你index.html引入这部分代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/webpack-dev-server.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这种方法更不好，项目上线还需要手动删除，坚决杜绝这些方法。</p>
<p><strong>方法三：</strong>直接实现一个server.js，启动服务器(需要启动热替换plugin)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);　　</div><div class="line"><span class="keyword">var</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-dev-middleware"</span>);</div><div class="line"><span class="keyword">var</span> webpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">"./webpack.config.js"</span>);</div><div class="line"></div><div class="line">config.entry.index.unshift(<span class="string">"webpack-dev-server/client?http://localhost:9000"</span>); <span class="comment">// 将执替换js内联进去</span></div><div class="line">config.entry.index.unshift(<span class="string">"webpack/hot/only-dev-server"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> compiler = webpack(config);</div><div class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> webpackDevServer(compiler, &#123;</div><div class="line">    <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">historyApiFallback</span>: <span class="literal">false</span>,</div><div class="line">    <span class="comment">// noInfo: true,</span></div><div class="line">    stats: &#123;　　 <span class="attr">colors</span>: <span class="literal">true</span> <span class="comment">// 用颜色标识</span></div><div class="line">            　　 &#125;,</div><div class="line">    　　<span class="attr">proxy</span>: &#123;　　 <span class="string">"*"</span>: <span class="string">"http://localhost:9000"</span> <span class="comment">// 用于转发api数据，但webpack自己提供的并不太好用</span></div><div class="line">            　　 &#125;,</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">9000</span>);</div></pre></td></tr></table></figure>
<p><strong>方法四：</strong>直接在webpack.config.js上配置。这个办法最简单，当然灵活性没有自己实现一个服务器好。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">"webpack-dev-server"</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> CURRENT_PATH = path.resolve(__dirname); <span class="comment">// 获取到当前目录</span></div><div class="line"><span class="keyword">var</span> ROOT_PATH = path.join(__dirname, <span class="string">'../'</span>); <span class="comment">// 项目根目录</span></div><div class="line"><span class="keyword">var</span> MODULES_PATH = path.join(ROOT_PATH, <span class="string">'./node_modules'</span>); <span class="comment">// node包目录</span></div><div class="line"><span class="keyword">var</span> BUILD_PATH = path.join(ROOT_PATH, <span class="string">'./dist'</span>); <span class="comment">// 最后输出放置公共资源的目录</span></div><div class="line"></div><div class="line"><span class="comment">//用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用</span></div><div class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">    <span class="comment">//项目的文件夹 可以直接用文件夹名称 默认会找index.js ，也可以确定是哪个文件名字</span></div><div class="line">    entry: [</div><div class="line">        <span class="string">'./src/index.js'</span></div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">//输出的文件名,合并以后的js会命名为bundle.js</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">"dist/"</span>),</div><div class="line">        <span class="attr">publicPath</span>: <span class="string">"http://localhost:8088/dist/"</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devServer</span>: &#123;</div><div class="line">        <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">contentBase</span>: <span class="string">"./"</span>,</div><div class="line">        <span class="attr">quiet</span>: <span class="literal">false</span>, <span class="comment">//控制台中不输出打包的信息</span></div><div class="line">        noInfo: <span class="literal">false</span>,</div><div class="line">        <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">inline</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">lazy</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">progress</span>: <span class="literal">true</span>, <span class="comment">//显示打包的进度</span></div><div class="line">        watchOptions: &#123;</div><div class="line">            <span class="attr">aggregateTimeout</span>: <span class="number">300</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">port</span>: <span class="string">'8088'</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="配置webpackDemo项目本地服务器"><a href="#配置webpackDemo项目本地服务器" class="headerlink" title="配置webpackDemo项目本地服务器"></a>配置webpackDemo项目本地服务器</h2><p>上面我们讲解了webpack-dev-server 搭建本地服务以及浏览器实时刷新的相关方法和配置，我们选择方法四 直接在webpack.config.js使用devServer配置服务器以及热点替换。内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> WebpackDevServer = <span class="built_in">require</span>(<span class="string">"webpack-dev-server"</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> CURRENT_PATH = path.resolve(__dirname); <span class="comment">// 获取到当前目录</span></div><div class="line"><span class="keyword">var</span> ROOT_PATH = path.join(__dirname, <span class="string">'../'</span>); <span class="comment">// 项目根目录</span></div><div class="line"><span class="keyword">var</span> MODULES_PATH = path.join(ROOT_PATH, <span class="string">'./node_modules'</span>); <span class="comment">// node包目录</span></div><div class="line"><span class="keyword">var</span> BUILD_PATH = path.join(ROOT_PATH, <span class="string">'./dist'</span>); <span class="comment">// 最后输出放置公共资源的目录</span></div><div class="line"></div><div class="line"><span class="comment">//用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用</span></div><div class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">    <span class="comment">//项目的文件夹 可以直接用文件夹名称 默认会找index.js ，也可以确定是哪个文件名字</span></div><div class="line">    entry: [</div><div class="line">        <span class="string">'./src/index.js'</span></div><div class="line">    ],</div><div class="line"></div><div class="line">    <span class="comment">//输出的文件名,合并以后的js会命名为bundle.js</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: path.join(__dirname, <span class="string">"dist/"</span>),</div><div class="line">        <span class="attr">publicPath</span>: <span class="string">"http://localhost:8088/dist/"</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">"bundle.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devServer</span>: &#123;</div><div class="line">        <span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">contentBase</span>: <span class="string">"./"</span>,</div><div class="line">        <span class="attr">quiet</span>: <span class="literal">false</span>, <span class="comment">//控制台中不输出打包的信息</span></div><div class="line">        noInfo: <span class="literal">false</span>,</div><div class="line">        <span class="attr">hot</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">inline</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">lazy</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">progress</span>: <span class="literal">true</span>, <span class="comment">//显示打包的进度</span></div><div class="line">        watchOptions: &#123;</div><div class="line">            <span class="attr">aggregateTimeout</span>: <span class="number">300</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">port</span>: <span class="string">'8088'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这个时候index.html内容如下：</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在命令行执行一下操作启动 服务：</p>
<p><code>webpack-dev-server --hot --inline</code></p>
<p>在浏览器输入:localhost:8088, 这里我们设置的端口号是:8088</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack]]></title>
      <url>https://lucius0.github.io/2017/01/04//archivers/webpack/</url>
      <content type="html"><![CDATA[<h2 id="什么是Webpack？"><a href="#什么是Webpack？" class="headerlink" title="什么是Webpack？"></a>什么是Webpack？</h2><p>webpack是今期最火的一款模块加载器兼打包工具，它能把各种资源，如JS(含JSX)、coffee、样式(含less/sass)、图片等都作为模块来使用和处理。webpack提供了强大的loader机制和plugin机制，loader支持载入各种各样的静态资源，不只是js脚本、连html、css、images等各种资源都有相应的loader来做依赖管理和打包，而plugin则可以对整个webpack的流程进行一定的控制。比如配置了css-loader和style-loader之后，就可以通过<code>require(&#39;./demo.css&#39;)</code>这样的方式给网页载入一份样式表。</p>
<p><img src="/images/webpack/webpack-01.jpg" alt=""></p>
<p>我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情，这块我们后续会提到。</p>
<p><strong>webpack的原理：</strong>把非js资源都转换成js，如css转换为<em>‘创建一个Style标签并插入document’</em>的脚本，把图片转换成<em>一个图片地址的js变量或base64编码</em>，然后用commonJS管理起来。</p>
<p>你可以不打算将其用在你的项目上，但没有理由不去掌握它，因为以近期 Github 上各大主流的（React相关）项目来说，它们仓库上所展示的示例已经是基于 webpack 来开发的，比如 <a href="https://github.com/react-bootstrap/react-bootstrap" target="_blank" rel="external">React-Bootstrap</a> 和 <a href="https://github.com/gaearon/redux" target="_blank" rel="external">Redux</a>。</p>
<p>webpack的官网是 <a href="http://webpack.github.io/" target="_blank" rel="external">http://webpack.github.io/</a> ，文档地址是 <a href="http://webpack.github.io/docs/" target="_blank" rel="external">http://webpack.github.io/docs/</a> ，还有阮一峰老师针对Webpack写的demo地址 <a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">https://github.com/ruanyf/webpack-demos</a>，想对其进行更详细了解的可以点进去瞧一瞧。</p>
<h2 id="Webpack的优势"><a href="#Webpack的优势" class="headerlink" title="Webpack的优势"></a>Webpack的优势</h2><p>其优势主要归类为如下几个：</p>
<ol>
<li><p>webpack 是以 commonJS 的形式来书写脚本滴，但对 AMD/CMD 的支持也很全面，方便旧项目进行代码迁移。</p>
</li>
<li><p>能被模块化的不仅仅是 JS 了。</p>
</li>
<li><p>开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。</p>
</li>
<li><p>扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。</p>
</li>
</ol>
<p>我们谈谈第一点。以 AMD/CMD 模式来说，鉴于模块是异步加载的，所以我们常规需要使用 define 函数来帮我们搞回调：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'package/lib'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">lib</span>) </span>&#123;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        lib.log(<span class="string">'hello world!'</span>);</div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">foo</span>: foo</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>另外为了可以兼容 commonJS 的写法，我们也可以将 define 这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> someModule = <span class="built_in">require</span>(<span class="string">"someModule"</span>);</div><div class="line">    <span class="keyword">var</span> anotherModule = <span class="built_in">require</span>(<span class="string">"anotherModule"</span>);    </div><div class="line"></div><div class="line">    someModule.doTehAwesome();</div><div class="line">    anotherModule.doMoarAwesome();</div><div class="line"></div><div class="line">    exports.asplode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        someModule.doTehAwesome();</div><div class="line">        anotherModule.doMoarAwesome();</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然而对 webpack 来说，我们可以直接在上面书写 commonJS 形式的语法，无须任何 define （毕竟最终模块都打包在一起，webpack 也会最终自动加上自己的加载器）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someModule = <span class="built_in">require</span>(<span class="string">"someModule"</span>);</div><div class="line"><span class="keyword">var</span> anotherModule = <span class="built_in">require</span>(<span class="string">"anotherModule"</span>);    </div><div class="line"></div><div class="line">someModule.doTehAwesome();</div><div class="line">anotherModule.doMoarAwesome();</div><div class="line"></div><div class="line">exports.asplode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    someModule.doTehAwesome();</div><div class="line">    anotherModule.doMoarAwesome();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这样撸码自然更简单，跟回调神马的说 byebye~</p>
<p>不过即使你保留了之前 define 的写法也是可以滴，毕竟 webpack 的兼容性相当出色，方便你旧项目的模块直接迁移过来。</p>
<h2 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h2><h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>我们常规直接使用 npm 的形式来安装：</p>
<p><code>$ npm install webpack -g</code></p>
<p>当然如果常规项目还是把依赖写入 package.json 包去更人性化：</p>
<p><code>$ npm init</code><br><code>$ npm install webpack --save-dev</code></p>
<h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js/Gruntfile.js ，就是一个配置项，告诉 webpack 它需要做什么。</p>
<p>我们看看下方的示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//插件项</span></div><div class="line">    plugins: [commonsPlugin],</div><div class="line">    <span class="comment">//页面入口文件配置</span></div><div class="line">    entry: &#123;</div><div class="line">        <span class="attr">index</span> : <span class="string">'./src/js/page/index.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//入口文件输出配置</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'dist/js/page'</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">'[name].js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="comment">//加载器配置</span></div><div class="line">        loaders: [</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">'jsx-loader?harmony'</span> &#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg)$/</span>, <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span>&#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//其它解决方案配置</span></div><div class="line">    resolve: &#123;</div><div class="line">        <span class="attr">root</span>: <span class="string">'E:/github/flux-example/src'</span>, <span class="comment">//绝对路径</span></div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">        <span class="attr">alias</span>: &#123;</div><div class="line">            <span class="attr">AppStore</span> : <span class="string">'js/stores/AppStores.js'</span>,</div><div class="line">            <span class="attr">ActionType</span> : <span class="string">'js/actions/ActionType.js'</span>,</div><div class="line">            <span class="attr">AppAction</span> : <span class="string">'js/actions/AppAction.js'</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//定位到未压缩的原代码，但它会生成很大的source map文件，所以只建议在开发模式下使用。</span></div><div class="line">    devtool: <span class="string">'eval-source-map'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>⑴ plugins 是插件项，这里我们使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用。</p>
<p>⑵ entry 是页面入口文件配置，output 是对应输出项配置（即入口文件最终要生成什么名字的文件、存放到哪里），其语法大致为：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="attr">page1</span>: <span class="string">"./page1"</span>,</div><div class="line">        <span class="comment">//支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出</span></div><div class="line">        page2: [<span class="string">"./entry1"</span>, <span class="string">"./entry2"</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">"dist/js/page"</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].bundle.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该段代码最终会生成一个 page1.bundle.js 和 page2.bundle.js，并存放到 ./dist/js/page 文件夹下。</p>
<p>⑶ module.loaders 是最关键的一块配置。它告知 webpack 每一种文件都需要使用什么加载器来处理：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;</div><div class="line">    <span class="comment">//加载器配置</span></div><div class="line">    loaders: [</div><div class="line">        <span class="comment">//.css 文件使用 style-loader 和 css-loader 来处理</span></div><div class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style-loader!css-loader'</span> &#125;,</div><div class="line">        <span class="comment">//.js 文件使用 jsx-loader 来编译处理</span></div><div class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">'jsx-loader?harmony'</span> &#125;,</div><div class="line">        <span class="comment">//.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理</span></div><div class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">loader</span>: <span class="string">'style!css!sass?sourceMap'</span>&#125;,</div><div class="line">        <span class="comment">//图片文件使用 url-loader 来处理，小于8kb的直接转为base64</span></div><div class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.(png|jpg)$/</span>, <span class="attr">loader</span>: <span class="string">'url-loader?limit=8192'</span>&#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，”-loader”其实是可以省略不写的，多个loader之间用“!”连接起来。</p>
<p>注意所有的加载器都需要通过 npm 来加载，并建议查阅它们对应的 readme 来看看如何使用。</p>
<p>拿最后一个 <a href="https://github.com/webpack/url-loader" target="_blank" rel="external">url-loader</a> 来说，它会将样式中引用到的图片转为模块来处理，使用该加载器需要先进行安装：</p>
<p><code>npm install url-loader -save-dev</code></p>
<p>配置信息的参数“?limit=8192”表示将所有小于8kb的图片都转为base64形式（其实应该说超过8kb的才使用 url-loader 来映射到文件，否则转为data url形式）。</p>
<p>你可以点<a href="http://webpack.github.io/docs/list-of-loaders.html" target="_blank" rel="external">这里</a>查阅全部的 loader 列表。</p>
<p>⑷ 最后是 resolve 配置，这块很好理解，直接写注释了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">resolve: &#123;</div><div class="line">    <span class="comment">//查找module的话从这里开始查找</span></div><div class="line">    root: <span class="string">'E:/github/flux-example/src'</span>, <span class="comment">//绝对路径</span></div><div class="line">    <span class="comment">//自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名</span></div><div class="line">    extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.scss'</span>],</div><div class="line">    <span class="comment">//模块别名定义，方便后续直接引用别名，无须多写长长的地址</span></div><div class="line">    alias: &#123;</div><div class="line">        <span class="attr">AppStore</span> : <span class="string">'js/stores/AppStores.js'</span>,<span class="comment">//后续直接 require('AppStore') 即可</span></div><div class="line">        ActionType : <span class="string">'js/actions/ActionType.js'</span>,</div><div class="line">        <span class="attr">AppAction</span> : <span class="string">'js/actions/AppAction.js'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 webpack.config.js 更详尽的配置可以参考<a href="http://webpack.github.io/docs/configuration.html" target="_blank" rel="external">http://webpack.github.io/docs/configuration.html</a></p>
<h2 id="运行-webpack"><a href="#运行-webpack" class="headerlink" title="运行 webpack"></a>运行 webpack</h2><p>webpack 的执行也很简单，直接执行</p>
<p><code>$ webpack --display-error-details</code></p>
<p>即可，后面的参数“–display-error-details”是推荐加上的，方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。</p>
<p>其他主要的参数有：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ webpack --config XXX.js   <span class="comment">//使用另一份配置文件（比如webpack.config2.js）来打包</span></div><div class="line"></div><div class="line">$ webpack --watch   <span class="comment">//监听变动并自动打包</span></div><div class="line"></div><div class="line">$ webpack -p    <span class="comment">//压缩混淆脚本，这个非常非常重要！</span></div><div class="line"></div><div class="line">$ webpack -d    <span class="comment">//生成map映射文件，告知哪些模块被最终打包到哪里了</span></div></pre></td></tr></table></figure>
<p>其中的 -p 是很重要的参数，曾经一个未压缩的 700kb 的文件，压缩后直接降到 180kb（主要是样式这块一句就独占一行脚本，导致未压缩脚本变得很大）。</p>
<h2 id="模块引入"><a href="#模块引入" class="headerlink" title="模块引入"></a>模块引入</h2><p>上面唠嗑了那么多配置和执行方法，下面开始说说寻常页面和脚本怎么使用呗。</p>
<h3 id="一-HTML"><a href="#一-HTML" class="headerlink" title="一. HTML"></a>一. HTML</h3><p>直接在页面引入 webpack 最终生成的页面脚本即可，不用再写什么 data-main 或 seajs.use 了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/js/page/common.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/js/page/index.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到我们连样式都不用引入，毕竟脚本执行时会动态生成<code>&lt;style&gt;</code>并标签打到head里。</p>
<h3 id="二-JS"><a href="#二-JS" class="headerlink" title="二. JS"></a>二. JS</h3><p>各脚本模块可以直接使用 commonJS 来书写，并可以直接引入未经编译的模块，比如 JSX、sass、coffee等（只要你在 webpack.config.js 里配置好了对应的加载器）。</p>
<p>我们再看看编译前的页面入口文件（index.js）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'../../css/reset.scss'</span>); <span class="comment">//加载初始化样式</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'../../css/allComponent.scss'</span>); <span class="comment">//加载组件样式</span></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"><span class="keyword">var</span> AppWrap = <span class="built_in">require</span>(<span class="string">'../component/AppWrap'</span>); <span class="comment">//加载组件</span></div><div class="line"><span class="keyword">var</span> createRedux = <span class="built_in">require</span>(<span class="string">'redux'</span>).createRedux;</div><div class="line"><span class="keyword">var</span> Provider = <span class="built_in">require</span>(<span class="string">'redux/react'</span>).Provider;</div><div class="line"><span class="keyword">var</span> stores = <span class="built_in">require</span>(<span class="string">'AppStore'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> redux = createRedux(stores);</div><div class="line"></div><div class="line"><span class="keyword">var</span> App = React.createClass(&#123;</div><div class="line">    <span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">redux</span>=<span class="string">&#123;redux&#125;</span>&gt;</span></span></div><div class="line">                &#123;function() &#123; return <span class="tag">&lt;<span class="name">AppWrap</span> /&gt;</span>; &#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">React.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.body</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p>一切就是这么简单么么哒~ 后续各种有的没的，webpack 都会帮你进行处理。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>至此我们已经基本上手了 webpack 的使用，下面是补充一些有用的技巧。</p>
<h3 id="一-shimming"><a href="#一-shimming" class="headerlink" title="一. shimming"></a>一. shimming</h3><p>在 AMD/CMD 中，我们需要对不符合规范的模块（比如一些直接返回全局变量的插件）进行 shim 处理，这时候我们需要使用 <a href="https://github.com/webpack/exports-loader" target="_blank" rel="external">exports-loader</a> 来帮忙：</p>
<p><code>{ test: require.resolve(&quot;./src/js/tool/swipe.js&quot;),  loader: &quot;exports?swipe&quot;}</code></p>
<p>之后在脚本中需要引用该模块的时候，这么简单地来使用就可以了：</p>
<p><code>require(&#39;./tool/swipe.js&#39;);</code><br><code>swipe();</code></p>
<h3 id="二-自定义公共模块提取"><a href="#二-自定义公共模块提取" class="headerlink" title="二. 自定义公共模块提取"></a>二. 自定义公共模块提取</h3><p>在文章开始我们使用了 CommonsChunkPlugin 插件来提取多个页面之间的公共模块，并将该模块打包为 common.js 。</p>
<p>但有时候我们希望能更加个性化一些，我们可以这样配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">"webpack/lib/optimize/CommonsChunkPlugin"</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="attr">p1</span>: <span class="string">"./page1"</span>,</div><div class="line">        <span class="attr">p2</span>: <span class="string">"./page2"</span>,</div><div class="line">        <span class="attr">p3</span>: <span class="string">"./page3"</span>,</div><div class="line">        <span class="attr">ap1</span>: <span class="string">"./admin/page1"</span>,</div><div class="line">        <span class="attr">ap2</span>: <span class="string">"./admin/page2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">plugins</span>: [</div><div class="line">        <span class="keyword">new</span> CommonsChunkPlugin(<span class="string">"admin-commons.js"</span>, [<span class="string">"ap1"</span>, <span class="string">"ap2"</span>]),</div><div class="line">        <span class="keyword">new</span> CommonsChunkPlugin(<span class="string">"commons.js"</span>, [<span class="string">"p1"</span>, <span class="string">"p2"</span>, <span class="string">"admin-commons.js"</span>])</div><div class="line">    ]</div><div class="line">&#125;;</div><div class="line"><span class="comment">// &lt; script&gt;s required:</span></div><div class="line"><span class="comment">// page1.html: commons.js, p1.js</span></div><div class="line"><span class="comment">// page2.html: commons.js, p2.js</span></div><div class="line"><span class="comment">// page3.html: p3.js</span></div><div class="line"><span class="comment">// admin-page1.html: commons.js, admin-commons.js, ap1.js</span></div><div class="line"><span class="comment">// admin-page2.html: commons.js, admin-commons.js, ap2.js</span></div></pre></td></tr></table></figure>
<h3 id="三-独立打包样式文件"><a href="#三-独立打包样式文件" class="headerlink" title="三. 独立打包样式文件"></a>三. 独立打包样式文件</h3><p>有时候可能希望项目的样式能不要被打包到脚本中，而是独立出来作为.css，然后在页面中以<code>&lt;link&gt;</code>标签引入。这时候我们需要 <a href="https://github.com/webpack/extract-text-webpack-plugin" target="_blank" rel="external">extract-text-webpack-plugin</a> 来帮忙：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">'common.js'</span>);</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">plugins</span>: [commonsPlugin, <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>)],</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">    	<span class="comment">//...省略其它配置</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终 webpack 执行后会乖乖地把样式文件提取出来：</p>
<p><img src="/images/webpack/webpack-02.png" alt=""></p>
<h3 id="四-使用CDN-远程文件"><a href="#四-使用CDN-远程文件" class="headerlink" title="四. 使用CDN/远程文件"></a>四. 使用CDN/远程文件</h3><p>有时候我们希望某些模块走CDN并以<code>&lt;script&gt;</code>的形式挂载到页面上来加载，但又希望能在 webpack 的模块中使用上。</p>
<p>这时候我们可以在配置文件里使用 externals 属性来帮忙：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">externals</span>: &#123;</div><div class="line">        <span class="comment">// require("jquery") 是引用自外部模块的</span></div><div class="line">        <span class="comment">// 对应全局变量 jQuery</span></div><div class="line">        <span class="string">"jquery"</span>: <span class="string">"jQuery"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要留意的是，得确保 CDN 文件必须在 webpack 打包文件引入之前先引入。</p>
<p>我们倒也可以使用 <a href="https://github.com/ded/script.js" target="_blank" rel="external">script.js</a> 在脚本中来加载我们的模块：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $script = <span class="built_in">require</span>(<span class="string">"scriptjs"</span>);</div><div class="line">$script(<span class="string">"//ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  $(<span class="string">'body'</span>).html(<span class="string">'It works!'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="五-与-grunt-gulp-配合"><a href="#五-与-grunt-gulp-配合" class="headerlink" title="五. 与 grunt/gulp 配合"></a>五. 与 grunt/gulp 配合</h3><p>以 gulp 为示例，我们可以这样混搭：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">"webpack"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// run webpack</span></div><div class="line">    webpack(&#123;</div><div class="line">        <span class="comment">// configuration</span></div><div class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> gutil.PluginError(<span class="string">"webpack"</span>, err);</div><div class="line">        gutil.log(<span class="string">"[webpack]"</span>, stats.toString(&#123;</div><div class="line">            <span class="comment">// output options</span></div><div class="line">        &#125;));</div><div class="line">        callback();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当然我们只需要把配置写到 webpack({ … }) 中去即可，无须再写 webpack.config.js 了。</p>
<p>更多参照信息请参阅：<a href="http://webpack.github.io/docs/usage-with-grunt.html" target="_blank" rel="external">grunt配置</a> / <a href="http://webpack.github.io/docs/usage-with-gulp.html" target="_blank" rel="external">gulp配置</a> 。</p>
<h3 id="六-React-相关"><a href="#六-React-相关" class="headerlink" title="六. React 相关"></a>六. React 相关</h3><p>⑴ 推荐使用 npm install react 的形式来安装并引用 React 模块，而不是直接使用编译后的 react.js，这样最终编译出来的 React 部分的脚本会减少 10-20 kb左右的大小。</p>
<p>⑵ <a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="external">react-hot-loader</a> 是一款非常好用的 React 热插拔的加载插件，通过它可以实现修改-运行同步的效果，配合 <a href="http://webpack.github.io/docs/webpack-dev-server.html" target="_blank" rel="external">webpack-dev-server</a> 使用更佳！</p>
<h3 id="七-Vue-相关"><a href="#七-Vue-相关" class="headerlink" title="七. Vue 相关"></a>七. Vue 相关</h3><p>关于webpack + vue + vue-loader，原作者提供了一个<a href="https://github.com/vuejs/vue-loader-example" target="_blank" rel="external">vue-loader-example</a>的demo。</p>
<h4 id="目录结构设计"><a href="#目录结构设计" class="headerlink" title="目录结构设计"></a>目录结构设计</h4><ul>
<li><p><components> 组件目录，一个组件一个 .vue 文件</components></p>
<ul>
<li><p>a.vue</p>
</li>
<li><p>b.vue</p>
</li>
</ul>
</li>
<li><p><lib> 如果实在有不能算组件，但也不来自外部 (npm) 的代码，可以放在这里</lib></p>
<ul>
<li><p>foo.css</p>
</li>
<li><p>bar.js</p>
</li>
</ul>
</li>
<li><p><src> 主应用/页面相关文件</src></p>
<ul>
<li><p>app.html 主 html</p>
</li>
<li><p>app.vue 主 vue</p>
</li>
<li><p>app.js 通常做的事情只是 var Vue = require(‘vue’); new Vue(require(‘./app.vue’))</p>
</li>
</ul>
</li>
<li><p><dist> (ignored)</dist></p>
</li>
<li><p><node_modules> (ignored)</node_modules></p>
</li>
<li><p>gulpfile.js 设计项目打包/监听等任务</p>
</li>
<li><p>package.json 记录项目基本信息，包括模块依赖关系</p>
</li>
<li><p>README.md 项目基本介绍</p>
</li>
</ul>
<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>通过 <code>gulpfile.js</code> 我们可以设计整套基于 webpack 的打包/监听/调试的任务</p>
<p>在 <a href="https://www.npmjs.com/package/gulp-webpack#multiple-entry-points" target="_blank" rel="external">gulp-webpack</a> 包的官方文档里推荐的写法是这样的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'gulp-webpack'</span>);</div><div class="line"><span class="keyword">var</span> named = <span class="built_in">require</span>(<span class="string">'vinyl-named'</span>);</div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src([<span class="string">'src/app.js'</span>, <span class="string">'test/test.js'</span>])</div><div class="line">    .pipe(named())</div><div class="line">    .pipe(webpack())</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们对这个文件稍加修改，首先加入 vue-loader</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tnpm install vue-loader --save</div><div class="line"></div><div class="line">.pipe(webpack(&#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>: <span class="string">'vue'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<p>其次，把要打包的文件列表从 gulp.src(…) 中抽出来，方便将来维护，也有机会把这个信息共享到别的任务</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> appList = [<span class="string">'main'</span>, <span class="string">'sub1'</span>, <span class="string">'sub2'</span>]</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(mapFiles(appList, <span class="string">'js'</span>))</div><div class="line">    ...</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @private</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapFiles</span>(<span class="params">list, extname</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> list.map(<span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;<span class="keyword">return</span> <span class="string">'src/'</span> + app + <span class="string">'.'</span> + extname&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在运行 <code>gulp</code> 命令，相应的文件应该就打包好并生成在了 <code>dist</code> 目录下。然后我们在 <code>src/*.html</code> 中加入对这些生成好的 js 文件的引入：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>用浏览器打开 <code>src/main.html</code> 这时页面已经可以正常工作了</p>
<h4 id="加入监听"><a href="#加入监听" class="headerlink" title="加入监听"></a>加入监听</h4><p>监听更加简单，只要在刚才 <code>webpack(opt)</code> 的参数中加入 <code>watch: true</code> 就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.pipe(webpack(&#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>: <span class="string">'vue'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">watch</span>: <span class="literal">true</span></div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<p>当然最好把打包和监听设计成两个任务，分别起名为 bundle 和 watch：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">.pipe(webpack(&#123;</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>: <span class="string">'vue'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">watch</span>: <span class="literal">true</span></div><div class="line">&#125;))</div><div class="line">当然最好把打包和监听设计成两个任务，分别起名为 bundle 和 watch：</div><div class="line"></div><div class="line">gulp.task(<span class="string">'bundle'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(mapFiles(appList, <span class="string">'js'</span>))</div><div class="line">    .pipe(named())</div><div class="line">    .pipe(webpack(getConfig()))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(mapFiles(appList, <span class="string">'js'</span>))</div><div class="line">    .pipe(named())</div><div class="line">    .pipe(webpack(getConfig(&#123;<span class="attr">watch</span>: <span class="literal">true</span>&#125;)))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @private</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getConfig</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> config = &#123;</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">      <span class="attr">loaders</span>: [</div><div class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>: <span class="string">'vue'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!opt) &#123;</div><div class="line">    <span class="keyword">return</span> config</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> opt) &#123;</div><div class="line">    config[i] = opt</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在你可以不必每次修改文件之后都运行 <code>gulp bundle</code> 才能看到最新的效果，每次改动之后直接刷新浏览器即可。</p>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p><img src="/images/webpack/webpack-03.png" alt=""></p>
<p>打包好的代码已经不那么易读了，直接在这样的代码上调试还是不那么方便的。这个时候，webpack + vue 有另外一个现成的东西：source map 支持。为 webpack 加入这个配置字段 <code>devtool: &#39;source-map&#39;</code>：</p>
<p><code>var config = { module: { loaders: [ { test: /.vue$/, loader: &#39;vue&#39;} ] }, devtool: &#39;source-map&#39; }</code></p>
<p>再次运行 <code>gulp bundle</code> 或 <code>gulp watch</code> 试试看，是不是开发者工具里 debug 的时候，可以追踪断点到源代码了呢：）</p>
<p><img src="/images/webpack/webpack-04.png" alt=""></p>
<p>完整的 javascript 代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'gulp-webpack'</span>)</div><div class="line"><span class="keyword">var</span> named = <span class="built_in">require</span>(<span class="string">'vinyl-named'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> appList = [<span class="string">'main'</span>]</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'bundle'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'done'</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'bundle'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(mapFiles(appList, <span class="string">'js'</span>))</div><div class="line">    .pipe(named())</div><div class="line">    .pipe(webpack(getConfig()))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(mapFiles(appList, <span class="string">'js'</span>))</div><div class="line">    .pipe(named())</div><div class="line">    .pipe(webpack(getConfig(&#123;<span class="attr">watch</span>: <span class="literal">true</span>&#125;)))</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @private</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getConfig</span>(<span class="params">opt</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> config = &#123;</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">      <span class="attr">loaders</span>: [</div><div class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>: <span class="string">'vue'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devtool</span>: <span class="string">'source-map'</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!opt) &#123;</div><div class="line">    <span class="keyword">return</span> config</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> opt) &#123;</div><div class="line">    config[i] = opt[i]</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * @private</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapFiles</span>(<span class="params">list, extname</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> list.map(<span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;<span class="keyword">return</span> <span class="string">'src/'</span> + app + <span class="string">'.'</span> + extname&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结：虽然是有用到webpack，但还是需要gulp的辅助，之后会继续更新，只需要webpack做来为打包管理工具。</p>
<p><a href="http://jiongks.name/blog/just-vue/" target="_blank" rel="external">原文链接</a></p>
<hr>
<p>参考文章：</p>
<ul>
<li><p><a href="http://segmentfault.com/a/1190000002551952" target="_blank" rel="external">webpack入门指谜</a></p>
</li>
<li><p><a href="https://github.com/petehunt/webpack-howto" target="_blank" rel="external">webpack-howto</a></p>
</li>
<li><p><a href="http://www.68kejian.com/app/detail.html?id=76&amp;&amp;c=442&amp;&amp;name=WebPack%E4%BB%8B%E7%BB%8D" target="_blank" rel="external">WebPack介绍</a></p>
</li>
</ul>
<p><a href="http://www.cnblogs.com/vajoy/p/4650467.html" target="_blank" rel="external">原文链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chrome渲染分析之Rendering工具使用(2)]]></title>
      <url>https://lucius0.github.io/2016/11/16//archivers/chrome-rendering-tools-2/</url>
      <content type="html"><![CDATA[<h2 id="2-show-composited-layer-borders"><a href="#2-show-composited-layer-borders" class="headerlink" title="2.show composited layer borders"></a>2.show composited layer borders</h2><p><img src="/images/tools/tools-05.png" alt=""></p>
<p>中文可翻译为：显示层的组合边界。</p>
<p>我们知道，在页面最终是由多个“图层”渲染而成。勾上这个选项，页面上的“layer(层)”会加上一个黄色的边框显示出来，如下图的天猫首页头部所示：</p>
<p><img src="/images/tools/tools-06.png" alt=""></p>
<p>其中：</p>
<ul>
<li><p>黄色边框：用于显示页面上的layer</p>
</li>
<li><p>蓝色栅格线：表示的是分块，这些分块可以看作是比层更低一级的单位</p>
</li>
</ul>
<p>当然，还有其他颜色的边框线，比如图片如果单独有个layer的话，边框线是蓝色的。</p>
<p><strong>使用这个工具，可以查看当前页面的layer情况，更好的发现页面不需要的layer将之清除。</strong></p>
<h3 id="layer存在的意义"><a href="#layer存在的意义" class="headerlink" title="layer存在的意义"></a>layer存在的意义</h3><p>在弄明白这个问题之前，我们需要先了解一个dom元素最终是如何转变为我们屏幕上可视的图像。在概念上讲，可简单的分为四个步骤：</p>
<p>获取 DOM 并将其分割为多个层<br>将每个层独立的绘制进位图中<br>将层作为纹理上传至 GPU<br>复合多个层来生成最终的屏幕图像。<br>可以将这个过程理解为设计师的Photoshop文件。在ps源文件里，一个图像是由若干个图层相互叠加而展示出来的。分成多个图层的好处就是每个图层相对独立，修改方便，对单个图层的修改不会影响到页面上的其他图层。</p>
<p>基于photoshop的图层理念来理解web端的层，那么就很容易理解了。layer存在的意义在于：<strong>用最小的代价来改变某个页面元素。</strong></p>
<p>我们可以将某个css动画或某个js交互效果把它抽离到一个单独的渲染层，这样可以加快渲染的效率。</p>
<h3 id="如何创建layer"><a href="#如何创建layer" class="headerlink" title="如何创建layer"></a>如何创建layer</h3><ul>
<li><p>3D 或透视变换(perspective transform) CSS 属性</p>
</li>
<li><p>使用加速视频解码的<code>&lt;video&gt;</code>元素</p>
</li>
<li><p>拥有 3D (WebGL) 上下文或加速的 2D 上下文的<code>&lt;canvas&gt;</code>元素</p>
</li>
<li><p>混合插件(如 Flash)</p>
</li>
<li><p>对自己的 opacity 做 CSS 动画或使用一个动画 webkit 变换的元素</p>
</li>
<li><p>拥有加速 CSS 过滤器的元素</p>
</li>
<li><p>元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)</p>
</li>
<li><p>元素有一个 z-index 较低且包含一个复合层的兄弟元素(换句话说就是该元素在复合层上面渲染)，关于这点，更详细的实践可查看该<a href="http://mp.weixin.qq.com/s?__biz=MzA5NTM2MTEzNw==&amp;mid=379618526&amp;idx=1&amp;sn=bd7bc6f95f3344c3154a0e6868e7c100&amp;scene=1&amp;srcid=0922ACIoEGRX8TGvMlXLXi3I&amp;from=groupmessage&amp;isappinstalled=0#rd" target="_blank" rel="external">文章</a></p>
</li>
</ul>
<p>在webkit内核的浏览器中，如果有上述情况，则会创建一个独立的layer。</p>
<p>其中第一点是最常用的手段，比如我们有时候给一个css效果加上<code>transform: translateZ(0);</code>，目的就是为了创建一个独立的layer。</p>
<p>另外还有另外一个css属性：<code>will-change</code>也能实现同样的效果。</p>
<h3 id="layer-过多带来的问题"><a href="#layer-过多带来的问题" class="headerlink" title="layer 过多带来的问题"></a>layer 过多带来的问题</h3><p>还是拿photoshop来做比喻，一个ps文件如果有非常多的图层，那么这个文件肯定是非常大的。那对于web端也是一样，创建一个新的渲染层，它得消耗额外的内存和管理资源。当在内存资源有限的设备，比如手机上，由于过多的渲染层来带的开销而对页面渲染性能产生的影响，甚至远远超过了它在性能改善上带来的好处。</p>
<p>举个栗子，我们在天猫首页上加入css：<code>* {-webkit-transform: translateZ(0);}</code>。 然后使用timeline可以看到，天猫的渲染耗时非常严重。</p>
<p><img src="/images/tools/tools-07.png" alt=""></p>
<p>其影响的是页面渲染的最后一个环节：<code>Composite Layers</code>。</p>
<p>那么，一个合理的策略是：<strong>当且仅当需要的时候才为元素创建渲染层。</strong></p>
<h3 id="更直观的查看页面layer"><a href="#更直观的查看页面layer" class="headerlink" title="更直观的查看页面layer"></a>更直观的查看页面layer</h3><p>除了rendering 里提供的<code>show composited layer borders</code>选项外，还有一个更为直观的3d图像展示：</p>
<p>先选中<code>timeline</code>的某一帧，然后选择下面的<code>layer</code>标签tab，在右侧的区域就可以看到整个页面的3d图层了。</p>
<p><img src="/images/tools/tools-08.png" alt=""></p>
<p>在这个视图中，你可以对这一帧中的所有渲染层进行扫描、缩放等操作，同时还能看到每个渲染层被创建的原因。</p>
<h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><ul>
<li><p><a href="https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count" target="_blank" rel="external">https://developers.google.com/web/fundamentals/performance/rendering/stick-to-compositor-only-properties-and-manage-layer-count</a></p>
</li>
<li><p><a href="http://www.html5rocks.com/en/tutorials/speed/layers/" target="_blank" rel="external">http://www.html5rocks.com/en/tutorials/speed/layers/</a></p>
</li>
<li><p><a href="https://developer.chrome.com/devtools/docs/rendering-settings" target="_blank" rel="external">https://developer.chrome.com/devtools/docs/rendering-settings</a></p>
</li>
</ul>
<h2 id="show-FPS-meter"><a href="#show-FPS-meter" class="headerlink" title="show FPS meter"></a>show FPS meter</h2><p><strong>show fps meter</strong>可以理解为显示FPS帧频/帧数。开启这个选项后，右上角会实时显示当前页面的FPS。</p>
<p>先简单科普一下啥是FPS。FPS全称叫 Frames Per Second (每秒帧数)。帧数越高，动画显示的越流畅。一般的液晶显示器的刷新频率也就是 60HZ。也就是说，<strong>要想页面上的交互效果及动画流畅。那么FPS稳定在60左右，是最佳的体验</strong>。。据悉 ios上的交互效果都是60FPS呢。</p>
<p>记得以前做Flash游戏的时候，FPS帧数是游戏流畅度的一个重要指标。在web端，道理也是一样。</p>
<p>还记得我之前的文章提到<a href="http://www.ghugo.com/gone-in-60-frames-per-second/" target="_blank" rel="external">《web移动端性能调优及16ms优化》</a> 这里的16毫秒，实际就是 1000ms/60FPS = 16.6ms。 也就是一帧所花费的时间约是16毫秒。</p>
<p>科普完毕，回到正题。chrome提供的<strong>show FPS meter</strong>选项，在我们制作测试页面交互及动画性能时非常有用。同时它也提供了当前页面的GPU占有率给我们。</p>
<p><img src="/images/tools/tools-09.jpg" alt=""></p>
<p><a href="http://www.ghugo.com/chrome-rendering-tools-2/" target="_blank" rel="external">原文链接</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chrome渲染分析之Rendering工具使用(1)]]></title>
      <url>https://lucius0.github.io/2016/11/16//archivers/chrome-rendering-tools-1/</url>
      <content type="html"><![CDATA[<p>页面的绘制时间（paint time）是每一个前端开发都需要关注的的重要指标，它决定了你的页面流畅程度。而如何去观察页面的绘制时间，找到性能瓶颈，可以借助Chrome的开发者工具。</p>
<p>本文主要介绍Chrome渲染分析工具 Rendering。</p>
<p><img src="/images/tools/tools-01.png" alt=""></p>
<p>如上图，按F12调出开发者工具，然后按“ESC”调出Rendering界面。</p>
<p>以上5个选项的意思如下：</p>
<p>1、Show paint rectangles 显示绘制矩形</p>
<p>2、Show composited layer borders 显示层的组合边界（注：蓝色的栅格表示的是分块）</p>
<p>3、Show FPS meter 显示FPS帧频</p>
<p>4、Enable continuous page repainting 开启持续绘制模式 并 检测页面绘制时间</p>
<p>5、Show potential scroll bottlenecks 显示潜在的滚动瓶颈。</p>
<p>OK，简单的翻译了下，估计这样看也不清楚是啥意思。下面来逐个讲解：</p>
<p>由于时间及篇幅关系，本文分为几篇文章进行讲解。</p>
<h2 id="1、Show-paint-rectangles"><a href="#1、Show-paint-rectangles" class="headerlink" title="1、Show paint rectangles"></a>1、Show paint rectangles</h2><p>开启 显示绘制矩形 这个选项，可以看到绿色的框（之前的版本都是红色的框，现在改绿色了，呵呵），这个绿色的框，表示页面正在绘制的区域，即是页面正在渲染，发生绘制操作的区域。 这是用来了解滚动时页面表现的第一个指示器。</p>
<p>鼠标移到图片上，可以发现css3动画的位移，而css3动画的位移导致页面重绘，重绘的区域即是绿色框住的部分。细心的朋友可能会发现，这个绿色框住的部分，并不仅仅就是刚好那个div所在的区域，而涉及到周边的位置。发生这种情况的原因，是页面的重绘是个连带反应，会影响周边元素。</p>
<p><img src="/images/tools/tools-02.png" alt=""></p>
<p>开启这个选项之后，可以做一些常规的页面交互操作，如Slider切换，拍拍网左侧导航mouse over时效果，可以看到页面效果所影响的范围。</p>
<p>再比如滚动页面，拍拍首页会出现一个返回顶部的按钮，<strong>滚动的时候，会发现返回顶部这个区域在不停的进行重绘，而返回顶部是<code>position:fixed</code>定位的。这也解释了为什么fixed定位是最耗性能的属性之一。</strong></p>
<p><img src="/images/tools/tools-03.png" alt=""></p>
<p>如果这个时候，我们给头部的再加个<code>position:fixed</code>，然后滚动页面时，会发现整个页面都几乎是绿色框住了，<strong>这主要是所有具有fixed定位的元素，在页面绘制时会处于同一个渲染层级上</strong>，一头一尾的fixed无疑会导致整个页面进行重绘，性能非常差。</p>
<p><img src="/images/tools/tools-04.png" alt=""></p>
<p>这里提到一个<strong>渲染层级</strong>的概念，webkit内核的浏览器在进行页面绘制、渲染并最终展示在浏览器窗口上，实际上就像是Photoshop上的图层，不同的图层进行叠加最后生成一个图片的过程。</p>
<p>这个层的详细介绍，我下一篇文章会详细介绍，这里先卖个关子。</p>
<p>回到之前的话题，既然绿色框住的部分表示页面重绘，那哪些操作会导致重绘呢？</p>
<h3 id="影响页面重绘的因素"><a href="#影响页面重绘的因素" class="headerlink" title="影响页面重绘的因素"></a>影响页面重绘的因素</h3><p>主要有2大类：</p>
<p>1、页面滚动</p>
<p>2、互动操作</p>
<p>  1).Dom节点被Javascript改变，导致Chrome重新计算页面的layout。</p>
<p>  2).动画不定期更新。</p>
<p>  3).用户交互，如hover导致页面某些元素页面样式的变化。</p>
<p>  4).调整窗口大小 和 改变字体</p>
<p>  5).内容变化，比如用户在input框中输入文字</p>
<p>  6).激活 CSS 伪类，比如 :hover</p>
<p>  7).计算 offsetWidth 和 offsetHeight 属性</p>
<p>  8).增加或者移除样式表</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>影响重绘的因素很多，这里列举了部分常见的操作，在前端开发的过程中。</p>
<p><strong>1、应该尽量避免重绘，并且尽可能的使绘制区域最小，以提升页面性能。</strong></p>
<p>就上面拍拍网的例子，一头一尾加上fixed定位导致整个页面重绘，是不可取的。也许你分析完后以后都不敢用fixed，但是可能在实际工作中这种情况无法避免（设计师或产品经理要求）。何东西都有它适用的地方，<strong>重要的是作为前端人员，你应该能够测量并知道你写的代码所带来的性能损耗及所造成的影响。</strong></p>
<p><strong>2、同时避免组合触发</strong></p>
<p>如滚动的时候同时执行hover效果操作，一个例子(<a href="https://dl.dropboxusercontent.com/u/2272348/codez/expensivescroll/demo.html" target="_blank" rel="external">Expensive Scrolls</a>)，在滚动的时候同时也有可能触发页面模块的hover效果，而hover效果用了<code>box-shadow</code>、<code>border-radius</code>等耗性能大的样式。从而可能导致丢帧现象。</p>
<p>如何去优化：技巧在于滚动时，关闭模块的hover效果，然后设定一个计时器，时间到了再把hover打开。意思是我们保证在滚动时不去执行昂贵的互动事件重绘。当你停止动作一段时间后，我们再将动画开启。</p>
<p>具体可参看这篇文章<a href="http://www.html5rocks.com/en/tutorials/speed/unnecessary-paints/" target="_blank" rel="external">《Avoiding Unnecessary Paints》</a></p>
<p><a href="http://www.ghugo.com/chrome-rendering-tools-1/" target="_blank" rel="external">原文链接：Chrome渲染分析之Rendering工具使用(1)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flexbox与z-index]]></title>
      <url>https://lucius0.github.io/2016/11/13//archivers/flexbox-and-z-index/</url>
      <content type="html"><![CDATA[<p>原文链接： <a href="https://www.sitepoint.com/quick-tip-how-z-index-and-auto-margins-work-in-flexbox/" target="_blank" rel="external">https://www.sitepoint.com/quick-tip-how-z-index-and-auto-margins-work-in-flexbox/</a></p>
<p><a href="https://www.w3.org/TR/css-flexbox-1/" target="_blank" rel="external">Flexbox</a> 是解决例如固定页脚和等高列等的普通布局的一种有效的解决方法。抛开这些，它还提供了一些不太流行的有用特性。让我们来一一探索它们。</p>
<h2 id="Flexbox-和-z-index"><a href="#Flexbox-和-z-index" class="headerlink" title="Flexbox 和 z-index"></a>Flexbox 和 z-index</h2><p>正如你已经知道的那样，<code>z-index</code>属性只能在定位的元素有效。默认情况下，所有元素都拥有<code>position: static</code>并且无法定位。除非<code>position</code>属性的值被设置为<code>relative</code>，<code>absolute</code>，<code>fixed</code>，或者<code>sticky</code>。</p>
<p>然而，一个没有定位性质的元素，例如flex项目同样也可以接收<code>z-index</code>属性。有关信息，在<a href="https://drafts.csswg.org/css-flexbox-1/#painting" target="_blank" rel="external">CSS弹性盒子布局规范</a>有介绍。</p>
<blockquote>
<p>Flex项目在渲染时如同内联块状元素一样，除了命令修改文档流顺序是用来替换未修改文档流顺序，<code>z-index</code>和自动边距在创建层叠上下文表现是不一样的，即使值为static。</p>
</blockquote>
<p>为了理解这些行为，让我们跟随着以下的例子来思考吧：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="JKYEgj" data-user="SitePoint" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/JKYEgj" target="_blank" rel="external">Flexbox and z-index</a> forked by SitePoint(<a href="http://codepen.io" target="_blank" rel="external">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>这里我们定义两个元素：<code>.font</code>元素和<code>.back</code>元素。<code>.font</code>元素有一内容值为‘1’的子元素，并且<code>.font</code>元素为绝对定位元素。特别地，它拥有<code>position:fixed</code>属性并且覆盖了整个视图。</p>
<p>至于<code>.back</code>元素是一个flex容器，它包含了两个子元素-一个内容为2和一个为3的子元素。基于我们在上面讨论的，我们可以对flex项目设置<code>z-index</code>属性，即使它们不是定位元素(即它们有<code>position:static</code>)</p>
<p>注意到当我们通过点击上面例子的按钮给flex项目添加<code>z-index:2</code>，它们会被定位到<code>.front</code>元素的上面。</p>
<h2 id="Flexbox和自动边距"><a href="#Flexbox和自动边距" class="headerlink" title="Flexbox和自动边距"></a>Flexbox和自动边距</h2><p>通过给flex项目设置自动边距，我们可以解决相同的UI样式。一开始，我们先假象我们要构造这种类型的页头布局。</p>
<p><img src="/images/css/css-18.png" alt=""></p>
<p>为了构造这种样式的页头，我们使用Flexbox，没有浮动，没有固定宽诸如此类的属性。</p>
<p>代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span>LOGO<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Projects<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"social"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Facebook<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Twitter<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure>
<p>CSS:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">header</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</div><div class="line">  <span class="attribute">max-width</span>: <span class="number">1200px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">60px</span>;</div><div class="line">  <span class="attribute">margin-right</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个例子，<code>nav</code>元素是flex容器，而logo，主菜单，社交菜单则是flex项目。正如你在上一个代码结果看到的，前两个flex项目是沿着主轴排列在flex容器的左边。相反的，社交菜单则是沿着主轴排列在父容器的右边。</p>
<p>还有一种可以实现排列方式的就是给主菜单添加<code>margin-right: auto</code>。只要一行代码，我们就可以重载社交菜单的排列方式并把它始终排列在容器的右边。同样的，我们也可以用<code>align-self</code>属性去覆盖flex项目交叉轴的默认排列方式。</p>
<p>除了自动边距，我们还可以有第二种方法去设计我们的布局。首先，我们移除主菜单的<code>margin-right</code>属性，然后我们对其添加<code>flex-grow</code>属性。</p>
<p>尽管结果看起来两者无异，但却有一个很大的不同点。在第一个解决方法里面，菜单有它计算好的初始宽度。所以举个例子，当视图的宽度为1100px，菜单的宽度看起来则是下面这样的。</p>
<p><img src="/images/css/css-19.png" alt=""></p>
<p>另一方面，对于第二种解决方案，菜单的宽度值会更大，因为我们指定了<code>flex-grow: 1</code>，这是当我们视图宽度为1100px时相对应的宽度。</p>
<p><img src="/images/css/css-20.png" alt=""></p>
<p>以下是例子：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="ezpgqx" data-user="SitePoint" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/ezpgqx" target="_blank" rel="external">Custom Flexbox Alignment With Auto Margins</a> forked by SitePoint(<a href="http://codepen.io" target="_blank" rel="external">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>现在让我们来假设一下我们想要修改的页头布局，新的设计布局是这样的：</p>
<p><img src="/images/css/css-21.png" alt=""></p>
<p>HTML部分的代码保持不变，我们只是对CSS做稍微修改：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">nav</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#333</span>;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">180px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.menu</span> &#123;</div><div class="line">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个例子，注意下社交菜单排列在父元素的底部。这是因为我们给主菜单添加了<code>margin-bottom: auto</code>。当然，我们同样还可以使用<code>flex-grow: 1</code>。但是这种方法会增加menu的高度。</p>
<p>同样来看一下codepen的示例代码：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="GqpWKW" data-user="SitePoint" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/GqpWKW" target="_blank" rel="external">Custom Flexbox Alignment With flex-grow:1</a> forked by SitePoint(<a href="http://codepen.io" target="_blank" rel="external">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>有一件事我们需要留意的是我们在所有的例子都定义了<code>justify-content</code>属性，我们在视觉上看不出有任何的差异。这是因为我们对flex项目使用了<code>auto margin</code>。只有当我们移除了自动边距(auto margin)之后，<code>justify-content</code>才会生效。根据以下的规范</p>
<blockquote>
<p>If free space is distributed to auto margins, the alignment properties will have no effect in that dimension because the margins will have stolen all the free space left over after flexing.</p>
<p>假如把剩余的空间都分配给自动边距，那么对其属性将会失效。这是因为假如是flex布局之后，margin会占据所剩余的空间。</p>
</blockquote>
<p>接下来，让我们来对页头做出新的改造。</p>
<p>毫无疑问，我们可以通过设置<code>justify-content: space-between</code>来很简单的实现这样的效果。但是再提一次，我们同样也可以通过设置自动边距来达到同样的效果。我们只要给主菜单设置<code>margin: 0 auto</code>。</p>
<p>Codepen 案例：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="beVqax" data-user="SitePoint" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/beVqax" target="_blank" rel="external">Custom Flexbox Alignment With Auto Margins</a> forked by SitePoint(<a href="http://codepen.io" target="_blank" rel="external">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在这篇文章，我们介绍了两种鲜为人知关于Flexbox的小技巧。在结束之前，让我们来概括一下：</p>
<ul>
<li><p>我们可以对flex项目设置<code>z-index</code>，即使他们的定位为<code>static</code>，<code>position: static</code>。</p>
</li>
<li><p>我们可以使用自动边距来实现主轴上的flex项目的自定义排列。</p>
</li>
</ul>
<p>假如你还在你的项目中使用了其他的技巧，欢迎在下面留言。</p>
<script src="http://codepen.io/assets/embed/ei.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出Flexbox]]></title>
      <url>https://lucius0.github.io/2016/11/09//archivers/dive-into-flexbox/</url>
      <content type="html"><![CDATA[<p>先给大家介绍一个可以边学边玩的Flexbox网站。</p>
<ul>
<li><p><a href="http://flexboxfroggy.com/#zh-cn" target="_blank" rel="external">FLEXBOX FROGGY</a></p>
</li>
<li><p><a href="http://www.css88.com/tool/flexboxfroggy/#zh-cn" target="_blank" rel="external">镜像网页</a></p>
</li>
</ul>
<p>Flexible boxes layout是W3C为了更好的在网页中排版和布局而设计出来的一个模块。它用来可以处理更加复杂的布局。它本质是盒模型的延伸，它可以进一步去规范容器中子元素盒模型之间的相对关系。</p>
<h2 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h2><p><img src="/images/css/css-09.png" alt=""></p>
<p>Flexible boxes盒子按照宽和高分出了<code>main axis</code>(主轴)和<code>cross axis</code>(和主轴交叉的轴)，盒子的上边称为<code>cross start</code>,下边称为<code>cross end</code>,左边称为<code>main start</code>,右边称为<code>main end</code>。</p>
<h2 id="Flexible-boxes可以解决什么问题"><a href="#Flexible-boxes可以解决什么问题" class="headerlink" title="Flexible boxes可以解决什么问题"></a>Flexible boxes可以解决什么问题</h2><p><strong>完全居中</strong></p>
<p>在前端中实现居中是一件很头疼的事情，尤其是实现垂直居中，之前翻译了一篇<a href="/2016/10/28//archivers/seven_ways_of_centering_with_css/" title="实现置中的七种方法">实现置中的七种方法</a>，其中提到一种最简单的方法就是使用<code>transform</code>，需要5行代码可以实现完全置中。</p>
<p>下面看一下<code>Flexible boxes</code>实现置中:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-container</span>&#123;</div><div class="line">  <span class="attribute">display</span>:flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Flexible boxes只要3行代码就可以实现置中。</p>
<p><strong>等高的卡片式布局</strong></p>
<p>在没有用Flexible boxes之前很多卡片设计的网站都有这样一个问题，由于卡片里面的内容多少不同，而产生的不等高问题。</p>
<p>Flexible boxes简单的实现等高列：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.flex-container</span>&#123;</div><div class="line">  <span class="attribute">display</span>:flex;</div><div class="line">  <span class="attribute">align-items</span>: stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Flexible-boxes能用在哪里"><a href="#Flexible-boxes能用在哪里" class="headerlink" title="Flexible boxes能用在哪里"></a>Flexible boxes能用在哪里</h2><p><strong>兼容性</strong></p>
<p><img src="/images/css/css-10.png" alt=""></p>
<p>可以看出Flexible boxes从提出到现在也已经有了8个草案。Flexible boxes更新了三种写法。</p>
<p><img src="/images/css/css-11.png" alt=""></p>
<p>caniuse上各个浏览器支持的情况</p>
<p><img src="/images/css/css-12.jpg" alt=""></p>
<p>稍微整理一下(这里借用gitcafe的JaychSu的图用一下)</p>
<p>从这里可以看出现代浏览器都支持最新的那个版本,只有<code>IE10</code>支持中间那个版本。</p>
<p><strong>使用CSS预处理器定义的@mixin解决Flexible boxes版本兼容</strong></p>
<p>在github上有大神把Flexible boxes三个版本搞成一个Sass的<code>@mixin</code>,这样可以在需要的地方直接<code>@include</code>进来就可以轻松解决三个版本的兼容问题。</p>
<p><a href="https://github.com/mastastealth/sass-flex-mixin" target="_blank" rel="external">sass关于Flexible boxes的mixin的github项目地址</a></p>
<h2 id="Flexible-boxes实现的原理逻辑"><a href="#Flexible-boxes实现的原理逻辑" class="headerlink" title="Flexible boxes实现的原理逻辑"></a>Flexible boxes实现的原理逻辑</h2><p><strong>display（定义容器里面为flex文档流）</strong></p>
<ul>
<li><p><code>dislpay:flex</code>使父容器表现为块盒子</p>
</li>
<li><p><code>display:inline-flex</code>使容器表现为行盒子</p>
</li>
</ul>
<p><strong>flex</strong></p>
<p>flex是<code>flex-grow,flex-shrink,flex-basis</code>的缩写形式。默认值是<code>0 1 auto</code>。</p>
<p><strong>flex-basis</strong></p>
<p>flex-basis:flex-basis可以理解为我们给子元素设置的宽度。默认值是auto,宽度设置为auto时，盒子的宽度取决你们元素的宽度。</p>
<p><img src="/images/css/css-13.png" alt=""></p>
<p><strong>flex-grow和flex-shrink</strong></p>
<p>grow和shrink是一对双胞胎，grow表示伸张因子，shrink表示是收缩因子。</p>
<p>grow在flex容器下的子元素的宽度和比容器和小的时候起作用。 grow定义了子元素的宽度增长因子，容器中除去子元素之和剩下的宽度会按照各个子元素的gorw值进行平分加大各个子元素上。</p>
<p><strong>公式：</strong></p>
<p>计算容器还剩空间</p>
<p><code>available_space(容器还剩的空间）=container_size(容器宽度)-flex_item_total(子元素宽度之和)</code></p>
<p>计算增长单位</p>
<p><code>grow_unit(增长单位)=available_space/flex_grow_total(子元素增长因子之和)</code></p>
<p>得到子元素的宽度</p>
<p><code>flex-item-width(子元素计算得到的宽度)=flex-basis+grow-unit*flex-grow</code></p>
<p><img src="/images/css/css-14.png" alt=""></p>
<p>上面例子的计算</p>
<p><code>container-size=480px;
flex-item-total=100*3=300px;
flex-grow-total=3+2+1=6;
available_space=480-300=180px;
grow_unit=180/6=30px;</code></p>
<p>子元素1的宽度为：</p>
<p><code>flex_item_width1=100+3*30=190px;</code></p>
<p>子元素2的宽度为：</p>
<p><code>flex_item_width1=100+2*30=160px;</code></p>
<p>子元素3的宽度为：</p>
<p><code>flex_item_width1=100+30=130px;</code></p>
<p data-height="499" data-theme-id="0" data-slug-hash="pvQZoy" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/pvQZoy" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>shrink则是在宽度和比容器宽度大时候，才有用。按照shrink的值减去相应大小得到子元素的值。</p>
<p><strong>公式：</strong></p>
<p>overflow_space(溢出的宽度)</p>
<p><strong>计算溢出的宽度</strong></p>
<p><code>overflow-space=flex-item-total(子元素basis宽度之和)-container_width(容器宽度)</code></p>
<p><strong>得到计算的子元素的宽度</strong></p>
<p><code>item-basis:子元素设置的flex-basis；
item-shrink:子元素的flex-shrink；
item-shrink-sum:所有子元素flex_shrink的和。     
flex_item_width(计算的子元素的宽度)=item-basis 
--(overflow-space*(item-shrink/item-shrink-sum))</code></p>
<p><img src="/images/css/css-15.png" alt=""></p>
<p><code>container-width=480px; item-shrink分别为3，2，1.item-basis=200px;  overflow-space=120px;</code></p>
<p>则：</p>
<p><code>flex_item1_width=200-(120*(3/6))=140px;
flex_item2_width=200-(120*(2/6))=160px; 
flex_item3_width=200-(120*(1/6))=180px;</code></p>
<p data-height="499" data-theme-id="0" data-slug-hash="GgPOJw" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/GgPOJw" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p><strong>align-content</strong></p>
<p>对单行和单列不起作用，多行时才有效，需设置<code>flex-direction:row;flex-wrap:wrap;</code>或者<code>flex-flow:row-wrap</code>,对<code>flex container</code>中的行进行布局排版。</p>
<ul>
<li><p><code>flex-start</code>:行填充到容器的开始。</p>
</li>
<li><p><code>flex-bottom</code>:行填充到容器的结束。</p>
</li>
<li><p><code>center</code>:行居中分布。</p>
</li>
<li><p><code>space-between</code>:行平均分布，第一行在容器开始，最后一行在容器结束。</p>
</li>
<li><p><code>space-around</code>:行平均分布，但行与行之间有空隙。</p>
</li>
</ul>
<p><strong>实例效果</strong></p>
<p data-height="499" data-theme-id="0" data-slug-hash="wBRebG" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/wBRebG" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p><strong>align-items</strong></p>
<p>用于当前行中的子元素进行对齐布局。</p>
<ul>
<li><p><code>flex-start</code>: 子元素的上边缘对齐到行的上边缘。</p>
</li>
<li><p><code>flex-end</code>: 子元素的上边缘对齐到行的下边缘。</p>
</li>
<li><p><code>center</code>: 以中轴线居中。</p>
</li>
<li><p><code>baseline</code>: 子元素的基线对齐。</p>
</li>
<li><p><code>stretch</code>:子元素拉伸至充满容器。</p>
</li>
</ul>
<p data-height="499" data-theme-id="0" data-slug-hash="ZYVJeR" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/ZYVJeR" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p><strong>align-self</strong></p>
<p>应用在子元素上，可以覆盖<code>align-item</code>来获得特殊的元素对齐。</p>
<ul>
<li><p><code>flex-start</code>: 子元素的上边缘对齐到行的上边缘。</p>
</li>
<li><p><code>flex-end</code>: 子元素的上边缘对齐到行的下边缘。</p>
</li>
<li><p><code>center</code>: 以中轴线居中。</p>
</li>
<li><p><code>baseline</code>: 子元素的基线对齐。</p>
</li>
<li><p><code>stretch</code>:子元素拉伸至充满容器。</p>
</li>
</ul>
<p><strong>实例效果</strong></p>
<p data-height="499" data-theme-id="0" data-slug-hash="gbZxRM" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/gbZxRM" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>一个利用<code>align-self</code>来改变默认<code>align-items</code>排版的例子</p>
<p data-height="499" data-theme-id="0" data-slug-hash="MYZvoX" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/MYZvoX" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p><strong>justify-content</strong></p>
<ul>
<li><p><code>flex-start</code>: 子元素靠容器的左边线对齐</p>
</li>
<li><p><code>flex-end</code>: 子元素靠容器的右边线对齐</p>
</li>
<li><p><code>center</code>: 以中轴线居中。</p>
</li>
<li><p><code>space-between</code>: 子元素被平均分布,第一子元素在容器最左边，最后一个子元素在最右边</p>
</li>
<li><p><code>space-around</code>:子元素平均分布，但子元素与子元素之间有空隙</p>
</li>
</ul>
<p><strong>实例效果</strong></p>
<p data-height="499" data-theme-id="0" data-slug-hash="KwbRJe" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/KwbRJe" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p><strong>order</strong></p>
<p>用来改变子元素之间的排列循序，默认值是0，值越小，越往前排。</p>
<p><img src="/images/css/css-16.png" alt=""></p>
<h2 id="Flexible-boxes解决的一些问题。"><a href="#Flexible-boxes解决的一些问题。" class="headerlink" title="Flexible boxes解决的一些问题。"></a>Flexible boxes解决的一些问题。</h2><p><strong>优雅的实现响应式布局。</strong></p>
<p><img src="/images/css/css-17.gif" alt=""></p>
<p data-height="499" data-theme-id="0" data-slug-hash="EaGrOy" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/EaGrOy" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p><strong>最简洁的实现媒体对象效果。（不需要浮动和创建BFC哦！）</strong></p>
<p data-height="499" data-theme-id="0" data-slug-hash="ZYVwVY" data-user="luxiaojijan" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/luxiaojijan/pen/ZYVwVY" target="_blank" rel="external">Timer</a> forked by luxiaojijan (<a href="http://codepen.io" target="_blank" rel="external">@luxiaojijan</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<h2 id="关于Flexible-boxes的一些文章"><a href="#关于Flexible-boxes的一些文章" class="headerlink" title="关于Flexible boxes的一些文章"></a>关于Flexible boxes的一些文章</h2><ul>
<li><a href="http://philipwalton.github.io/solved-by-Flexible boxes/" target="_blank" rel="external">Solved by Flexible boxes</a></li>
<li><a href="https://css-tricks.com/snippets/css/a-guide-to-Flexible boxes/" target="_blank" rel="external">A Complete Guide to Flexible boxes</a></li>
<li><a href="http://chriswrightdesign.com/experiments/Flexible boxes-adventures/" target="_blank" rel="external">Flexible boxes adventures</a></li>
</ul>
<script src="http://codepen.io/assets/embed/ei.js"> </script>

<p>出处来自：<a href="http://www.w3cplus.com/css3/flexboxgeng-jia-you-ya-de-webbu-ju.html" target="_blank" rel="external">Flexible boxes更加优雅的Web布局</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的模块简史]]></title>
      <url>https://lucius0.github.io/2016/11/02//archivers/brief-history-of-js-modules/</url>
      <content type="html"><![CDATA[<p><a href="https://medium.com/@sungyeol.choi/javascript-module-module-loader-module-bundler-es6-module-confused-yet-6343510e7bde#.j3e1w7v9r" target="_blank" rel="external">原文</a></p>
<p>你是否刚入门JavaScript并且经常被模块、模块加载器和模块打包器混淆？或者你已经写过一段时间的JavaScript了，但是还是无法掌握模块的专业用语？你可能听过的专业用语例如有<strong>CommonJS，AMD，Browserify，SystemJS，Webpack，JSPM</strong>等等。但是就是不知道我们为什么需要它们。</p>
<p>我将会尽我所能的去解释它们是什么，能解决什么样的问题，以及是怎么样去解决问题的。</p>
<h2 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h2><p><img src="/images/javascript/js-01.png" alt=""></p>
<p>在本文中，我会用一个简单的网页应用程序去演示关于模块的概念。在浏览器上该程序展示了数组的和。它由4个函数跟一个<em>index.html</em>组成。</p>
<p><img src="/images/javascript/js-02.jpeg" alt=""></p>
<p>main函数计算数组的和并把答案在<code>span#answer</code>展示。sum函数依赖两个函数：<code>add</code>跟<code>reduce</code>。<code>add</code>函数的作用顾名思义；即两数字相加。<code>reduce</code>函数会遍历数组并且调用<code>iteratee</code>回调函数。</p>
<p>花点时间理解一下以下的代码。我会在这篇文章反复的使用同样的函数。</p>
<p>0-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">	The Answer is</div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line"><span class="keyword">var</span> answer = sum(values)</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div></pre></td></tr></table></figure>
<p>2-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> reduce(arr, add);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">    length = arr.length,</div><div class="line">    memo = arr[index];</div><div class="line">  <span class="keyword">for</span>(index += <span class="number">1</span>; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">    memo = iteratee(memo, arr[index])</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> memo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>让我们一起来看看如何将这些碎片化的代码拼接在一起创建一个应用。</p>
<h2 id="内嵌脚本"><a href="#内嵌脚本" class="headerlink" title="内嵌脚本"></a>内嵌脚本</h2><p>内嵌脚本就是当你在<code>&lt;script&gt;&lt;/script&gt;</code>标签添加<code>JavaScript</code>代码。我相信大多数的JavaScript开发者在他们的人生中至少有过一次这样子做过。</p>
<p>这是一种很好的开始方式。不需要担心外部脚本或者依赖关系。但同样也带来了不可维护的代码。原因如下：</p>
<ul>
<li><p><strong>缺乏代码可重用性：</strong>假如我们需要添加另一个页面和需要在本页的一些函数，那么我们就只能复制跟黏贴我们所需要的代码。</p>
</li>
<li><p><strong>缺乏依赖解析：</strong>你得保证在<code>main</code>函数之前就存在<code>add,reduce,sum</code>函数脚本。</p>
</li>
<li><p><strong>全局变量名污染：</strong>所有的变量跟函数都是储存在全局变量作用域里面。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">      The Answer is</div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b;</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">          length = arr.length,</div><div class="line">          memo = arr[index];</div><div class="line">        <span class="keyword">for</span>(index += <span class="number">1</span>; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">          memo = iteratee(memo, arr[index])</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> memo;</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> reduce(arr, add);</div><div class="line">      &#125;</div><div class="line">      <span class="comment">/* Main Function */</span></div><div class="line">      <span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line">      <span class="keyword">var</span> answer = sum(values)</div><div class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="引入外部脚本标签"><a href="#引入外部脚本标签" class="headerlink" title="引入外部脚本标签"></a>引入外部脚本标签</h2><p>这是从嵌入脚本的一种自然的过度。现在我们可以将一大块JavaScript代码划分成几小块的脚本文件并通过<code>&lt;script src=&#39;...&#39;&gt;&lt;/script&gt;</code>标签来加载。</p>
<p>通过分离的文件我们可以实现代码的复用。我们也不再需要在不同的页面复制跟黏贴代码。我们只要简单地通过<code>&lt;script&gt;&lt;/script&gt;</code>标签引入文件。这种方法虽然比较好，但是还是存在同样的几种问题：</p>
<ul>
<li><p><strong>缺乏依赖解析：</strong>文件的排序很重要。你需要在<em>main.js</em>之前引入了<em>add.js, reduce.js, add.js</em>。</p>
</li>
<li><p><strong>全局变量污染：</strong>所有的函数跟变量依旧暴露在全局作用域范围内。</p>
</li>
</ul>
<p>0-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">      The Answer is</div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./add.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./reduce.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./sum.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//add.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//reduce.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">    length = arr.length,</div><div class="line">    memo = arr[index];</div><div class="line"></div><div class="line">  index += <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">    memo = iteratee(memo, arr[index])</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> memo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//sum.js</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> reduce(arr, add);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line"><span class="keyword">var</span> answer = sum(values)</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div></pre></td></tr></table></figure>
<h2 id="模块对象以及IIFE"><a href="#模块对象以及IIFE" class="headerlink" title="模块对象以及IIFE"></a>模块对象以及IIFE</h2><p>通过使用模块对象和<a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression" target="_blank" rel="external">立即调用函数表达式IIFE</a>，我们可以减少全局作用域污染。在这种方法，我们仅仅暴露了一个对象在全局作用域。该对象包含了所有的我们所需要的函数跟值在我们的应用里面。在这个例子，我们只暴露了<code>myApp</code>对象给全局作用域。所有的函数将会在<code>myApp</code>对象所支持。</p>
<p>01-my-app.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = &#123;&#125;;</div></pre></td></tr></table></figure>
<p>02-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  myApp.add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">  &#125;  </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>03-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  myApp.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">      length = arr.length,</div><div class="line">      memo = arr[index];</div><div class="line">  </div><div class="line">    index += <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">      memo = iteratee(memo, arr[index])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> memo;</div><div class="line">  &#125;  </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>04-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  myApp.sum = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> myApp.reduce(arr, myUtil.add);</div><div class="line">  &#125;  </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>05-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line">  <span class="keyword">var</span> answer = app.sum(values)</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div><div class="line">&#125;)(myApp);</div></pre></td></tr></table></figure>
<p>06-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">      The Answer is</div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./my-app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./add.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./reduce.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./sum.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意一点以上的文件除了<em>myApp.js</em>现在都包装成IIFE格式。</p>
<p><code>(function(){ /*... your code goes here ...*/ })();</code></p>
<p>通过将每一个文件都包装成IIFE，所有的本地变量都在函数作用域里面。因此不会对全局造成污染。</p>
<p>我们通过附加<code>add, reduce, sum</code>到<code>myApp</code>对象来暴露它们。我们只要引用<code>myApp</code>对象就能调用这些方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">myApp.add(<span class="number">1</span>,<span class="number">2</span>);</div><div class="line">myApp.sum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</div><div class="line">myApp.reduce(add, value);</div></pre></td></tr></table></figure>
<p>我们也可以通过往IIFE传递<code>myApp</code>全局对象作为它的参数，就像<code>main.js</code>文件所示。通过给IIFE传递参数对象，并可以为该对象设置为短别名。这样我们的代码就会稍微简短一点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  <span class="comment">// obj is new veryLongNameOfGlobalObject</span></div><div class="line">&#125;)(veryLongNameOfGloablObject);</div></pre></td></tr></table></figure>
<p>这相对于上一个例子是一个比较大的改进。并且大部分的js库都是采用这样的模式，包括jq。Jq暴露一个全局变量，$，这样所有的函数都在<code>$</code>的对象里面。</p>
<p>是的，这不是一个完美的解决方案。这个方法患有跟上一个案例同样的问题。</p>
<ul>
<li><p><strong>缺乏依赖解析：</strong>文件的排序很重要。你需要在<em>main.js</em>之前引入了<em>add.js, reduce.js, add.js</em>。</p>
</li>
<li><p><strong>全局变量污染：</strong>全局变量的数量现在是1，而不是0。</p>
</li>
</ul>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>在2009年，出现关于要把JavaScript带到服务端的话题。于是，ServerJs诞生了。后来ServerJs改名为CommonJS。</p>
<p>CommonJS不是一个JavaScript库，而是一个标准化组织。它就跟ECMA或者W3C一样。ECMA制定了JavaScript语言的规范。W3C制定了JavaScript网页API，例如DOM或者DOM事件。CommonJS的目标是为网页服务器，桌面程序，命令行应用程序制定一套通用的API。</p>
<p>CommonJS同样为模块制定API。在服务端应用程序是没有HTML页面，也没有<code>&lt;script&gt;</code>标签，因此为模块制定一套清晰的API就显得十分有意义了。模块需要暴露(<strong>export</strong>)给其他模块使用，并且还是可访问性的(<strong>import</strong>)。它的模块输出语法就像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a+b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码定义和输出了一个模块，并且保存在<code>add.js</code>文件里面。</p>
<p>为了使用和引入<code>add</code>模块，你需要将文件名或者模块名传参给<code>require</code>函数。下面就是如何引入模块的语法描述：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(‘./add’);</div></pre></td></tr></table></figure>
<p>假如你有写过NodeJS，这种语法会看起来十分的熟悉。这是因为NodeJS实现了CommonJS风格的模块API。</p>
<h2 id="Asynchronous-Module-Definition-AMD"><a href="#Asynchronous-Module-Definition-AMD" class="headerlink" title="Asynchronous Module Definition(AMD)"></a>Asynchronous Module Definition(AMD)</h2><p>CommonJS带来的问题就是模块的定义是同步的。当你调用<code>‘var add=require(‘add’);</code>，系统会暂停直到模块准备好了。意思就是这行代码会使浏览器发生阻塞直到所有的模块都加载完毕。因此这也不是在浏览器端定义模块应用的最佳方法。</p>
<p>为了将服务端的语法转移到客户端的语法，CommonJS提出了几种模块格式，”Module/Transfer”。其中一个提案就是，”Module/Transfer/C”，后来就成了<a href="https://github.com/amdjs/amdjs-api/blob/master/AMD.md" target="_blank" rel="external">AMD</a>。</p>
<p>AMD的格式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define([‘add’, ‘reduce’], <span class="function"><span class="keyword">function</span>(<span class="params">add, reduce</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>注意<code>define</code>这个函数(或者说关键字)用依赖列表和回调函数作为参数。参数里的回调函数跟依赖列表的顺序一一对应。这跟模块导入无差别，并且回调函数返回的值就是输出(<code>export</code>)的值。</p>
<p>CommonJS和AMD同时解决了模块模式带来的两个遗留问题：<strong>依赖解析</strong>和<strong>全局作用域污染</strong>：我们只需要关心每个模块或者每个文件的依赖关系，和是否存在全局作用域污染问题。。</p>
<h2 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h2><p>AMD可以帮我们解决浏览器应用程序中的脚本标签跟全局污染的问题。那么，我们该如何使用它呢？RequireJS出现了。RequireJS是Javascript的<strong>模块加载器</strong>。它的作用就是帮助我们异步加载我们所需的模块。</p>
<p>今晚它的名字带有<code>require</code>，但是它的目标并不是支持CommonJS的<code>require</code>语法。有了RequireJS，我们就可以编写AMD风格的模块。。</p>
<p>在你开始写程序之前，你需要到<a href="http://requirejs.org/docs/start.html" target="_blank" rel="external">RequireJS website</a>下载<em>require.js</em>文件。如下就是用RequireJS风格编写的例子。</p>
<p>0-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">      The Answer is</div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"main"</span> <span class="attr">src</span>=<span class="string">"require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line">define([<span class="string">'sum'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">sum</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line">  <span class="keyword">var</span> answer = sum(values)</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>2-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add.js</span></div><div class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> add;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>3-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add.js</span></div><div class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> add;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>4-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reduce.js</span></div><div class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> reduce = <span class="function"><span class="keyword">function</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">      length = arr.length,</div><div class="line">      memo = arr[index];</div><div class="line"></div><div class="line">    index += <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">      memo = iteratee(memo, arr[index])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> memo;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> reduce;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>注意在index.html文件只有一个脚本标签</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">”main”</span> <span class="attr">src</span>=<span class="string">”require.js”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>该页面加载了<code>require.js</code>，并且<code>data-main=&#39;main&#39;</code>属性通知RequireJs在这个页面哪里是开始节点。通常默认情况下，它假定所有的文件都有<em>‘.js’</em>扩展名，因此可以忽略<em>‘.js’</em>后缀名的文件。但当RequireJS加载完<em>main.js</em>之后，它会加载该文件的依赖，以及依赖的依赖，等等。浏览器的开发者工具展示了所有文件的加载顺序。</p>
<p><img src="/images/css/css-08.png" alt=""></p>
<p>浏览器加载<code>index.html</code>以及加载它的<code>require.js</code>。剩下的文件和依赖由<code>require.js</code>来负责加载。</p>
<p>RequireJS和AMD解决了我们之前的所有问题。然而，它也带来了其他一些不是很严重的问题。</p>
<ul>
<li><p>AMD语法太过于复杂。因为所有都包装在<code>define</code>函数里面，所以会在我们的代码产生一些额外的缩进。假如是比较小的文件，这也没什么大问题，但假如是比较庞大的文件，那么它将是一种精神折磨。</p>
</li>
<li><p>数组里的依赖列表必须与函数的参数列表相匹配。假如有大量的依赖，那么要理清依赖顺序也是比较困难的一件事情。如果模块有几个个依赖，后来又要从中删除一个，那么久很难找到匹配的模块和参数。</p>
</li>
<li><p>伴随着现代浏览器(HTTP 1.1)，加载很多小文件也会降低性能。</p>
</li>
</ul>
<h2 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h2><p>由于这些原因，一些人想要用CommonJS语法来代替。但是CommonJS语法主要是针对服务器以及同步的，对吧？那么Browserify的出现就是要来解决这些问题的。有了Browserify，你就可以在浏览器应用程序使用CommonJS。Browserify是一个<strong>模块加载器</strong>。Browserify遍历你代码的依赖树，并且将它们打包成一个文件。</p>
<p>不像RequireJS，Browserify更像是一个命令行工具。你需要使用NodeJS和NPM来安装它。只要你在你的系统安装了nodeJS，那么输入以下命令行。</p>
<p><code>npm install -g browserify</code></p>
<p>让我们来看下用CommonJS语法的例子程序。</p>
<p>0-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">      The Answer is</div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>1-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js</span></div><div class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">'./sum'</span>);</div><div class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line"><span class="keyword">var</span> answer = sum(values)</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div></pre></td></tr></table></figure>
<p>2-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//sum.js</span></div><div class="line"><span class="keyword">var</span> reduce = <span class="built_in">require</span>(<span class="string">'./reduce'</span>);</div><div class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./add'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> reduce(arr, add);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>3-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//add.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>4-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//reduce.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">    length = arr.length,</div><div class="line">    memo = arr[index];</div><div class="line"></div><div class="line">  index += <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">    memo = iteratee(memo, arr[index])</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> memo;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>你可能已经注意到在<code>index.html</code>文件中，加载了脚本文件<code>bundle.js</code>。那么<code>bundle.js</code>文件在哪里呢？只要你执行下面的命令行，Browserify会为我们生成该文件。</p>
<p><code>$ brwoserify main.js -o bundle.js</code></p>
<p>Browserify会解析<code>main.js</code>里的<code>require</code>函数调用和遍历项目里面的依赖树。然后将他们都打包成一个文件。</p>
<p>如下就是<code>bundle</code>文件的相关代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">t,n,r</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">o,u</span>)</span>&#123;<span class="keyword">if</span>(!n[o])&#123;<span class="keyword">if</span>(!t[o])&#123;<span class="keyword">var</span> a=<span class="keyword">typeof</span> <span class="built_in">require</span>==<span class="string">"function"</span>&amp;&amp;<span class="built_in">require</span>;<span class="keyword">if</span>(!u&amp;&amp;a)<span class="keyword">return</span> a(o,!<span class="number">0</span>);<span class="keyword">if</span>(i)<span class="keyword">return</span> i(o,!<span class="number">0</span>);<span class="keyword">var</span> f=<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Cannot find module '"</span>+o+<span class="string">"'"</span>);<span class="keyword">throw</span> f.code=<span class="string">"MODULE_NOT_FOUND"</span>,f&#125;<span class="keyword">var</span> l=n[o]=&#123;<span class="attr">exports</span>:&#123;&#125;&#125;;t[o][<span class="number">0</span>].call(l.exports,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> n=t[o][<span class="number">1</span>][e];<span class="keyword">return</span> s(n?n:e)&#125;,l,l.exports,e,t,n,r)&#125;<span class="keyword">return</span> n[o].exports&#125;<span class="keyword">var</span> i=<span class="keyword">typeof</span> <span class="built_in">require</span>==<span class="string">"function"</span>&amp;&amp;<span class="built_in">require</span>;<span class="keyword">for</span>(<span class="keyword">var</span> o=<span class="number">0</span>;o&lt;r.length;o++)s(r[o]);<span class="keyword">return</span> s&#125;)(&#123;<span class="number">1</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125;,&#123;&#125;],<span class="number">2</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">'./sum'</span>);</div><div class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line"><span class="keyword">var</span> answer = sum(values)</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div><div class="line"></div><div class="line">&#125;,&#123;<span class="string">"./sum"</span>:<span class="number">4</span>&#125;],<span class="number">3</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">    length = arr.length,</div><div class="line">    memo = arr[index];</div><div class="line"></div><div class="line">  index += <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">    memo = iteratee(memo, arr[index])</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> memo;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125;,&#123;&#125;],<span class="number">4</span>:[<span class="function"><span class="keyword">function</span>(<span class="params">require,module,exports</span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> reduce = <span class="built_in">require</span>(<span class="string">'./reduce'</span>);</div><div class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'./add'</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> reduce(arr, add);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125;,&#123;<span class="string">"./add"</span>:<span class="number">1</span>,<span class="string">"./reduce"</span>:<span class="number">3</span>&#125;]&#125;,&#123;&#125;,[<span class="number">2</span>]);</div></pre></td></tr></table></figure>
<p>你无需每一行的去理解这个打包文件的意思。你只要注意一点的是，所有熟悉的代码，主文件，以及所有的依赖都在这文件里面。</p>
<h2 id="UMD-—-只会让你感到更加的困惑"><a href="#UMD-—-只会让你感到更加的困惑" class="headerlink" title="UMD — 只会让你感到更加的困惑"></a>UMD — 只会让你感到更加的困惑</h2><p>现在我们已经学会了<em>全局对象</em>，<em>CommonJS</em>和<em>AMD</em>风格的模块。并且有很多库可以帮助我们要不用CommonJS，要不AMD。但是假如我们正在写一个模块，并想部署到互联网上去怎么办？我们该用那种风格的模块。</p>
<p>用三种不同的模块都是可以的，如全局模块对象，CommonJS和AMD都是最终选择来的。但是我们不得不维护这三种类型的文件，并且用户不得不他们所下载的是哪种模块类型。</p>
<p>通用模块定义(UMD)就是来处理这个特殊的问题的。在本质上，UMD就是用一套<code>if/else</code>来判断目前的运行环境支持哪种模块类型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//sum.umd.js</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</div><div class="line">        <span class="comment">// AMD</span></div><div class="line">        define([<span class="string">'add'</span>, <span class="string">'reduce'</span>], factory);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="comment">// Node, CommonJS-like</span></div><div class="line">        <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'add'</span>), <span class="built_in">require</span>(<span class="string">'reduce'</span>));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// Browser globals (root is window)</span></div><div class="line">        root.sum = factory(root.add, root.reduce);</div><div class="line">    &#125;</div><div class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">add, reduce</span>) </span>&#123;</div><div class="line">    <span class="comment">//  private methods</span></div><div class="line"></div><div class="line">    <span class="comment">//    exposed public methods</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> reduce(arr, add);</div><div class="line">    &#125;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<h2 id="ES6模块语法"><a href="#ES6模块语法" class="headerlink" title="ES6模块语法"></a>ES6模块语法</h2><p>Javascript全局模块变量，CommonJS，AMD和UMD，这里有太多选择了。现在你可能会问，我下一个项目应该使用什么模块风格？答案是一个也不用。</p>
<p>Javascript语言没有内置的模块系统。这就是为什么我们有太多不同的方式去导入导出模块了。但是最近以来这些改变了。伴随着ES6的到来，模块是Javascript其中的一部分。所以问题的答案是你假如想要你下一个项目前卫不过时的话，ES6模块语法是你最好的选择。</p>
<p>ES6通过<code>import</code>和<code>export</code>关键字来导入导出模块。下面是关于使用ES6模块语法的例子。</p>
<p>01-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">"./sum"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line"><span class="keyword">var</span> answer = sum(values);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div></pre></td></tr></table></figure>
<p>02-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sum.js</span></div><div class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">'./add'</span>;</div><div class="line"><span class="keyword">import</span> reduce <span class="keyword">from</span> <span class="string">'./reduce'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> reduce(arr, add);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>03-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>04-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//reduce.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> index = <span class="number">0</span>,</div><div class="line">  length = arr.length,</div><div class="line">  memo = arr[index];</div><div class="line"></div><div class="line">  index += <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">    memo = iteratee(memo, arr[index]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> memo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于ES6模块有很多短语：ES6模块语法相当简洁。ES6模块将会引领Javascript未来的世界。但是不幸的是，有一个问题，浏览器对这种新语法还没准备好(并未全面支持)。在写这篇文章的时候，只有Chrome浏览器支持<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import" target="_blank" rel="external">import</a>语句。即使当大部分的浏览支持<code>import</code>和<code>export</code>，假如你的应用程序需要在低版本的浏览器运行，那我们同样也会运行出错。</p>
<p>幸运的是，现在有很多工具可以用，这些工具允许我们使用ES6模块语法。</p>
<h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p>Webpack是一个<strong>模块打包器</strong>，就跟Browserify一样，它会遍历依赖树并且将它打包成一个至多个文件。假如真的跟Browserify一样，那我们为什么还需要另一个模块打包器？Webpack可以管理CommonJS，AMD和ES6模块。并且Webpack带来了更灵活更酷的特性：</p>
<ul>
<li><p><strong>代码分离：</strong>当你有多个app同时共享同一些模块，Webpack可以将你的代码打包成两个或者多个文件。例如，当你有两个app，app1跟app2，两者共用多个模块。使用Browserify，你会得到<code>app1.js</code>和<code>app2.js</code>，并且两者都同时拥有所依赖的模块。但是假如使用Webpack，你可以创建<code>app1.js</code>，<code>app2.js</code>，和<code>share-lib.js</code>。是的，你必须在html页面加载这2个文件，但是由于哈希文件名，浏览器缓存以及CDN的原因，它可以减少初始化的加载时间。</p>
</li>
<li><p><strong>加载：</strong>通过自定义加载，你可以在加载任何文件到你的资源去。你可以通过使用<code>require</code>语法加载不单单是Javascript文件，还有css，CoffeeScript，Sass，Less，HTML模板，图片等等。</p>
</li>
<li><p><strong>插件：</strong>Webpack插件可以在你打包写入到文件之前对打包进行操作，有很多社区都在创建Webpack插件。例如，给打包代码添加注释，添加source map，将打包文件分离成众多小文件等等。</p>
</li>
</ul>
<p><em>WebpackDevServer</em>是一个检测到当你的代码发生变化时，会自动打包你的源代码以及自动刷新浏览器的开发服务器。通过代码的及时反馈，从而可以加速开发进度。</p>
<p>让我们看看我们是如何通过Webpack来打包我们的案例程序的。Webpack需要一点引导以及配置。</p>
<p>既然Webpack是JavaScript命令行工具，你就需要安装好nodejs和npm。装好npm之后，执行以下命令行初始化项目：</p>
<p><code>$ mkdir project; cd project
$ npm init -y
$ npm install -D webpack webpack-dev-server</code></p>
<p>你需要给Webpack添加配置文件。在你的配置文件中最少需要<code>entry</code>跟<code>output</code>两个字段。保存以下内容到<code>webpack.config.js</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">   <span class="attr">entry</span>: ‘./app/main.js’,</div><div class="line">   <span class="attr">output</span>: &#123;</div><div class="line">       <span class="attr">filename</span>: ‘bundle.js’</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打开<code>package.json</code>并添加以下<code>script</code>内容。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">    "start": "webpack-dev-server -progress -colors",</div><div class="line">    "build": "webpack"</div><div class="line"> &#125;,</div></pre></td></tr></table></figure>
<p>现在添加所有你的JavaScript模块到<em>project/app</em>目录和添加<em>index.html</em>到<em>project</em>目录下。</p>
<p>01-index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Modules<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">      The Answer is</div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"answer"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>02-webpack.config.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./app/main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'./dist'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>03-package.json</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"jsmodules"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"webpack-dev-server --progress --colors"</span>,</div><div class="line">    <span class="attr">"build"</span>: <span class="string">"webpack"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keywords"</span>: [],</div><div class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"webpack"</span>: <span class="string">"^1.12.14"</span>,</div><div class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^1.14.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>04-app-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app/add.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>05-app-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app/sum.js</span></div><div class="line"><span class="comment">// app/reduce.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">arr, iteratee</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> index = <span class="number">0</span>,</div><div class="line">    length = arr.length,</div><div class="line">    memo = arr[index];</div><div class="line"></div><div class="line">  index += <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">    memo = iteratee(memo, arr[index])</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> memo;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>06-app-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app/sum.js</span></div><div class="line">define([<span class="string">'./reduce'</span>, <span class="string">'./add'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">reduce, add</span>)</span>&#123;</div><div class="line">  sum =  <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> reduce(arr, add);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> sum;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>07-app-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// app/main.js</span></div><div class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">'./sum'</span>);</div><div class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line"><span class="keyword">var</span> answer = sum(values)</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div></pre></td></tr></table></figure>
<p>注意一下<code>add.js</code>和<code>reduce.js</code>编写风格是CommonJS风格，而<code>sum.js</code>则是用AMD风格。Webpack，默认情况下，是可以管理CommonJS和AMD的。假如你的源码有用到ES6模块编码风格，那么你就不得不安装和配置<em>“babel loader”</em>。</p>
<p>一旦你已经安装好所有文件，你可以执行下面命令行来运行你的程序。</p>
<p><code>$ npm start</code></p>
<p>随后打开网站输入网址：<code>http://localhost:8080/webpack-dev-server/</code></p>
<p>此时，你可以打开你喜爱的编译器和输入你的代码。待你保存之后，浏览器会自动刷新和展示你代码改动之后的结果。</p>
<p>有一件事你可能已经注意到了，就是你已经找不到<em>‘dist/bundle.js’</em>文件。这是因为Wepback Dev Server会创建打包文件，并且没有将此写入文件系统中，而是保存在内存里。</p>
<p>为了可以部署，你可能想要创建一个打包文件。你可以执行下面的命令行创建<em>bundle.js</em>文件。</p>
<p><code>$ npm run build</code></p>
<p>假如你有兴趣想了解更多关于Webpack的知识，你可以访问<a href="https://webpack.github.io/docs/" target="_blank" rel="external">Webpack</a>。</p>
<h2 id="Rollup-2015-05"><a href="#Rollup-2015-05" class="headerlink" title="Rollup (2015-05)"></a>Rollup (2015-05)</h2><p>你是否有过导入了一个很大的JavaScript文件但是却使用到里面的一小部分函数？Rollup是JavaScript ES6的另一个模块打包器。跟Browserify和Webpack不同的是，Rollup只会引入你在项目中使用到的代码。假如你的项目引入了一个有很多方法的大模块并且你只用到里面的一小部分方法，Rollup只会打包你在项目中你调用到的方法。这可以很显著的减少打包文件的大小。</p>
<p>Rollup 可以被用作为命令行工具。如果安装好 NodeJS 和 NPM，那么就可以用以下的命令安装。</p>
<p><code>$ npm install -g rollup</code></p>
<p>Rollup可以跟任何类型的模块类型一起执行。但是，推荐使用ES6模块风格，这样就可以使用 <em>tree-shaking</em> 功能。下面是用ES6 编写的例子。</p>
<p>01-add.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b;</div><div class="line"><span class="keyword">let</span> sub = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a - b;</div><div class="line"></div><div class="line"><span class="keyword">export</span> &#123; add, sub &#125;;</div></pre></td></tr></table></figure>
<p>02-reduce.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reduce.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (arr, iteratee) =&gt; &#123;</div><div class="line">  <span class="keyword">let</span> index = <span class="number">0</span>,</div><div class="line">  length = arr.length,</div><div class="line">  memo = arr[index];</div><div class="line"></div><div class="line">  index += <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">    memo = iteratee(memo, arr[index]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> memo;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>03-sum.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sum.js</span></div><div class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'./add'</span>;</div><div class="line"><span class="keyword">import</span> reduce <span class="keyword">from</span> <span class="string">'./reduce'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (arr) =&gt; reduce(arr, add);</div></pre></td></tr></table></figure>
<p>04-main.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">"./sum"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line"><span class="keyword">var</span> answer = sum(values);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div></pre></td></tr></table></figure>
<p>注意在<code>add</code>模块，我引入了另一个函数<code>sub()</code>，但是这个函数在这个项目里面并没有使用。</p>
<p>现在我们用Rollup来打包我们的项目</p>
<p><code>$ rollup main.js -o bundle.js</code></p>
<p>生成的<code>bundle.js</code></p>
<p>bundle.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a + b;</div><div class="line"></div><div class="line"><span class="keyword">var</span> reduce = <span class="function">(<span class="params">arr, iteratee</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> index = <span class="number">0</span>,</div><div class="line">  length = arr.length,</div><div class="line">  memo = arr[index];</div><div class="line"></div><div class="line">  index += <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span>(; index &lt; length; index += <span class="number">1</span>)&#123;</div><div class="line">    memo = iteratee(memo, arr[index]);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> memo;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">arr</span>) =&gt;</span> reduce(arr, add);</div><div class="line"></div><div class="line"><span class="keyword">var</span> values = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> ];</div><div class="line"><span class="keyword">var</span> answer = sum(values);</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"answer"</span>).innerHTML = answer;</div></pre></td></tr></table></figure>
<p>注意观察，<code>sub</code>函数并没有出现在此<code>bunldle.js</code>文件里面。</p>
<h2 id="SystemJS"><a href="#SystemJS" class="headerlink" title="SystemJS"></a>SystemJS</h2><p>SystemJS是一个通用的模块加载器，它可以在浏览器或者NodeJs动态的加载模块，并且它还支持CommonJS，AMD，全局对象和ES6模块。通过插件，它还不仅仅能加载JavaScript，还可以加载CoffeeScript和TypeScript。</p>
<p>SystemJS的另一个好处，就是它是基于ES6 module Loader polyfill。因此它的语法和API在未来很有可能成为JavaScript语言的一部分，它可以让你的代码更加前卫。</p>
<p>可以使用以下语法，通过SystemJS来异步的导入模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.import(‘<span class="built_in">module</span>-name’);</div></pre></td></tr></table></figure>
<p>然后我们可以用配置 API 来配置 SystemJS 的行为。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">System.config(&#123;</div><div class="line">  <span class="attr">transplier</span>: ‘babel’,</div><div class="line">  <span class="attr">baseURL</span>: ‘/app’</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的配置会让SystemJS使用<code>babel</code>来作为ES6模块的编译器，并且从<em>/app</em>目录加载模块。</p>
<p>随着现代JavaScript变得越来越大越来越复杂，开发工作流亦是如此。所以我们需要的，不仅仅是模块加载器，还有寻找开发服务器，生产的模块打包器以及第三方模块包管理器。</p>
<h2 id="JSPM"><a href="#JSPM" class="headerlink" title="JSPM"></a>JSPM</h2><p>JSPM是JavaScript开发工具的一把瑞士军刀。JSPM是一个(1)包管理器；(2)模块加载器；(3)模块打包器。</p>
<p>现在的JavaScript开发很少只需要自己的一些模块就可以完成的，大部分，我们是需要借用第三方模块的。</p>
<p>通过JSPM，你可以通过以下的命令行从NPM或者github来安装第三方模块。</p>
<p><code>jspm install npm:package-name or github:package/name</code></p>
<p>随后会从<em>‘npm’</em>或者<em>‘github’</em>下载至<em>‘jspm_package’</em>目录下。</p>
<p>在开发模式下，你可以使用<em>‘jspm-server’</em>，就跟Webpack Dev Server一样，它会探测到代码是否发生改变并且会自动刷新浏览器展示修改后的结果。但是不同Webpack Dev Server，jspm-server用的是SystemJS模块加载器。因此当它探测到文件有发生变化时，它不会打包所有的模块，而是只加载页面所需要的模块。</p>
<p>但当涉及到部署的问题，你可能想要打包你的代码。JSPM带有打包器，你可以使用以下的命令行来打包你的代码。</p>
<p><code>jspm bundle main.js bundle.js</code></p>
<p>在背后，JSPM采取了Rollup作为它的打包器。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我希望已经给你足够的信息让你去理解关于JavaScript模块化的问题。现在你可能会问，那我在下一个项目应该采用什么的方式呢？很抱歉，我现在无法回答你的问题。现在你已经具备能力去为自己寻找答案。希望本文能让你更容易理解提到有关工具的文档和文章。</p>
<p>你可以到<a href="https://github.com/sungthecoder/js-modules-examples" target="_blank" rel="external">github</a>查看本文中所有的代码例子，假如你有任何疑问，欢迎到下面的评论区留下的问题。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS - 5件你需要知道的css定位]]></title>
      <url>https://lucius0.github.io/2016/10/30//archivers/5-things-you-should-know-about-css/</url>
      <content type="html"><![CDATA[<p>原文链接<a href="https://scotch.io/bar-talk/5-things-you-might-not-know-about-the-css-positioning-types" target="_blank" rel="external">5-things-you-might-not-know-about-the-css-positioning-types</a>。</p>
<p>这些年来前端开发工程师可以利用不同的css方案来搭建出复杂的页面布局。其中有一部分的解决方案已经有些历史了(比如：<code>float</code>)，当然也有些是最近才逐渐流行起来的(比如：<code>flexbox</code>)。</p>
<p>在这篇文章，我们将会深入一步去探讨一些鲜为人知的关于<code>CSS POSITION</code>定位的事情。</p>
<p>在我们开始学习这些事之前，让我们先快速的浏览下可用的定位类型。</p>
<h2 id="回顾可用的CSS定位类型"><a href="#回顾可用的CSS定位类型" class="headerlink" title="回顾可用的CSS定位类型"></a>回顾可用的CSS定位类型</h2><p><code>position</code>这个css属性允许我们指定元素的定位类型。</p>
<h3 id="CSS定位选项"><a href="#CSS定位选项" class="headerlink" title="CSS定位选项"></a>CSS定位选项</h3><p><code>static</code>是该属性的默认值。在这一点上，我们可以称该元素并没有被定位。为了可以定位该元素，我们需要改变它的预设类型。</p>
<p>为了改变预设类型，我们需要将<code>position</code>设置为如下其中一个：</p>
<ul>
<li><p><code>relative</code></p>
</li>
<li><p><code>absolute</code></p>
</li>
<li><p><code>fixed</code></p>
</li>
<li><p><code>sticky</code></p>
</li>
</ul>
<p>只有设置之后，我们才可以使用<code>offset</code>去指定我们元素的位置：</p>
<ul>
<li><p><code>top</code></p>
</li>
<li><p><code>bottom</code></p>
</li>
<li><p><code>left</code></p>
</li>
<li><p><code>right</code></p>
</li>
<li><p>默认初始值<code>auto</code></p>
</li>
</ul>
<p>需要注意一点的是，把元素<code>position</code>设置为<code>absolute</code>或者<code>fixed</code>我们都称之为绝对定位元素。同样，注意一个被定位的元素可以用<code>z-index</code>来指定他们的层叠关系。</p>
<h3 id="CSS定位属性的主要差别"><a href="#CSS定位属性的主要差别" class="headerlink" title="CSS定位属性的主要差别"></a>CSS定位属性的主要差别</h3><p>现在，让我们来简单的讨论下这些定位类型的主要差别：</p>
<ul>
<li><p>一个<em>绝对</em>定位的元素是会完全脱离正常的流。邻近的兄弟节点会占据它的位置。</p>
</li>
<li><p>一个<em>相对</em>或者<em>粘性</em>定位元素保留他们的空间。邻近的元素不会重定位占据该元素保留的空间。然而，这个元素的偏移量不会占据空间。他们已经完全忽略了其他的元素，因此会造成元素之间发生重叠。</p>
</li>
<li><p>一个<em>固定(fixed)</em>定位元素(记住：<code>fixed</code>定位类型元素是<code>absolute</code>定位类型元素的子类)经常相对于<code>relative</code>定位类型的视图(除了有<code>transform</code>属性的父元素，新版本的桌面浏览器均支持这种行为)。</p>
</li>
<li><p>一个<em>粘性(sticky)</em>定位元素是相对与最近可滑动的父元素(比如：<code>overflow: auto</code>)。假如没有这种父元素，则相对于视图定位。</p>
</li>
</ul>
<p>接下来这些类型会在下面的例子中演示：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="qOqNgm" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/qOqNgm" target="_blank" rel="external">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="external">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p><em>注意：粘性定位类型还是处于实验性的技术，并且浏览器的支持有限。当然，假如你想要尝试这个效果，可以用polyfill(例如：<a href="https://github.com/wilddeer/stickyfill" target="_blank" rel="external">stickyfill</a>)加到不支持此类型的浏览器。鉴于支持有限，因此我们在以下的文章将不会对它进行讲解</em></p>
<h2 id="绝对定位元素"><a href="#绝对定位元素" class="headerlink" title="绝对定位元素"></a>绝对定位元素</h2><p>我确定很多人已经知道绝对定位是如何实现的。然而，绝对定位不仅仅需要技巧，更是经常能混淆新手。</p>
<p>基于这个原因，我决定将其列入鲜为人知的列表中(包括相对应的例子)，并在此文章一一讲解。</p>
<p>因此，一个被设置为绝对定位类型的元素是相对于最近的父元素。当然，这仅仅在父元素的定位类型不是<code>static</code>时有效。考虑到这一点，假如父元素没有声明任何类型，那么它是相对于视图定位。</p>
<p data-height="499" data-theme-id="0" data-slug-hash="dYOpMm" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/dYOpMm" target="_blank" rel="external">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="external">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>在这个例子中，我们给绿盒子初始<code>absolute</code>定位并且将<code>offset</code>值设置为<code>bottom: 0</code>和<code>left: 0</code>。此外，我们并没有指定其上一级父元素的定位类型。</p>
<p>然而，我们使外包围盒相对定位(例如：<code>jumbotron</code>元素)。注意一下只要我们修改了绿盒子的父元素的定位类型就会使得绿盒子的位置发生改变。</p>
<h2 id="绝对定位元素无视float属性的存在"><a href="#绝对定位元素无视float属性的存在" class="headerlink" title="绝对定位元素无视float属性的存在"></a>绝对定位元素无视<code>float</code>属性的存在</h2><p>假如一个元素是左浮动或者右浮动并且我们设置它的定位类型为<code>absolute</code>或者<code>fixed</code>，属性<code>float</code>的值则会变成<code>none</code>。另一方面，假如我们将该元素的定位类型设置为<code>relative</code>，则会保留其浮动属性。</p>
<p>看一下以下的相关例子</p>
<p data-height="499" data-theme-id="0" data-slug-hash="WQovLM" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/WQovLM" target="_blank" rel="external">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="external">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>在这个例子里面，我们定义了两个向右浮动的不同元素。值得注意的是，当我们将红盒子改变为<strong>绝对</strong>定位元素，它会忽略<code>float</code>属性，而<strong>相对</strong>定位的绿盒子则保留其属性值。</p>
<h2 id="绝对定位的内联元素跟块级元素的表现一样"><a href="#绝对定位的内联元素跟块级元素的表现一样" class="headerlink" title="绝对定位的内联元素跟块级元素的表现一样"></a>绝对定位的内联元素跟块级元素的表现一样</h2><p><code>absolute</code>定位或者<code>fixed</code>定位的内联元素，跟块级元素具有同样的能力。<a href="https://drafts.csswg.org/css-position-3/#dis-pos-flo" target="_blank" rel="external">这份列表</a>总结了什么类型的元素可以转换为块级元素。</p>
<p>这里同样也是一个例子</p>
<p data-height="499" data-theme-id="0" data-slug-hash="xwEymK" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/xwEymK" target="_blank" rel="external">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="external">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>在这个案例里，我们定义了两个不同的元素。第一个就是块级元素(绿盒子，例如:<code>div</code>)，第二个就是内联元素(红盒子，例如：<code>span</code>)。值得注意的是虽然只有绿盒子显示出来。</p>
<p>红色盒子之所以现在不可见是因为我们赋予它的<code>width</code>跟<code>height</code>只能作用域块级元素跟内联块级元素。再加上，它是一个空的元素(即：它不包含任何的子元素例如文本节点)。</p>
<p>记住一点的是，假如我们将它的定位类型设置为<code>absolute</code>或者<code>fixed</code>，则该元素会出现是因为这时候它的表现已经跟块级元素一样了。</p>
<h2 id="外边距-margins-无法合并绝对定位元素"><a href="#外边距-margins-无法合并绝对定位元素" class="headerlink" title="外边距(margins)无法合并绝对定位元素"></a>外边距(margins)无法合并绝对定位元素</h2><p>默认情况下，当两个垂直外边距互相接触，它们会合并成一个，并且<code>margin</code>值指定为较大的那一个。这种表现称之为<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="external">外边距合并</a>。</p>
<p>就像在一个浮动的元素上的外边距一样，绝对定位的外边距不会跟其他元素合并。</p>
<p>思考一下以下的例子：</p>
<p data-height="499" data-theme-id="0" data-slug-hash="jbVrGd" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/jbVrGd" target="_blank" rel="external">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="external">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>在这个例子，初始化该元素的外边距为<code>20px</code>。另外，该元素的<code>top</code>外边距跟父元素的<code>top</code>外边距合并，同样也是<code>20px</code>。正如你所见，只有当我们绝对定位其元素，<code>top</code>外边距才不会跟父元素相关外边距合并。</p>
<p>但是，如何防止我们的外边距发生合并呢？当然，我们需要放一些东西来分割它们。</p>
<p>也就是说，例如有些许的内边距或者边框(我们应该将这条规则应用在父元素或者子元素)。另外一个选择就是在父元素添加<code>clearfix</code>类。</p>
<h2 id="通过像素和百分比来定位元素"><a href="#通过像素和百分比来定位元素" class="headerlink" title="通过像素和百分比来定位元素"></a>通过像素和百分比来定位元素</h2><p>你是否通过百分比取代像素的方法定义<code>offset</code>来定位元素？假如你的回答是有的话，你可能已经注意到计算<code>offset</code>的值跟你选择的CSS单位(例如：像素或者百分比)不一样。</p>
<p>这看起来有点让人迷惑，对吧？所以，让我们一起来看一下<a href="https://drafts.csswg.org/css-position-3/#valdef-top-percentage" target="_blank" rel="external">规范</a>对于用百分比来声明元素的<code>offset</code>值是怎么描述的。</p>
<blockquote>
<p>The offset is a percentage of the containing block’s width (for left or right) or height (for top and bottom). For stickily positioned elements, the offset is a percentage of the flow root’s width (for left or right) or height (for top or bottom). Negative values are allowed.</p>
</blockquote>
<p>也就是说，只要我们通过百分比来定义<code>offset</code>的值，那么目标元素的位置依赖于父元素的宽(对于左右偏移)和高(对于上下偏移)。</p>
<p>下面的例子演示了这种差异</p>
<p data-height="499" data-theme-id="0" data-slug-hash="PPbGbL" data-user="georgemarts" data-default-tab="result" class="codepen">See the Pen <a href="http://codepen.io/georgemarts/pen/PPbGbL" target="_blank" rel="external">Timer</a> forked by Georgemarts (<a href="http://codepen.io" target="_blank" rel="external">@georgemarts</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a></p>

<p>在这个例子，我们通过了像素跟百分比来移动这个元素。果然，当我们用像素来声明<code>offset</code>的值，元素会在按照我们所期望的位置。</p>
<p>相反，当我们选择百分比来设计CSS偏移单位时，其元素的位移依赖于父元素的尺寸。这里有个有用的可视化图展示了新位置是如何计算的(通过百分比)：</p>
<p><img src="/images/css/css-07.png" alt=""></p>
<p><em>注意：估计你已经知道了，<code>transform</code>属性(伴随着不同的<code>translate</code>方法)同样也可以改变一个元素的位置。但是，请注意假如我们使用百分比来作为CSS的单位，那么该元素是相对于它的尺寸位移而不是相对于父元素的尺寸位移。</em></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我希望这篇文章能帮你牢固的理解CSS的位置布局方法和突出CSS概念的疑惑点。同样我也很乐意在以下的评论你能分享你的想法，问题或者建议。感谢你的阅读！</p>
<script src="http://codepen.io/assets/embed/ei.js"> </script>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS - 七种元素居中的方法]]></title>
      <url>https://lucius0.github.io/2016/10/28//archivers/seven_ways_of_centering_with_css/</url>
      <content type="html"><![CDATA[<p>由于工作时间太忙加上大长假很久没有更新了。</p>
<p>接下来更新一下如何用css居中元素，原文链接<a href="http://thenewcode.com/723/Seven-Ways-of-Centering-With-CSS" target="_blank" rel="external">《Seven-Ways-of-Centering-With-CSS》</a>。</p>
<h2 id="七种元素居中的方法"><a href="#七种元素居中的方法" class="headerlink" title="七种元素居中的方法"></a>七种元素居中的方法</h2><p>居中html元素在网页开发似乎看起来挺简单的。但是在某些案例中，复杂的布局会经常消除一些解决方法，使得网页开发人员特别的头痛。</p>
<p>相对垂直居中，水平居中就略显得简单些，但同时要解决两者就有难度了。在这响应式设计的时代，我们很少能准确的知道元素的高度跟宽度，因此导致很多方案失效。据我所知，CSS至少有6种居中元素的方法。我将用以下的基础代码，讲解从最简单最好实现的到复杂的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"center"</span>&gt;</div><div class="line">  &lt;img src="jimmy-choo-shoe.jpg" alt&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>鞋子图片会改变，但都会保持在500px X 500px 的大小。<a href="http://thenewcode.com/61/An-Easy-Guide-To-HSL-Color-In-CSS3" target="_blank" rel="external">HSL colors</a>会使背景图片保持一致。</p>
<h3 id="使用text-align水平居中"><a href="#使用text-align水平居中" class="headerlink" title="使用text-align水平居中"></a>使用text-align水平居中</h3><p><img src="/images/css/css-01.png" alt=""></p>
<p>有时显而易见的解决方案是最好的选择。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.center</span> &#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(0, 100%, 97%);</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">33%</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方案并不能使图片垂直居中：你需要在<code>&lt;div&gt;</code>添加<code>padding</code>或者给内容添加<code>margin-top</code>跟<code>margin-bottom</code>使得内容与容器有一定的高度。</p>
<h3 id="使用margin居中：auto"><a href="#使用margin居中：auto" class="headerlink" title="使用margin居中：auto"></a>使用margin居中：auto</h3><p><img src="/images/css/css-02.png" alt=""></p>
<p>又一次主要是针对水平居中，跟上面的<code>text-align</code>同样具有局限性</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span><span class="selector-class">.center</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(60, 100%, 97%);</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">width</span>: <span class="number">33%</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意一下<code>display: block</code>，是其属性使得<code>margin: 0 auto</code>生效的。</p>
<h3 id="table-cell-居中"><a href="#table-cell-居中" class="headerlink" title="table-cell 居中"></a>table-cell 居中</h3><p>使用<code>display: table-cell</code>，而不是<code>tabel</code>标签；可以对水平跟垂直居中同时有效，但是需要添加额外的元素作为容器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-aligned"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-core"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"jimmy-choo-shoe.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The Css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center-aligned</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(120, 100%, 97%);</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.center-core</span> &#123;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.center-core</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">33%</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意宽度<code>width: 100%</code>，是为了使其<code>&lt;div&gt;</code>不发生折叠，还有外部容器需要添加高度使其内容垂直居中。可以尝试给<code>html</code>和<code>body</code>设置高度，其内容元素同样也可以在<code>body</code>垂直居中。可以正常的运行在IE 8+浏览器。</p>
<h3 id="绝对居中-Absolute-Centering"><a href="#绝对居中-Absolute-Centering" class="headerlink" title="绝对居中(Absolute Centering)"></a>绝对居中(Absolute Centering)</h3><p><img src="/images/css/css-03.png" alt=""></p>
<p>有一种跨浏览器支持的方案，但是唯一的缺点就是需要在外部容器声明其高度<code>height</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.absolute-aligned</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(200, 100%, 97%);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.absolute-aligned</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">min-width</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">  <span class="attribute">overflow</span>: auto;</div><div class="line">  <span class="attribute">margin</span>: auto;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用translate居中"><a href="#使用translate居中" class="headerlink" title="使用translate居中"></a>使用translate居中</h3><p><img src="/images/css/css-04.png" alt=""></p>
<p>Chris Coiyer 提出了一种能同时支持水平居中跟垂直居中的<a href="http://thenewcode.com/273/CSS3-2D-Transformations-Introduction" target="_blank" rel="external">《新方案》</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(180, 100%, 97%);</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">500px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>同时也带来了以下几点缺点：</strong></p>
<ul>
<li><p>CSS transform 会要求在不同的浏览器添加浏览器前缀；</p>
</li>
<li><p>不能在比较老的IE浏览器兼容(IE 8及以下版本)；</p>
</li>
<li><p>外部容器将需要设置高度(或其他方式)，并且不能从处于绝对位置的内容获取任何高度；</p>
</li>
<li><p>如何内容包含文本，当前浏览器合成技术也会使已发生转换的文本模糊。</p>
</li>
</ul>
<h3 id="Flexbox-居中"><a href="#Flexbox-居中" class="headerlink" title="Flexbox 居中"></a>Flexbox 居中</h3><p><img src="/images/css/css-05.png" alt=""></p>
<p>一旦属性差异性以及浏览器前缀的问题逐渐消失，这种解决方案将会成为主流方案。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center</span> &#123;</div><div class="line">  <span class="attribute">backgroud</span>: <span class="built_in">hsl</span>(240, 100%, 97%);</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在许多方面<code>flexbox</code>是最简单的解决方案，但有一个缺点的是新旧两种语法以及早期版本的IE浏览器不支持(尽管使用<code>display:table-cell</code>可以作为降级方案)。</p>
<p>如今的规范已经确定下来，并且现代的浏览器也支持了，具体的使用方法可以参考<a href="http://thenewcode.com/780/A-Designers-Guide-To-Flexbox" target="_blank" rel="external">《flexbox layout and its uses》</a></p>
<h3 id="使用calc居中"><a href="#使用calc居中" class="headerlink" title="使用calc居中"></a>使用calc居中</h3><p><img src="/images/css/css-06.png" alt=""></p>
<p>在某些方面比<code>flexbox</code>更灵活：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">hsl</span>(300, 100%, 97%);</div><div class="line">  <span class="attribute">min-height</span>: <span class="number">600px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 20%);</div><div class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 20%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非常简单，<code>calc</code>允许你基于当前页面的布局进行计算。在上面的计算中，50%是容器元素的中心点，但是仅仅使用50%会使<em>图片的左上角</em>对其<code>&lt;div&gt;</code>的中心。我们需要将图片的宽高同时移回一半。计算方式如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">top: calc(50% - (40% / 2));</div><div class="line">left: calc(50% - (40% / 2));</div></pre></td></tr></table></figure>
<p>在如今的浏览器，你会发现这种解决方案更适合内容的宽高为固定尺寸：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - (300px / 2));</div><div class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - (300px - 2));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>详细的<code>calc</code>使用方法可以查看：<a href="http://thenewcode.com/953/Layout-Math-with-CSS-Understanding-calc" target="_blank" rel="external">Layout Math with CSS: Understanding calc</a></p>
<p>这种解决方案跟<code>flexbox</code>一样有许多缺点：当代浏览器能很好的支持该方案，但是在早期的浏览器还是还是需要浏览器前缀，并且不支持IE 8</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.center</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 20%);</div><div class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(50% - 20%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6 - 入门]]></title>
      <url>https://lucius0.github.io/2016/08/28//archivers/ecmascript6-introduction/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ES6系列文章是在拜读阮一峰老师的《ES6标准入门》所做下的笔记，其github地址<strong><a href="https://github.com/ruanyf/es6tutorial" target="_blank" rel="external">《es6tutorial》</a></strong>，之后会在该系列文章继续添加在工作上遇到的问题或者看到比较好的关于ES6的文章。</p>
<p>ES6在ES5的基础上添加的新特性，在此<strong><a href="http://es6-features.org/" target="_blank" rel="external">es6-features</a></strong>可以参考，当做自己的一手API资料。</p>
<p>ECMAScript 6是在2015年发布的，也叫ECMAScript 2015。ECMAScript 6的发布，使得javascript的开发，越来越规范，也越来越方便。当然，较大的修改以及新功能的加入会导致兼容性的问题产生，因此会保留一些目前来看不是很成熟的设想到下一个版本，也就是ES7。</p>
<p>对于浏览器，支持ES6的情况可以查看<strong><a href="http://kangax.github.io/es5-compat-table/es6/" target="_blank" rel="external">http://kangax.github.io/es5-compat-table/es6/</a></strong>。NodeJs是Javascript的服务器运行环境，对ES6的支持比浏览器要高。阮一峰老师写了一个<strong><a href="https://github.com/ruanyf/es-checker" target="_blank" rel="external">ES-Checker</a></strong>，用来检查各种运行环境对ES6的支持情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ npm install -g es-checker</div><div class="line">$ es-checker</div><div class="line"></div><div class="line">=========================================</div><div class="line">Passes <span class="number">29</span> feature Detections</div><div class="line">Your runtime supports <span class="number">69</span>% <span class="keyword">of</span> ECMAScript <span class="number">6</span></div><div class="line">=========================================</div></pre></td></tr></table></figure>
<h2 id="转码器"><a href="#转码器" class="headerlink" title="转码器"></a>转码器</h2><p><strong><a href="https://babeljs.io/" target="_blank" rel="external">Babel</a></strong>是用于ES6转码器，可以将ES6转为ES5代码，从而兼容现有环境。在上文的<strong><a href="http://es6-features.org/" target="_blank" rel="external">es6-features</a></strong>，也有罗列出基本上的转换。</p>
<ul>
<li><p><strong>配置文件</strong><code>.babelrc</code></p>
<p>  <code>.babelrc</code>是存放在项目的根目录下，使用Babel就是要配置该文件。该文件是用来设置转码规则和插件的，格式如下</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	"presets": [], // 设定转码规则</div><div class="line">	"plugins": []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>官方规则集</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># ES2015转码规则</div><div class="line">$ npm install --save-dev babel-preset-es2015</div><div class="line"></div><div class="line"># react转码规则</div><div class="line">$ npm install --save-dev babel-preset-react</div><div class="line"></div><div class="line"># ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个</div><div class="line">$ npm install --save-dev babel-preset-stage-0</div><div class="line">$ npm install --save-dev babel-preset-stage-1</div><div class="line">$ npm install --save-dev babel-preset-stage-2</div><div class="line">$ npm install --save-dev babel-preset-stage-3</div></pre></td></tr></table></figure>
<p>添加了规则之后的<code>.babelrc</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"presets"</span>: [</div><div class="line">      <span class="string">"es2015"</span>,</div><div class="line">      <span class="string">"react"</span>,</div><div class="line">      <span class="string">"stage-2"</span></div><div class="line">    ],</div><div class="line">    <span class="attr">"plugins"</span>: []</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>Babel工具跟模块的使用，必须写好<code>.babelrc</code></p>
<ul>
<li><p><strong>命令行工具 babel-cli</strong></p>
<p>  安装</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global babel-cli</div></pre></td></tr></table></figure>
<p>  基本使用方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 转码结果输出到标准输出</div><div class="line">$ babel example.js</div><div class="line"></div><div class="line"># 转码结果写入一个文件</div><div class="line"># --out-file 或 -o 参数指定输出文件</div><div class="line">$ babel example.js --out-file compiled.js</div><div class="line"># 或者</div><div class="line">$ babel example.js -o compiled.js</div><div class="line"></div><div class="line"># 整个目录转码</div><div class="line"># --out-dir 或 -d 参数指定输出目录</div><div class="line">$ babel src --out-dir lib</div><div class="line"># 或者</div><div class="line">$ babel src -d lib</div><div class="line"></div><div class="line"># -s 参数生成source map文件</div><div class="line">$ babel src -d lib -s</div></pre></td></tr></table></figure>
<p>但是上面是在全局环境下安装的，也就是说项目假如有需要转换的话则需要安装Babel，那我们也可以采取在项目内安装<code>babel-cli</code>。</p>
<p>安装</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-cli</div></pre></td></tr></table></figure>
<p>然后改写<code>package.json</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  // ...</div><div class="line">  "devDependencies": &#123;</div><div class="line">    "babel-cli": "^6.14.0"</div><div class="line">  &#125;,</div><div class="line">  "scripts": &#123;</div><div class="line">    "babel-build": "babel src -d lib"</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm run babel-build</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>babel-node：</strong>babel-cli自带的命令，提供了支持ES6的RELP环境；</p>
</li>
<li><p><strong>babel-register：</strong>模块改写<code>require</code>命令，为它加上钩子，每当<code>require</code>加载<code>js</code>、<code>jsx</code>、<code>es</code>、<code>es6</code>后缀文件，就会先用babel转码；</p>
</li>
<li><p><strong>babel-core：</strong>如若需要进行对Babel的API进行转码，可以使用<code>babel-core</code></p>
</li>
<li><p><strong>babel-polyfill：</strong>Babel默认只转换新的JavaScript句法(syntax)，不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。举例来说，ES6在Array对象上新增了Array.from方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。</p>
</li>
</ul>
<p>安装</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save babel-polyfill</div></pre></td></tr></table></figure>
<p>使用，在脚本头部，加入如下一行代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span>;</div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'babel-polyfill'</span>);</div></pre></td></tr></table></figure>
<p>Babel默认不转码的API非常多，详细清单可以查看babel-plugin-transform-runtime模块的<strong><a href="https://github.com/babel/babel/blob/master/packages/babel-plugin-transform-runtime/src/definitions.js" target="_blank" rel="external">definitions.js</a></strong>文件。</p>
<p>除了在用<code>Babel-cli</code>将ES6转码，还可以在<code>node_modules/babel-core/</code>找到<code>babel</code>版本的<code>browser.js</code>嵌入项目网页，或者也可以使用<strong><a href="https://github.com/Daniel15/babel-standalone" target="_blank" rel="external">babel-standalone</a></strong>、<strong><a href="https://github.com/google/traceur-compiler" target="_blank" rel="external">Traceur</a></strong>嵌入网页，也可以使用在线转码平台<strong><a href="https://babeljs.io/repl/" target="_blank" rel="external">REPL在线编译器</a></strong>、<strong><a href="http://google.github.io/traceur-compiler/demo/repl.html#" target="_blank" rel="external">Traceur</a></strong>。</p>
<h2 id="gulp-babel"><a href="#gulp-babel" class="headerlink" title="gulp-babel"></a>gulp-babel</h2><p>gulp的入门方法可以查看<a href="/2016/08/21//archivers/gulp-introduction/" title="《gulp之一 - 入门教程[转]》">《gulp之一 - 入门教程[转]》</a>。</p>
<p>gulp-babel可以跳转到<a href="/2016/08/22//archivers/npm-and-gulp-collection_1/" title="《gulp-babel》">《gulp-babel》</a></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>我是Windows操作系统，使用sublime text3来运行es6.</p>
<p>首先安装<a href="http://nodejs.org/" target="_blank" rel="external">nodejs</a></p>
<p>sublime text3 中打开<strong>tools -&gt; build system -&gt; new build system…</strong>，粘贴以下代码保存</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"cmd"</span>: [<span class="string">"node"</span>, <span class="string">"--use-strict"</span>, <span class="string">"--harmony"</span>, <span class="string">"$file"</span>],</div><div class="line">    <span class="attr">"selector"</span>: <span class="string">"source.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>解释：</strong><code>node</code>是执行命令，而<code>--use-strict</code>跟<code>--harmony</code>则是执行参数，<code>$file</code>则是当前文件，如果不想要有es6特性，则只需要将配置文件改为以下的代码</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"cmd"</span>: [<span class="string">"node"</span>, <span class="string">"$file"</span>],</div><div class="line">    <span class="attr">"selector"</span>: <span class="string">"source.js"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：在sublime新建一个测试文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p><code>ctrl + b</code>就可以得到结果<code>1</code></p>
<p>最后：ECMAScript当前的所有提案，可以在TC39的官方网站<strong><a href="https://github.com/tc39/ecma262" target="_blank" rel="external">https://github.com/tc39/ecma262</a></strong>查看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[npm&gulp常用插件(1)]]></title>
      <url>https://lucius0.github.io/2016/08/22//archivers/npm-and-gulp-collection_1/</url>
      <content type="html"><![CDATA[<p>这里收集了一些npm&amp;gulp常用的插件，以方便查找。</p>
<ul>
<li><p>gulp：<a href="http://gulpjs.com/" target="_blank" rel="external">http://gulpjs.com/</a></p>
</li>
<li><p>npm：<a href="https://www.npmjs.com" target="_blank" rel="external">https://www.npmjs.com</a></p>
</li>
</ul>
<h2 id="rimraf"><a href="#rimraf" class="headerlink" title="rimraf"></a>rimraf</h2><p>这一款实际上不是gulp的插件，是npm的插件，只是因为在windows下生成的node_module路径名太长了导致无法正常删除，因此可以用npm安装这个插件</p>
<blockquote>
<p>官方描述：A deep deletion module for node (like rm -rf) </p>
<p>简单点说，就是模拟unix或者linux下的rm -rf（强制删除命令）</p>
</blockquote>
<p>安装：<code>npm install -g rimraf</code></p>
<p>使用：<code>rimraf node_modules</code></p>
<h2 id="Browsersync"><a href="#Browsersync" class="headerlink" title="Browsersync"></a>Browsersync</h2><p>Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。无论您是前端还是后端工程师，使用它将提高您30%的工作效率。</p>
<p>Browsersync中文网：<a href="http://www.browsersync.cn/" target="_blank" rel="external">http://www.browsersync.cn/</a></p>
<p>安装：<code>npm install -g browser-sync</code> 或结合gulp <code>npm install --save-dev browser-sync</code></p>
<p>使用：</p>
<ul>
<li>静态网站：<a href="http://www.browsersync.cn/example/packages/BrowsersyncExample.zip" target="_blank" rel="external">《事例包》</a>跟<a href="http://www.browsersync.cn/example/video/browsersync1.mp4" target="_blank" rel="external">《示例视频》</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// --files 路径是相对于运行该命令的项目（目录） </span></div><div class="line">browser-sync start --server --files <span class="string">"css/*.css"</span></div><div class="line"><span class="comment">// --files 路径是相对于运行该命令的项目（目录） </span></div><div class="line">browser-sync start --server --files <span class="string">"css/*.css, *.html"</span></div><div class="line"><span class="comment">// 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意.css 或 .html文件。 </span></div><div class="line">browser-sync start --server --files <span class="string">"**/*.css, **/*.html"</span></div><div class="line"><span class="comment">// 监听css文件 </span></div><div class="line">browser-sync start --server --files <span class="string">"css/*.css"</span></div><div class="line"><span class="comment">// 监听css和html文件 </span></div><div class="line">browser-sync start --server --files <span class="string">"css/*.css, *.html"</span></div></pre></td></tr></table></figure>
<ul>
<li>动态网站：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 主机名可以是ip或域名</span></div><div class="line">browser-sync start --proxy <span class="string">"主机名"</span> <span class="string">"css/*.css"</span></div></pre></td></tr></table></figure>
<h2 id="JSHint-amp-amp-JSLint"><a href="#JSHint-amp-amp-JSLint" class="headerlink" title="JSHint &amp;&amp; JSLint"></a>JSHint &amp;&amp; JSLint</h2><p><strong>简介：</strong>无论是JSHint，还是JSLint，都是通过检查和分析JavaScript代码，将不符合编码规则的代码警告开发者。JSHint是在JSLint进行二次开发，实际上，两种插件一样都拥有成熟的社区，就算是用途以及原理，都是相同的。但我们要选哪一种呢？</p>
<p><strong>区别：</strong></p>
<ul>
<li><p>JSLint检查规则较JSHint严格；</p>
</li>
<li><p>JSLint配置选项上比JSHint少；</p>
</li>
</ul>
<ol>
<li><p>JSLint：<a href="https://github.com/douglascrockford/JSLint" target="_blank" rel="external">JSLint</a>;</p>
</li>
<li><p>JSHint：<a href="https://github.com/spalger/gulp-jshint" target="_blank" rel="external">JSHint</a>;</p>
</li>
</ol>
<p>这里介绍JSHint</p>
<p>安装：<code>npm install jshint gulp-jshint --save-dev</code></p>
<p>使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> gulp.src(<span class="string">'./lib/*.js'</span>)</div><div class="line">    .pipe(jshint(&#123; <span class="attr">linter</span>: <span class="string">'some-jshint-module'</span> &#125;))</div><div class="line">    .pipe(...);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="gulp-babel"><a href="#gulp-babel" class="headerlink" title="gulp-babel"></a>gulp-babel</h2><ul>
<li><p>git：<a href="https://github.com/babel/gulp-babel" target="_blank" rel="external">gulp-babel</a></p>
</li>
<li><p>npmjs:<a href="https://www.npmjs.com/package/gulp-babel" target="_blank" rel="external">gulp-babel</a></p>
</li>
</ul>
<p>安装：<code>npm install --save-dev gulp-babel</code></p>
<p>在使用<code>gulp-babel</code>之前，需要安装<code>babel-preset-es2015</code></p>
<p>使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'babel'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	gulp.src(<span class="string">"./src/*.js"</span>)</div><div class="line">	    .pipe(babel(&#123;</div><div class="line">            <span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">        &#125;))</div><div class="line">	    .pipe(gulp.dest(<span class="string">"./dist/"</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gulp之一 - 入门教程[转]]]></title>
      <url>https://lucius0.github.io/2016/08/21//archivers/gulp-introduction/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。</p>
<p>gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。通过本文，我们将学习如何使用Gulp来改变开发流程，从而使开发更加快速高效。</p>
<p>gulp 和 grunt 非常类似，但相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。</p>
<p>本示例以gulp-less为例（将less编译成css的gulp插件）展示gulp的常规用法，只要我们学会使用一个gulp插件后，其他插件就差看看其帮助文档了。让我们一起来学习gulp吧！ ^_^</p>
<p>gulp常用地址：</p>
<ul>
<li>gulp官方网址：<a href="http://gulpjs.com" target="_blank" rel="external">http://gulpjs.com</a></li>
<li>gulp插件地址：<a href="http://gulpjs.com/plugins" target="_blank" rel="external">http://gulpjs.com/plugins</a></li>
<li>gulp 官方API：<a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">https://github.com/gulpjs/gulp/blob/master/docs/API.md</a></li>
<li>gulp 中文API：<a href="http://www.ydcss.com/archives/424" target="_blank" rel="external">http://www.ydcss.com/archives/424</a></li>
</ul>
<p>在学习前，先谈谈大致使用gulp的步骤，给读者以初步的认识。首先当然是安装nodejs，通过nodejs的npm全局安装和项目安装gulp，其次在项目里安装所需要的gulp插件，然后新建gulp的配置文件gulpfile.js并写好配置信息（定义gulp任务），最后通过命令提示符运行gulp任务即可。</p>
<p><strong>安装nodejs -&gt; 全局安装gulp -&gt; 项目安装gulp以及gulp插件 -&gt; 配置gulpfile.js -&gt; 运行任务</strong></p>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><ol>
<li><p>说明：gulp是基于nodejs，理所当然需要安装nodejs；</p>
</li>
<li><p>安装：打开<a href="http://nodejs.org/" target="_blank" rel="external">nodejs官网</a>，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。然后像安装QQ一样安装它就可以了（安装路径随意）。</p>
</li>
</ol>
<h2 id="使用命令行"><a href="#使用命令行" class="headerlink" title="使用命令行"></a>使用命令行</h2><ol>
<li><p>说明：什么是命令行？命令行在OSX是终端（Terminal），在windows是命令提示符（Command Prompt）；</p>
</li>
<li><p>注：之后操作都是在windows系统下；</p>
</li>
<li><p>简单介绍gulp在使用过程中常用命令，打开命令提示符执行下列命令（打开方式：window + r 输入cmd回车）：</p>
</li>
</ol>
<ul>
<li><p><strong>node -v</strong> 查看安装的nodejs版本，出现版本号，说明刚刚已正确安装nodejs。PS：未能出现版本号，请尝试注销电脑重试；</p>
</li>
<li><p><strong>npm -v</strong> 查看npm的版本号，npm是在安装nodejs时一同安装的nodejs包管理器，那它有什么用呢？稍后解释；</p>
</li>
<li><p><strong>cd</strong> 定位到目录，用法：cd + 路径 ；</p>
</li>
<li><p><strong>dir</strong> 列出文件列表；</p>
</li>
<li><p><strong>cls</strong> 清空命令提示符窗口内容。</p>
</li>
</ul>
<p><img src="/images/gulp/gulp-01.png" alt=""></p>
<h2 id="npm介绍"><a href="#npm介绍" class="headerlink" title="npm介绍"></a>npm介绍</h2><ol>
<li><p>说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；</p>
</li>
<li><p>使用npm安装插件：命令提示符执行<code>npm install &lt;name&gt; [-g] [--save-dev]</code>；</p>
</li>
</ol>
<ul>
<li><p><strong><name></name></strong>：node插件名称。例：<code>npm install gulp-less --save-dev</code></p>
</li>
<li><p><strong>-g</strong>：全局安装。将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量；  非全局安装：将会安装在当前定位目录；  全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用；</p>
</li>
<li><p><strong>–save</strong>：将保存配置信息至package.json（package.json是nodejs项目配置文件）；</p>
</li>
<li><p><strong>-dev</strong>：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；一般保存在dependencies的像这些express/ejs/body-parser等等。</p>
</li>
<li><p>为什么要保存至package.json？因为node插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行npm install，则会根据package.json下载所有需要的包，npm install –production只下载dependencies节点的包）。</p>
</li>
</ul>
<ol>
<li>使用npm卸载插件：<code>npm uninstall &lt;name&gt; [-g] [--save-dev]</code>  PS：不要直接删除本地插件包</li>
</ol>
<ul>
<li><p>删除全部插件：<code>npm uninstall gulp-less gulp-uglify gulp-concat ……</code></p>
</li>
<li><p>借助rimraf：<code>npm install rimraf -g</code>  用法：<code>rimraf node_modules</code></p>
</li>
</ul>
<ol>
<li>使用npm更新插件：<code>npm update &lt;name&gt; [-g] [--save-dev]</code></li>
</ol>
<ul>
<li>更新全部插件：<code>npm update [--save-dev]</code></li>
</ul>
<ol>
<li><p>查看npm帮助：npm help</p>
</li>
<li><p>当前目录已安装插件：npm list</p>
</li>
</ol>
<h2 id="选装cnpm"><a href="#选装cnpm" class="headerlink" title="选装cnpm"></a>选装cnpm</h2><ol>
<li><p>说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。来自官网：“<strong>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</strong>”；</p>
</li>
<li><p>官方网址：<a href="http://npm.taobao.org/" target="_blank" rel="external">http://npm.taobao.org/</a></p>
</li>
<li><p>安装：命令提示符执行<code>npm install cnpm -g --registry=https://registry.npm.taobao.org；</code>注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；</p>
</li>
</ol>
<p>注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。</p>
<h2 id="全局安装gulp"><a href="#全局安装gulp" class="headerlink" title="全局安装gulp"></a>全局安装gulp</h2><ol>
<li><p>说明：全局安装gulp目的是为了通过她执行gulp任务；</p>
</li>
<li><p>安装：命令提示符执行<code>cnpm install gulp -g</code>；</p>
</li>
<li><p>查看是否正确安装：命令提示符执行<code>gulp -v</code>，出现版本号即为正确安装。</p>
</li>
</ol>
<h2 id="新建package-json文件"><a href="#新建package-json文件" class="headerlink" title="新建package.json文件"></a>新建package.json文件</h2><p>1.说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；</p>
<p>2.它是这样一个json文件<strong><font color="red">（注意：json文件内是不能写注释的，复制下列内容请删除注释）</font></strong>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "name": "test",   //项目名称（必须）</div><div class="line">  "version": "1.0.0",   //项目版本（必须）</div><div class="line">  "description": "This is for study gulp project !",   //项目描述（必须）</div><div class="line">  "homepage": "",   //项目主页</div><div class="line">  "repository": &#123;    //项目资源库</div><div class="line">    "type": "git",</div><div class="line">    "url": "https://git.oschina.net/xxxx"</div><div class="line">  &#125;,</div><div class="line">  "author": &#123;    //项目作者信息</div><div class="line">    "name": "name",</div><div class="line">    "email": "email"</div><div class="line">  &#125;,</div><div class="line">  "license": "ISC",    //项目许可协议</div><div class="line">  "devDependencies": &#123;    //项目依赖的插件</div><div class="line">    "gulp": "^3.8.11",</div><div class="line">    "gulp-less": "^3.0.0"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3.当然我们可以手动新建这个配置文件，但是作为一名有志青年，我们应该使用更为效率的方法：命令提示符执行<code>cnpm init</code></p>
<p><img src="/images/gulp/gulp-02.png" alt=""></p>
<p>4.查看package.json帮助文档，命令提示符执行<code>cnpm help package.json</code></p>
<p>特别注意：参看<a href="http://www.zhihu.com/question/23004511" target="_blank" rel="external">http://www.zhihu.com/question/23004511</a> - package.json是一个普通json文件，所以不能添加任何注释。</p>
<p>5.但当package.json里面有依赖了，我们可以使用命令行<code>cnpm install</code>安装依赖包的插件。</p>
<h2 id="本地安装gulp插件"><a href="#本地安装gulp插件" class="headerlink" title="本地安装gulp插件"></a>本地安装gulp插件</h2><p>1.安装：定位目录命令后提示符执行<code>cnpm install --save-dev</code>；</p>
<p>2.本示例以gulp-less为例（编译less文件），命令提示符执行<code>cnpm install gulp-less --save-dev</code>；</p>
<p><img src="/images/gulp/gulp-03.png" alt=""></p>
<p>3.将会安装在node_modules的gulp-less目录下，该目录下有一个gulp-less的使用帮助文档README.md；</p>
<p>4.为了能正常使用，我们还得本地安装gulp：<code>cnpm install gulp --save-dev</code>；</p>
<p>PS：细心的你可能会发现，我们全局安装了gulp，项目也安装了gulp，全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。</p>
<h2 id="新建gulpfile-js文件（重要）"><a href="#新建gulpfile-js文件（重要）" class="headerlink" title="新建gulpfile.js文件（重要）"></a>新建gulpfile.js文件（重要）</h2><p>1.说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）。</p>
<p>2.它大概是这样一个js文件（更多插件配置请<a href="http://www.ydcss.com/archives/tag/gulp" target="_blank" rel="external">查看这里</a>）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//导入工具包 require('node_modules里对应模块')</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>), <span class="comment">//本地安装gulp所用到的地方</span></div><div class="line">    less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);</div><div class="line"> </div><div class="line"><span class="comment">//定义一个testLess任务（自定义任务名称）</span></div><div class="line">gulp.task(<span class="string">'testLess'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/less/index.less'</span>) <span class="comment">//该任务针对的文件</span></div><div class="line">        .pipe(less()) <span class="comment">//该任务调用的模块</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css'</span>)); <span class="comment">//将会在src/css下生成index.css</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//定义默认任务elseTask为其他任务，该示例没有定义elseTask任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'testLess'</span>, <span class="string">'elseTask'</span>]); </div><div class="line"> </div><div class="line"><span class="comment">//gulp.task(name[, deps], fn) 定义任务  name：任务名称 deps：依赖任务名称 fn：回调函数</span></div><div class="line"><span class="comment">//gulp.src(globs[, options]) 执行任务处理的文件  globs：处理的文件路径(字符串或者字符串数组)</span></div><div class="line"><span class="comment">//gulp.dest(path[, options]) 处理完后文件生成路径</span></div></pre></td></tr></table></figure>
<h2 id="运行gulp"><a href="#运行gulp" class="headerlink" title="运行gulp"></a>运行gulp</h2><ol>
<li><p>说明：命令提示符执行<code>gulp 任务名称</code>；</p>
</li>
<li><p>编译less：命令提示符执行<code>gulp testLess</code>；</p>
</li>
<li><p>当执行<code>gulp default</code>或<code>gulp</code>将会调用default任务里的所有任务[‘testLess’,’elseTask’]。</p>
</li>
</ol>
<h2 id="使用webstorm运行gulp任务"><a href="#使用webstorm运行gulp任务" class="headerlink" title="使用webstorm运行gulp任务"></a>使用webstorm运行gulp任务</h2><ol>
<li><p>说明：使用webstorm可视化运行gulp任务；</p>
</li>
<li><p>使用方法：将项目导入webstorm，右键gulpfile.js 选择”Show Gulp Tasks”打开Gulp窗口，若出现”No task found”，选择右键”Reload tasks”，双击运行即可。</p>
</li>
</ol>
<p><img src="/images/gulp/gulp-04.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>安装nodejs；</li>
<li>新建package.json文件；</li>
<li>全局和本地安装gulp；</li>
<li>安装gulp插件；</li>
<li>新建gulpfile.js文件；</li>
<li>通过命令提示符运行gulp任务。</li>
</ol>
<p>转自：<strong><a href="http://www.ydcss.com/archives/18" target="_blank" rel="external">《gulp详细入门教程》</a></strong></p>
<p>可参考文档：<strong><a href="https://markpop.github.io/2014/09/17/Gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="external">Gulp入门教程</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之十二 - CMD与AMD异同]]></title>
      <url>https://lucius0.github.io/2016/08/20//archivers/javascript-cmd-amd/</url>
      <content type="html"><![CDATA[<ul>
<li>异步模块定义：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">AMD</a></li>
<li>通用模块定义：<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD</a></li>
</ul>
<p>AMD是RequireJs推广过程中产出，而CMD则是SeaJs。跟上一篇文章一样都是为了js的模块化开发，特别是在浏览器端，都能达到浏览器模块化开发的目的。</p>
<p>区别：</p>
<ol>
<li><p>对于依赖的模块，AMD是<strong>提前执行</strong>，CMD是<strong>延迟执行</strong>。不过在RequireJs 2.0开始也可以改为延迟执行。</p>
</li>
<li><p>CMD推崇<strong>依赖就近</strong>，AMD推崇<strong>依赖前置</strong></p>
</li>
</ol>
<p>// CMD</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</div><div class="line">	a.doSomething();</div><div class="line">	<span class="comment">//...</span></div><div class="line">	<span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</div><div class="line">	b.doSomething();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>// AMD</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	a.doSomething();</div><div class="line">	<span class="comment">//...</span></div><div class="line">	b.doSomething();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>参考<strong><a href="https://www.zhihu.com/question/20351507/answer/14859415" target="_blank" rel="external">知乎大神玉伯的回答</a></strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之十一 - AMD,CommonJs,UMD]]></title>
      <url>https://lucius0.github.io/2016/08/20//archivers/javascript-amd-commonjs-umd/</url>
      <content type="html"><![CDATA[<p>模块化是js目前来说是最为常见的开发规范，因为js并没有类的概念，因此才会有以下的规范。在理想状态下，程序员只需要关心业务逻辑就好了。在以往，js的演变也是五花八门，从最为原始的函数写法，到立即执行函数写法，再到传参全局变量写法，可见开发者对模块化编程的迫切需求。</p>
<p>原始写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>立即执行函数写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _x = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> _f1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	<span class="keyword">var</span> _f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">f1</span>: _f1,</div><div class="line">		<span class="attr">f2</span>: _f2</div><div class="line">	&#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>传参全局变量写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<p>下面就是要介绍常见的模块化规范编程，翻译自<strong><a href="http://davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/" target="_blank" rel="external">What Is AMD, CommonJS, and UMD?</a></strong></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>多年来Javascript的生态圈一直在稳步的完善以至于有足够多的组件可供选择，本来大量的组件理应是振奋人心的，但是当多个第三方组件混用时也同样带来了很多麻烦，那就是当开发人员混用时并不能很好的互相兼容。</p>
<p>为了解决这些问题，AMD与CommonJs就出现了，他们要求开发者采用规范化的模式开发以免污染整个生态系统。</p>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>git：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD#using-require-and-exports" target="_blank" rel="external">amdjs</a></p>
<p>异步模块定义(Asynchronous Module Definition)，流行的RequireJS就是用的AMD规范。它采用异步方式加载模块，模块的加载不影响它后面语句的运行，所有需要依赖的逻辑都会定义在回调函数，等到加载完毕之后就会触发回调函数。</p>
<p>这里有一个对jQuery单一依赖模块<code>foo</code>，是用AMD规范的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// filename: foo.js</span></div><div class="line">define([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</div><div class="line">	<span class="comment">// method</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// exposed public methods</span></div><div class="line">	<span class="keyword">return</span> myFunc;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>下面是稍复杂多依赖并且暴露公共方法的例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// filename: foo.js</span></div><div class="line">define([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$, _</span>) </span>&#123;</div><div class="line">	<span class="comment">// methods</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// private because it's not returned (see below)</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// public because it's returned</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// public because it's returned</span></div><div class="line"></div><div class="line">	<span class="comment">// exposed public methods</span></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">b</span>: b,</div><div class="line">		<span class="attr">c</span>: c</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>第一部分是依赖模块的数组定义，第二部分则是回调函数，但当只有依赖的模块都是可用时才会执行回调函数。</p>
<p>参数顺序跟依赖模块的顺序一致很重要(ex.jQuery -&gt; $, underscore -&gt; _)</p>
<p>当然我们可以将回调函数的参数名改成我们想要的，假如我们在代码中将<code>$</code>改成<code>$$</code>，那么就应该在函数体里面所有JQuery的引用都用<code>$$</code>替换<code>$</code></p>
<p>最后一点，也是重要的一点，就是你不能再函数的声明外部调用<code>$</code>跟<code>_</code>，因为有函数作用域，只有回调函数内才可以调用。</p>
<h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>git: <a href="https://github.com/efacilitation/commonjs-require" target="_blank" rel="external">commonJs</a></p>
<p>假如你有写过nodejs的话，那么你应该会对CommonJs感到非常的亲切，CommonJs是因为Browserify流行起来的。</p>
<p>用一个跟上一个同样的案例，来看看<code>foo</code>函数在CommonJs长什么样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// filename: foo.js</span></div><div class="line"><span class="comment">// dependencies</span></div><div class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line"></div><div class="line"><span class="comment">// methods</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// exposed public method (single)</span></div><div class="line"><span class="built_in">module</span>.exports = myFunc;</div></pre></td></tr></table></figure>
<p>同样用一个比较复杂的例子，也是多依赖</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// filename: foo.js</span></div><div class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</div><div class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'underscore'</span>);</div><div class="line"></div><div class="line"><span class="comment">// methods</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// private because it's omitted from module.exports</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// public because it's defined in module.exports</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// public because it's defined in module.exports</span></div><div class="line"></div><div class="line"><span class="comment">// exposed public methods</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">	<span class="attr">b</span>: b,</div><div class="line">	<span class="attr">c</span>: c</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="UMD-Universal-Module-Definition"><a href="#UMD-Universal-Module-Definition" class="headerlink" title="UMD: Universal Module Definition"></a>UMD: Universal Module Definition</h2><p>git: <a href="https://github.com/umdjs/umd" target="_blank" rel="external">umdjs</a></p>
<p>虽然CommonJs跟AMD规范都同样受欢迎，但他们似乎还没有达成共识。因此推动了通用模块定义的产生，用以同时支持两种规范。</p>
<p>不得不说UMD模式看起来没有比AMD跟CMD简洁，但是CommonJs不仅同时支持AMD跟CommonJS，还支持老的规范全局变量定义模式(“global” variable definition)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</div><div class="line">		<span class="comment">// AMD</span></div><div class="line">		define([<span class="string">'jquery'</span>], factory);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</div><div class="line">		<span class="comment">// Node, CommonJS-like</span></div><div class="line">		<span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>));</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// Browser global (root is window)</span></div><div class="line">		root.returnExports = factory(root, jQuery);</div><div class="line">	&#125;</div><div class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">	<span class="comment">// methods</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line">	<span class="comment">// exposed public method</span></div><div class="line">	<span class="keyword">return</span> myFunc;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<p>老规矩，复杂的例子以及多依赖跟暴露公共方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">root, factory</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</div><div class="line">		<span class="comment">// AMD</span></div><div class="line">		define([<span class="string">'jquery'</span>, <span class="string">'underscore'</span>], factory);</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</div><div class="line">		<span class="comment">// Node, CommonJs-like</span></div><div class="line">		<span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'jquery'</span>), <span class="built_in">require</span>(<span class="string">'underscore'</span>));</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// Browser global (root is window)</span></div><div class="line">		root.returnExports = factory(root.jQuery, root._);</div><div class="line">	&#125;</div><div class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$, _</span>)</span>&#123;</div><div class="line">	<span class="comment">// methods</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//    private because it's not returned (see below)</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//    public because it's returned</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;;    <span class="comment">//    public because it's returned</span></div><div class="line"></div><div class="line">    <span class="comment">// exposed public methods</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">    	<span class="attr">b</span>: b,</div><div class="line">    	<span class="attr">c</span>: c</div><div class="line">    &#125;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>还有一种模块化规范，见下一篇<!-- [《CMD与AMD异同》](/archivers/javascript-cmd-amd) --><a href="/2016/08/20//archivers/javascript-cmd-amd/" title="《CMD与AMD异同》">《CMD与AMD异同》</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之十 - prototype]]></title>
      <url>https://lucius0.github.io/2016/08/18//archivers/javascript-prototype/</url>
      <content type="html"><![CDATA[<p>下面这段是ECMAScript关于原型的解释</p>
<blockquote>
<p>ECMAScript does not contain proper classes such as those in C++, Smalltalk, or Java, but rather, supports constructors which create objects by executing code that allocates storage for the objects and initialises all or part of them by assigning initial values to their properties. All constructors are objects, but not all objects are constructors. Each constructor has a Prototype property that is used to implement prototype-based inheritance and shared properties. Objects are created by using constructors in new expressions; for example, new String(“A String”) creates a new String object. Invoking a constructor without using new has consequences that depend on the constructor. For example, String(“A String”) produces a primitive string, not an object.</p>
<p>ECMAScript supports prototype-based inheritance. Every constructor has an associated prototype, and every object created by that constructor has an implicit reference to the prototype (called the object’s prototype) associated with its constructor. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain. When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. In other words, first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on.</p>
</blockquote>
<p>以下转自知乎<strong><a href="https://www.zhihu.com/question/34183746/answer/58155878?from=profile_answer_card" target="_blank" rel="external">doris</a></strong>的回答</p>
<p>首先，在JS中，除了基本类型<a href="/2016/08/07//archivers/javascript-data-types/" title="基本类型">基本类型</a>，其他的都为对象，Function也是对象，Function.prototype也是对象，因此都有隐式原型<strong><strong>proto</strong></strong>，指向了该对象的构造函数的原型，这保证了实例能够访问在构造函数原型中定义的属性和方法。</p>
<p>方法(Function)则除了以上的<strong><strong>proto</strong></strong>属性以外，还有<strong>prototype</strong>这个<strong>原型对象</strong>，这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法(prototype)。原型对象也有一个属性，叫做<strong>constructor</strong>，这个属性包含了一个指向原构造函数的指针。</p>
<p><img src="/images/javascript/javascript-prototype.jpg" alt=""></p>
<p>由图我们可以看出</p>
<ol>
<li><p><strong>构造函数Foo</strong> ：构造函数的原型属性<strong>Foo.prototype</strong>指向了原型对象，在原型对象里有共有的方法，所有构造函数声明的实例(f1, f2)都可以共享这个方法。</p>
</li>
<li><p><strong>原型对象Foo.prototype</strong> ：原型对象保存着实例共享的方法，有一个constructor指回构造函数。</p>
</li>
<li><p><strong>实例</strong> ：f1和f2是Foo这个对象的两个实例，这个两个对象也有属性<strong><strong>proto</strong></strong>，指向构造函数的原型对象，这样子就可以想<em>1</em>那样访问原型对象的所有方法。</p>
</li>
</ol>
<p>另外，构造函数Foo()除了是方法，还是个对象，它也有<strong><strong>proto</strong></strong>属性，指向它的构造函数的原型对象。函数的构造函数是Function，因此这里的<strong><strong>proto</strong></strong>指向了<strong>Function.prototype</strong>。</p>
<p>原型对象同样是属于对象，它的<strong><strong>proto</strong></strong>属性指向它的构造函数的原型对象，即<strong>Object.prototype</strong>。</p>
<p>最后，Object.prototype的<strong><strong>proto</strong></strong>属性指向null。</p>
<p><em>注意：</em> <code>typeof null</code>返回object是由于历史原因导致的，实际上ECMA规范尝试把<code>typeof null</code>返回值改为”null”，但是会导致很多旧的代码出现问题，因此又改回来了。所以说null并不是一个对象，而是一个基础类型。在<strong><a href="http://stackoverflow.com/questions/18808226/why-is-typeof-null-object" target="_blank" rel="external">stackoverflow</a></strong>有详细的说明。</p>
<p><strong>总结：</strong></p>
<ol>
<li><p>对象有属性<strong><strong>proto</strong></strong>，指向该对象的构造函数的原型对象；</p>
</li>
<li><p>方法除了有属性<strong><strong>proto</strong></strong>，还有属性<strong>prototype</strong>，指向该方法的原型对象。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git常用技巧]]></title>
      <url>https://lucius0.github.io/2016/08/15//archivers/git-tips/</url>
      <content type="html"><![CDATA[<p>这里记录的是git最为常见的操作，然而这种帖子博客到处可见，我只是记下来方便我查阅而不需要到处去查找。在这里我推荐一位博主的网站<a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">《廖雪峰》</a>，相信很多人都已经见过他的文章了，我也是拜读他的文章得以技术成长。还有<a href="https://github.com/jaywcjlove/handbook/blob/master/other/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95.md" target="_blank" rel="external">《git 常用清单》</a>。</p>
<ol>
<li><p>工作区和暂存区</p>
<p> 工作区：就是本地目录，即在<code>git add</code>之前</p>
<p> 暂存区：在文件夹.git这个<strong>版本库</strong>下有一个暂存区跟很多分支，即在<code>git add</code>之后</p>
<p> 当执行<code>git add</code>命令时，工作区的内容便会到stage暂存区，<code>git commit</code>之后暂存区的内容就会提交到相对应的分支上。</p>
</li>
<li><p>git管理的是修改</p>
<p> 比如第一次修改<strong>readme</strong>，然后执行<code>git add</code>到暂存区，然后再修改readme，最后执行<code>git commit</code>提交到分支。</p>
<p> 结果调用<code>git status</code>时发现现在仍有一个<strong>modified</strong>文件，这是因为我们没有把新修改的文件提交到暂存区，所以导致分支中的文件和工作区的原文不匹配。所以我们需要重新<strong>add</strong>跟<strong>commit</strong>。这就是所说的，git管理的是<strong>“修改”</strong>，而不是<strong>“文件”</strong>本身。</p>
</li>
</ol>
<h2 id="1、丢弃工作区的文件"><a href="#1、丢弃工作区的文件" class="headerlink" title="1、丢弃工作区的文件"></a>1、丢弃工作区的文件</h2><p><strong>modified</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -- file</div></pre></td></tr></table></figure>
<h2 id="2、暂存区回滚"><a href="#2、暂存区回滚" class="headerlink" title="2、暂存区回滚"></a>2、暂存区回滚</h2><p><strong>add</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git reset HEAD file</div><div class="line">$ git checkout -- file</div><div class="line"><span class="comment">// 也可以</span></div><div class="line">$ git checkout HEAD -- file</div></pre></td></tr></table></figure>
<h2 id="3、版本回滚"><a href="#3、版本回滚" class="headerlink" title="3、版本回滚"></a>3、版本回滚</h2><p><strong>commit</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard commit_id</div><div class="line"><span class="comment">// 查看历史版本</span></div><div class="line">$ git log</div><div class="line"><span class="comment">// 查看未来版本</span></div><div class="line">$ git relog</div></pre></td></tr></table></figure>
<h2 id="4、回滚已提交到远程仓库的提交"><a href="#4、回滚已提交到远程仓库的提交" class="headerlink" title="4、回滚已提交到远程仓库的提交"></a>4、回滚已提交到远程仓库的提交</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git revert commit_id</div></pre></td></tr></table></figure>
<h2 id="5、filename-too-long错误"><a href="#5、filename-too-long错误" class="headerlink" title="5、filename too long错误"></a>5、filename too long错误</h2><p>我在windows提交node_module时，发现node_module的路径太长了，导致我没法提交，找到了网上的解决方法。</p>
<p>详细查看这里 <a href="http://stackoverflow.com/questions/21123415/git-pull-aborted-with-error-filename-too-long" target="_blank" rel="external">Filename too long</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git config --system core.longpaths <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="6、查看修改历史"><a href="#6、查看修改历史" class="headerlink" title="6、查看修改历史"></a>6、查看修改历史</h2><ul>
<li><strong>git log –pretty</strong>：可列出文件的所有改动历史，注意，这里着眼于具体的一个文件，而不是git库，如果是库，那就有很多改动了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log --pretty=oneline filename</div></pre></td></tr></table></figure>
<ul>
<li><strong>git show</strong>：打印出文件的详细改动历史，行前的数字就是每次提交的commit_id，常常配合<code>git log</code>查看某个文件的commit_id</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git show commit_id</div></pre></td></tr></table></figure>
<ul>
<li><strong>git reflog</strong>：查看每一次的操作命令</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h2 id="7、创建分支"><a href="#7、创建分支" class="headerlink" title="7、创建分支"></a>7、创建分支</h2><ul>
<li>创建并切换分支</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout -b dev_name</div></pre></td></tr></table></figure>
<ul>
<li>推送分支</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push -u origin dev:dev <span class="comment">// -u 关联本地分支与远程分支</span></div></pre></td></tr></table></figure>
<p>如果pull的时候提示<strong>“no tracking information”</strong>，则说明本地分支没有跟踪远程分支</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch --set-upstream branch-name origin/branch-name</div></pre></td></tr></table></figure>
<h2 id="8、删除分支"><a href="#8、删除分支" class="headerlink" title="8、删除分支"></a>8、删除分支</h2><ul>
<li>删除本地分支</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -d dev_name</div></pre></td></tr></table></figure>
<ul>
<li>删除远程分支</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin :dev_name <span class="comment">//注意冒号跟分支名没有空格</span></div></pre></td></tr></table></figure>
<h2 id="9、暂存修改"><a href="#9、暂存修改" class="headerlink" title="9、暂存修改"></a>9、暂存修改</h2><p>若遇到工作的分支上还没做完同时又不想提交，并且这时候另外一分支出现bug急需修复，这个时候我们可以将本地修改做暂时储存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash [save <span class="string">"description"</span>] <span class="comment">// 暂时存储是否添加描述为选填</span></div></pre></td></tr></table></figure>
<p>查看暂存列表</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash list</div></pre></td></tr></table></figure>
<p>取出stash列表内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git stash apply <span class="comment">// 全部取出</span></div><div class="line"></div><div class="line">$ git stash apply stash@&#123;index&#125; <span class="comment">// 取index下的储存</span></div></pre></td></tr></table></figure>
<p>取消stash储存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git stash drop stash@&#123;index&#125;</div></pre></td></tr></table></figure>
<h2 id="10、强制覆盖远程内容"><a href="#10、强制覆盖远程内容" class="headerlink" title="10、强制覆盖远程内容"></a>10、强制覆盖远程内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master --force</div></pre></td></tr></table></figure>
<h2 id="11、修改commit备注"><a href="#11、修改commit备注" class="headerlink" title="11、修改commit备注"></a>11、修改commit备注</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit --amend</div></pre></td></tr></table></figure>
<h2 id="12、重命名分支"><a href="#12、重命名分支" class="headerlink" title="12、重命名分支"></a>12、重命名分支</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git branch -m ordinary-dev-name <span class="keyword">new</span>-dev-name</div></pre></td></tr></table></figure>
<h2 id="13、标签"><a href="#13、标签" class="headerlink" title="13、标签"></a>13、标签</h2><p>显示标签(可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013762144381812a168659b3dd4610b4229d81de5056cc000" target="_blank" rel="external">廖雪峰大大的博客</a>)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 所有标签</span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment">// 系列标签(显示1.9.*的所有标签)</span></div><div class="line">$ git tag -l <span class="string">'v1.9.*'</span></div><div class="line"></div><div class="line"><span class="comment">// 查看相应标签的版本信息</span></div><div class="line">$ git show v1<span class="number">.9</span><span class="number">.0</span></div></pre></td></tr></table></figure>
<p>新建标签</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git tag -a v1<span class="number">.9</span><span class="number">.9</span> -m <span class="string">"version tag description"</span> <span class="comment">// -a(annotated)</span></div></pre></td></tr></table></figure>
<p>删除标签</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 删除本地标签</span></div><div class="line">$ git tag -d v1<span class="number">.9</span><span class="number">.9</span></div><div class="line"></div><div class="line"><span class="comment">// 删除远程标签</span></div><div class="line">$ git tag -d v1<span class="number">.9</span><span class="number">.9</span></div><div class="line">$ git push origin :refs/tags/v1<span class="number">.9</span><span class="number">.9</span></div></pre></td></tr></table></figure>
<p>推送标签</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 推送指定标签</span></div><div class="line">$ git push origin v1<span class="number">.9</span><span class="number">.9</span></div><div class="line"></div><div class="line"><span class="comment">// 推送所有标签</span></div><div class="line">$ git push origin --tags</div></pre></td></tr></table></figure>
<h2 id="14、远程分支"><a href="#14、远程分支" class="headerlink" title="14、远程分支"></a>14、远程分支</h2><p>拉取远程分支</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// git checkout -b [分支名] [远程名]/[分支名]</span></div><div class="line">$ git checkout -b test origin/test</div></pre></td></tr></table></figure>
<p>跟踪远程分支</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git checkout --track origin/test</div></pre></td></tr></table></figure>
<p>推送远程分支</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin localBranch:remoteBranch</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[将github的合并到本地(含提交日志)]]></title>
      <url>https://lucius0.github.io/2016/08/15//archivers/git-local-merge-github/</url>
      <content type="html"><![CDATA[<p>有时候我们在使用github上的某一个框架时，会先把框架下载下来而不是clone下来，虽然工程上可以使用，但是已经丢失了github上原作者跟众多维护者的提交日志。这篇文章就是来将本地已经修改的框架跟远程github的框架进行日志上的合并。</p>
<p>将生成的id_rsa.pub的内容提供给github，即在github上创建一个SSH key，并把该公钥复制进去。</p>
<p>以下是我使用git的内容，省了一些信息，其中local-master就是上文说的本地已经做修改的框架，将本地的master重命名为old-master，拉取github上的master，进行单修改合并：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取github的全部更新</span></div><div class="line">user /local-framework (master)</div><div class="line">$ git fetch github</div><div class="line"></div><div class="line"><span class="comment">// 重命名master为old-master，为了就是github上的master分支可以拉取到本地</span></div><div class="line">user /local-framework (master)</div><div class="line">$ git branch -m old-master</div><div class="line"></div><div class="line"><span class="comment">// checkout远程分支master并切换到该分支</span></div><div class="line">user /local-framework (old-master)</div><div class="line">$ git checkout github/master -b master</div><div class="line"></div><div class="line"><span class="comment">// 远程master分支合并本地已修改分支</span></div><div class="line">user /local-framework (master)</div><div class="line">$ git merge old-master</div><div class="line"></div><div class="line"><span class="comment">// 因为在上一步出现冲突，因此回滚上一步</span></div><div class="line">user /local-framework (master|MERGING)</div><div class="line">$ git reset --hard master</div><div class="line"></div><div class="line">user /local-framework (master)</div><div class="line">$ git status</div><div class="line"></div><div class="line">user /local-framework (master)</div><div class="line">$ git log --pretty=oneline</div><div class="line"></div><div class="line">user /local-framwork (master)</div><div class="line">$ git cherry-pick &lt; commit id_1 &gt;</div><div class="line"></div><div class="line">user /local-framwork (master)</div><div class="line">$ git cherry-pick &lt; commit id_2 &gt;</div><div class="line"></div><div class="line">user /local-framwork (master)</div><div class="line">$ git cherry-pick &lt; commit id_3 &gt;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>到这里已经将github上的分支合并并且保留了以前提交的日志，之后可以删除远程github分支并且修改本地分支名为master了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之九 - OOP]]></title>
      <url>https://lucius0.github.io/2016/08/14//archivers/javascript-oop/</url>
      <content type="html"><![CDATA[<h2 id="1、基于原型链继承"><a href="#1、基于原型链继承" class="headerlink" title="1、基于原型链继承"></a>1、基于原型链继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.y = <span class="number">2</span>; &#125;</div><div class="line"><span class="keyword">typeof</span> Foo.prototype; <span class="comment">// "object"</span></div><div class="line">Foo.prototype.x = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> Foo();</div><div class="line">obj3.y; <span class="comment">// 2</span></div><div class="line">obj3.x; <span class="comment">// 1</span></div><div class="line"></div><div class="line">Foo.prototype = &#123;</div><div class="line">	<span class="attr">constructor</span>: Foo,</div><div class="line">	<span class="attr">__proto__</span>: <span class="built_in">Object</span>.prototype,</div><div class="line">	<span class="attr">x</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、js继承的实例"><a href="#2、js继承的实例" class="headerlink" title="2、js继承的实例"></a>2、js继承的实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.LEGS_NUM = <span class="number">2</span>;</div><div class="line">Person.prototype.ARMS_NUM = <span class="number">2</span>;</div><div class="line">Person.prototype.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">" is walking..."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, className</span>) </span>&#123;</div><div class="line">	Person.call(<span class="keyword">this</span>, name, age);</div><div class="line">	<span class="keyword">this</span>.className = className;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</div><div class="line">Student.prototype.constructor = Student;</div><div class="line"></div><div class="line"><span class="comment">// override</span></div><div class="line">Student.prototype.hi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.className);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Student.prototype.learn = <span class="function"><span class="keyword">function</span>(<span class="params">subject</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.name, subject, <span class="keyword">this</span>.className);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> boss = <span class="keyword">new</span> Student(<span class="string">"Boss"</span>, <span class="number">1</span>, <span class="string">"Class one"</span>);</div><div class="line">boss.hi(); <span class="comment">// boss 1 Class one</span></div><div class="line">boss.LEGS_NUM; <span class="comment">// 2</span></div><div class="line">boss.walk(); <span class="comment">// boss is walking...</span></div><div class="line">boss.learn(<span class="string">"math"</span>); <span class="comment">// boss math Class one</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> <code>Person.prototype</code> 是让子类共享父类的方法，若没有prototype，则Student继承的时候，永远调用的都是父类的方法；<code>Object.create</code> 主要是重新实例化一个对象，并让Student的prototype指向这个对象，若不重新实例化，则给Student创建新方法的同时也会给Person.prototype创建对应的方法；<code>Student.prototype.constructor = Student</code>，会让Student的构造函数指向自身，否则指向父类的constructor</p>
<h2 id="3、改变prototype"><a href="#3、改变prototype" class="headerlink" title="3、改变prototype"></a>3、改变prototype</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Student.prototype.x = <span class="number">101</span>;</div><div class="line">boss.x; <span class="comment">// 101</span></div><div class="line">Student.prototype = &#123;<span class="attr">y</span>: <span class="number">2</span>&#125;;</div><div class="line">boss.y; <span class="comment">// undefined</span></div><div class="line">boss.x; <span class="comment">// 101</span></div><div class="line"><span class="keyword">var</span> lucius = <span class="keyword">new</span> Student(<span class="string">"lucius"</span>, <span class="number">22</span>, <span class="string">"Class two"</span>);</div><div class="line">lucius.x; <span class="comment">// undefined</span></div><div class="line">lucius.y; <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> 当我们在原型上创建新的属性的时候，影响的是已创建的对象；但当我们将原型指向新的对象，则无法影响已创建的对象，反而会影响新的实例化对象。</p>
<h2 id="4、内置构造器的prototype"><a href="#4、内置构造器的prototype" class="headerlink" title="4、内置构造器的prototype"></a>4、内置构造器的prototype</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.x = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">obj.x = <span class="number">1</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">	<span class="built_in">console</span>.log(key); <span class="comment">// x, 可以通过defineProperty将enumerable设置为false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5、实现继承方式"><a href="#5、实现继承方式" class="headerlink" title="5、实现继承方式"></a>5、实现继承方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="comment">// 改变了Student的方法跟属性，同时也修改了Person的方法跟属性，无法实现重写</span></div><div class="line">Student.prototype = Person.prototype;</div><div class="line"><span class="comment">// prototype 没有正确的指向</span></div><div class="line">Student.prototype = <span class="keyword">new</span> Person();</div><div class="line"><span class="comment">// 比较好的继承方法，但是create只有在ES5才有</span></div><div class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype);</div><div class="line">Student.prototype.constructor = Person;</div><div class="line"></div><div class="line"><span class="comment">// 模拟create</span></div><div class="line"><span class="keyword">if</span>(!<span class="built_in">Object</span>.create) &#123;</div><div class="line">	<span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span>(<span class="params">proto</span>) </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">		F.prototype = proto;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> F;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6、模拟重载"><a href="#6、模拟重载" class="headerlink" title="6、模拟重载"></a>6、模拟重载</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> args = <span class="built_in">arguments</span>;</div><div class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> args[<span class="number">0</span>] === <span class="string">"object"</span> &amp;&amp; args[<span class="number">0</span>]) &#123;</div><div class="line">		<span class="keyword">if</span>(args[<span class="number">0</span>].name) &#123;</div><div class="line">			<span class="keyword">this</span>.name = args[<span class="number">0</span>].name;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(args[<span class="number">0</span>].age) &#123;</div><div class="line">			<span class="keyword">this</span>.age = args[<span class="number">0</span>].age;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">if</span>(args[<span class="number">0</span>]) &#123;</div><div class="line">			<span class="keyword">this</span>.name = args[<span class="number">0</span>];</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span>(args[<span class="number">1</span>]) &#123;</div><div class="line">			<span class="keyword">this</span>.age = args[<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"name="</span> + <span class="keyword">this</span>.name + <span class="string">" , age="</span> + <span class="keyword">this</span>.age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Person(<span class="string">"lucius"</span>, <span class="number">24</span>);</div><div class="line">obj.toString(); <span class="comment">// "name=lucius , age=24"</span></div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Person(&#123;<span class="attr">name</span>: lucius0, <span class="attr">age</span>: <span class="number">24</span>&#125;);</div><div class="line">obj.toString(); <span class="comment">// "name=lucius , age=24"</span></div></pre></td></tr></table></figure>
<h2 id="7、调用基类的方法"><a href="#7、调用基类的方法" class="headerlink" title="7、调用基类的方法"></a>7、调用基类的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">superClass.prototype.methodName.call(this, arg0, arg1, arg2);</div><div class="line">superClass.prototype.methodName.apply(this, args);</div></pre></td></tr></table></figure>
<h2 id="8、链式调用"><a href="#8、链式调用" class="headerlink" title="8、链式调用"></a>8、链式调用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassManager</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	ClassManager.prototype.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"Class: "</span> + str + <span class="string">" added."</span>);</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// this 指向ClassManager实例</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> manager = <span class="keyword">new</span> ClassManager();</div><div class="line">manager.addClass(<span class="string">"classA"</span>).addClass(<span class="string">"classB"</span>).addClass(<span class="string">"classC"</span>);</div></pre></td></tr></table></figure>
<h2 id="9、模块化"><a href="#9、模块化" class="headerlink" title="9、模块化"></a>9、模块化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CASE 1</span></div><div class="line"><span class="keyword">var</span> moduleA;</div><div class="line">moduleA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> prop = <span class="number">1</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">func</span>: func,</div><div class="line">		<span class="attr">prop</span>: prop</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// CASE 2</span></div><div class="line"><span class="keyword">var</span> moduleA;</div><div class="line">moduleA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> prop = <span class="number">1</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	<span class="keyword">this</span>.func = func;</div><div class="line">	<span class="keyword">this</span>.prop = prop;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之八 - 执行上下文]]></title>
      <url>https://lucius0.github.io/2016/08/13//archivers/javascript-execution-context/</url>
      <content type="html"><![CDATA[<p>作用域：全局、函数、eval。可参考<a href="/2016/08/11//archivers/javascript-function-01/" title="《函数与作用域01》">《函数与作用域01》</a>和<a href="/2016/08/13//archivers/javascript-function-02/" title="《函数与作用域02》">《函数与作用域02》</a>。</p>
<h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>执行上下文类似于栈的结构，可参考<a href="http://blogread.cn/it/article/6178" target="_blank" rel="external">《深入理解Javascript之执行上下文》</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"EC0"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcEC1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"EC1"</span>);</div><div class="line">	<span class="keyword">var</span> funcEC2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"EC2"</span>);</div><div class="line">		<span class="keyword">var</span> funcEC3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="built_in">console</span>.log(<span class="string">"EC3"</span>);</div><div class="line">		&#125;;</div><div class="line">		funcEC3();</div><div class="line">	&#125;</div><div class="line">	funcEC2();</div><div class="line">&#125;</div><div class="line">funcEC1();</div><div class="line"></div><div class="line"><span class="comment">// EC0 -&gt; EC1 -&gt; EC2 -&gt; EC3</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> 变量对象(VO)是一个抽象概念的“对象”，它用于存储执行上下文中的变量、函数声明、函数参数</p>
<p>可以将上下文看成一个对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">activeExecutionContext = &#123;</div><div class="line">	<span class="attr">VO</span>: &#123;</div><div class="line">		data_var,</div><div class="line">		data_func_declaration,</div><div class="line">		data_func_arguments</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line">test(<span class="number">30</span>);</div><div class="line"></div><div class="line">VO(globalContext) = &#123;</div><div class="line">	a = <span class="number">10</span>,</div><div class="line">	<span class="attr">test</span>: <span class="xml"><span class="tag">&lt; <span class="attr">ref</span> <span class="attr">to</span> <span class="attr">function</span> &gt;</span></span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">VO(test function) = &#123;</div><div class="line">	x: 30,</div><div class="line">	b: 20</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、全局执行上下文-浏览器"><a href="#2、全局执行上下文-浏览器" class="headerlink" title="2、全局执行上下文(浏览器)"></a>2、全局执行上下文(浏览器)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">VO(globalContext) === [[global]];</div><div class="line"><span class="comment">// 全局初始化</span></div><div class="line">[[global]] = &#123;</div><div class="line">	<span class="attr">Math</span>: <span class="xml"><span class="tag">&lt;<span class="name">...</span>&gt;</span>,</span></div><div class="line">	String: <span class="tag">&lt;<span class="name">...</span>&gt;</span>,</div><div class="line">	isNaN: <span class="tag">&lt;<span class="name">...</span>&gt;</span>,</div><div class="line">	...</div><div class="line">	window: global // 依赖浏览器	</div><div class="line">&#125;;</div><div class="line"></div><div class="line">String(10); // [[global]].string(10)</div><div class="line">window.a = 10; // [[global]].window.a = 10</div><div class="line">this.b = 10; // [[global]].b = 10</div></pre></td></tr></table></figure>
<h2 id="3、函数激活对象-AO"><a href="#3、函数激活对象-AO" class="headerlink" title="3、函数激活对象(AO)"></a>3、函数激活对象(AO)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数初始化</span></div><div class="line">VO(functionContext) === AO;</div><div class="line">AO = &#123;</div><div class="line">	<span class="attr">arguments</span>: <span class="xml"><span class="tag">&lt; <span class="attr">Arg0</span> &gt;</span></span></div><div class="line">&#125;;</div><div class="line">arguments = &#123;</div><div class="line">	callee,</div><div class="line">	length,</div><div class="line">	properties-indexes</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="3-1-变量初始化阶段"><a href="#3-1-变量初始化阶段" class="headerlink" title="3.1 变量初始化阶段"></a>3.1 变量初始化阶段</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> c = <span class="number">10</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">	<span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span> <span class="title">_e</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	(<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;);</div><div class="line">	b = <span class="number">20</span>;</div><div class="line">&#125;</div><div class="line">test(<span class="number">10</span>);</div><div class="line"></div><div class="line">AO(test) = &#123;</div><div class="line">	<span class="attr">a</span>: <span class="number">10</span>,</div><div class="line">	<span class="attr">b</span>: <span class="literal">undefined</span>,</div><div class="line">	<span class="attr">c</span>: <span class="literal">undefined</span>,</div><div class="line">	<span class="attr">d</span>: <span class="xml"><span class="tag">&lt; <span class="attr">ref</span> <span class="attr">to</span> <span class="attr">func</span> "<span class="attr">d</span>" &gt;</span>,</span></div><div class="line">	e: undefined</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>VO按照如下顺序填充：</strong></p>
<ol>
<li><p>函数参数(若未传入，初始化该参数值为undefined)</p>
</li>
<li><p>函数声明(若发生命名冲突，会覆盖)</p>
</li>
<li><p>变量声明(初始化变量值为undefined，若发生命名冲突，忽略)</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">	<span class="built_in">console</span>.log(x);</div><div class="line">&#125;</div><div class="line">foo(<span class="number">100</span>); <span class="comment">// function x() &#123;&#125;</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> 函数参数传进去之后，因为函数声明跟参数命名发生冲突，即x直接覆盖函数参数变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">	<span class="keyword">var</span> func;</div><div class="line">	<span class="built_in">console</span>.log(func);</div><div class="line">&#125;</div><div class="line">foo(<span class="number">100</span>); <span class="comment">// function x() &#123;&#125;</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> 变量声明跟函数声明的命名发生冲突，根据VO的顺序，变量声明发生冲突，则会被忽略</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">	<span class="keyword">var</span> func = <span class="number">1</span>;</div><div class="line">	<span class="built_in">console</span>.log(func);</div><div class="line">&#125;</div><div class="line">foo(<span class="number">100</span>); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> 初始化阶段变量声明因为命名冲突会被忽略，但是在第二个阶段，即执行阶段<code>func = 1</code>会被赋值为1，则就是为什么结果1的原因了。</p>
<p><strong>注意：</strong> 函数表达式不会影响VO。上文的<code>var e = function _e(){}</code>中的_e匿名函数，e的变量声明会被放在右边的AO里面，执行阶段的时候才有把匿名函数_e赋值给变量e。这就是为什么我们没办法通过_e来访问函数对象。</p>
<h3 id="3-2-代码执行阶段"><a href="#3-2-代码执行阶段" class="headerlink" title="3.2 代码执行阶段"></a>3.2 代码执行阶段</h3><p>该阶段会对上一阶段初始化的变量进行赋值</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">AO(test) = &#123;</div><div class="line">	<span class="attr">a</span>: <span class="number">10</span>,</div><div class="line">	<span class="attr">b</span>: <span class="literal">undefined</span>,</div><div class="line">	<span class="attr">c</span>: <span class="literal">undefined</span>,</div><div class="line">	<span class="attr">d</span>: <span class="xml"><span class="tag">&lt; <span class="attr">ref</span> <span class="attr">to</span> <span class="attr">func</span> "<span class="attr">d</span>" &gt;</span>,</span></div><div class="line">	e: undefined</div><div class="line">&#125;</div><div class="line"></div><div class="line">/** ↓ **/</div><div class="line">VO["c"] = 10;</div><div class="line">VO["e"] = function _e() &#123;&#125;;</div><div class="line">VO["b"] = 20;</div><div class="line"></div><div class="line">/** ↓ **/</div><div class="line">AO(test) = &#123;</div><div class="line">	a: 10,</div><div class="line">	b: 20,</div><div class="line">	c: 10,</div><div class="line">	d: <span class="tag">&lt; <span class="attr">reference</span> <span class="attr">to</span> <span class="attr">FunctionDeclaration</span> "<span class="attr">d</span>" &gt;</span></div><div class="line">	e: function _e() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>栗子：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// function x() &#123;&#125;</span></div><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 10</span></div><div class="line">x = <span class="number">20</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 20</span></div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="keyword">var</span> b = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ol>
<li><p>初始化阶段</p>
<ul>
<li><p>函数参数：上下文测试不存在函数参数问题</p>
</li>
<li><p>函数声明：<code>function x() {}</code></p>
</li>
<li><p>变量声明：<code>var x</code> 命名冲突，忽略；<code>var a; var b</code> undefined</p>
</li>
</ul>
</li>
<li><p>执行阶段</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// function x() &#123;&#125;</span></div><div class="line">x = <span class="number">10</span>; <span class="comment">// x 被赋值</span></div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 10</span></div><div class="line">x = <span class="number">20</span>; <span class="comment">// x 再次被赋值</span></div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 20</span></div><div class="line">a = <span class="number">1</span>; <span class="comment">// a 被赋值</span></div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之七 - 函数与作用域(2)]]></title>
      <url>https://lucius0.github.io/2016/08/13//archivers/javascript-function-02/</url>
      <content type="html"><![CDATA[<h2 id="1、闭包"><a href="#1、闭包" class="headerlink" title="1、闭包"></a>1、闭包</h2><p>是指一个函数或函数的引用，与一个引用环境绑定在一起。这个引用环境是一个存储该函数每个非局部变量的表，它不同于一般的函数，它允许一个函数在立即词法作用域外调用时，仍可访问非本地变量。</p>
<p><strong>缺点：</strong> 容易造成空间浪费，内存泄漏，性能消耗</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CASE 1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> localVal = <span class="number">30</span>;</div><div class="line">	<span class="keyword">return</span> localVal;</div><div class="line">&#125;</div><div class="line">outer(); <span class="comment">// 30</span></div><div class="line"></div><div class="line"><span class="comment">// CASE 2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> localVal = <span class="number">30</span>;</div><div class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> localVal;</div><div class="line">	&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func = outer();</div><div class="line">func(); <span class="comment">// 30</span></div></pre></td></tr></table></figure>
<p><strong>循环闭包：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.innerHTML = <span class="string">"&lt;div id='div1'&gt;aaa&lt;/div&gt;&lt;div id='div2'&gt;bbb&lt;/div&gt;&lt;div id='div3'&gt;ccc&lt;/div&gt;"</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">	<span class="built_in">document</span>.getElementById(<span class="string">"div"</span> + i).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">		alert(i); <span class="comment">// 都是4</span></div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 解决</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">	(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</div><div class="line">		<span class="built_in">document</span>.getElementById(<span class="string">"div"</span> + i).addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">			alert(i); <span class="comment">// 1, 2, 3</span></div><div class="line">		&#125;);</div><div class="line">	&#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、封装"><a href="#2、封装" class="headerlink" title="2、封装"></a>2、封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> _userId = <span class="number">123</span>;</div><div class="line">	<span class="keyword">var</span> _typeId = <span class="string">"item"</span>;</div><div class="line">	<span class="keyword">var</span> _export = &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">converter</span>(<span class="params">userId</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> _userId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	_export.getUserId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> converter(_userId);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	_export.getTypeId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> _typeId;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>._export = _export;</div><div class="line">&#125;());</div><div class="line"></div><div class="line">_export.getUserId(); <span class="comment">// 123</span></div><div class="line">_export.getTypeId(); <span class="comment">// item</span></div><div class="line">_export._userId; <span class="comment">// undefined</span></div><div class="line">_export._typeId; <span class="comment">// undefined</span></div><div class="line">_export.converter; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<h2 id="3、全局-函数-eval"><a href="#3、全局-函数-eval" class="headerlink" title="3、全局/函数/eval"></a>3、全局/函数/eval</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 全局</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">20</span>; <span class="comment">// 局部</span></div><div class="line">&#125;)();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// error</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">in</span> &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;) &#123;</div><div class="line">	<span class="built_in">console</span>.log(item); <span class="comment">// a b</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(item); <span class="comment">// b</span></div><div class="line"></div><div class="line"><span class="built_in">eval</span>(<span class="string">"var c = 1;"</span>); </div><div class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> 由于没有块作用域，所以<code>var item</code>相当于<code>var a</code>是一个全局变量。b则是一个函数变量，只能在函数内有效，eval则在严格模式下外部是取不到eval作用域下的变量的。</p>
<h2 id="5、作用域链"><a href="#5、作用域链" class="headerlink" title="5、作用域链"></a>5、作用域链</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> local2 = <span class="number">2</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">outer1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> local1 = <span class="number">1</span>;</div><div class="line">		<span class="built_in">console</span>.log(local1 + <span class="string">"---"</span> + local2 + <span class="string">"---"</span> + global3); <span class="comment">// 1 2 3</span></div><div class="line">	&#125;</div><div class="line">	outer1();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> global3 = <span class="number">3</span>;</div><div class="line">outer2();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i = <span class="number">1</span>;</div><div class="line">	<span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log(typeof i);"</span>);</div><div class="line">	func(); <span class="comment">// undefined</span></div><div class="line">&#125;</div><div class="line">outer();</div></pre></td></tr></table></figure>
<h2 id="6、作用域封装"><a href="#6、作用域封装" class="headerlink" title="6、作用域封装"></a>6、作用域封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数表达式</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a, b;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 函数表达式</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a, b;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p>总结：这样的好处就是将变量作用域封装为函数内部作用域，防止跟全局变量发生冲突</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之六 - 函数与作用域(1)]]></title>
      <url>https://lucius0.github.io/2016/08/11//archivers/javascript-function-01/</url>
      <content type="html"><![CDATA[<h2 id="1、调用方式"><a href="#1、调用方式" class="headerlink" title="1、调用方式"></a>1、调用方式</h2><ul>
<li><p>直接调用：foo();</p>
</li>
<li><p>对象方法：o.method();</p>
</li>
<li><p>构造器：new Foo();</p>
</li>
<li><p>call/apply/bind：func.call(o);</p>
</li>
</ul>
<h2 id="2、创建函数"><a href="#2、创建函数" class="headerlink" title="2、创建函数"></a>2、创建函数</h2><ul>
<li>函数声明</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>函数表达式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 函数变量</span></div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="comment">// do something here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 立即执行函数表达式</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// do something here</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 匿名函数</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// do something here</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 命名式函数表达式</span></div><div class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="comment">// do something here</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 一般来说foo是在add所创建的作用域里，即外部调用一般都是访问不到</span></div><div class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// Uncaught ReferenceError: foo is not defined(…) </span></div><div class="line"><span class="comment">// IE6 ~ IE8则是可以的</span></div></pre></td></tr></table></figure>
<h2 id="3、函数构造器"><a href="#3、函数构造器" class="headerlink" title="3、函数构造器"></a>3、函数构造器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"console.log(a + b);"</span>);</div><div class="line">func(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> func = <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"console.log(a + b);"</span>);</div><div class="line">func(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p>函数构造器一般很少使用，会出现一些很奇怪的现象</p>
<ul>
<li>localValue 仍为局部变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>(<span class="string">"var localVal='local'; console.log(localVal);"</span>)(); <span class="comment">// local</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> localVal); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<ul>
<li>local不可访问，全局变量global可以访问</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> globalVal = <span class="string">"global"</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> localVal = <span class="string">"local"</span>;</div><div class="line">	<span class="built_in">Function</span>(<span class="string">"console.log(typeof localVal, typeof globalVal);"</span>)(); <span class="comment">// undefined, string</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>总结：</p>
<table>
<thead>
<tr>
<th style="text-align:left">空白</th>
<th>函数声明</th>
<th>函数表达式</th>
<th>函数构造器</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">前置</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">允许匿名</td>
<td></td>
<td>√</td>
<td>√ </td>
</tr>
<tr>
<td style="text-align:left">立即调用</td>
<td></td>
<td>√</td>
<td>√ </td>
</tr>
<tr>
<td style="text-align:left">在定义该函数的作用域通过函数名访问</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left">没有函数名</td>
<td></td>
<td></td>
<td>√ </td>
</tr>
</tbody>
</table>
<h2 id="4、this"><a href="#4、this" class="headerlink" title="4、this"></a>4、this</h2><h3 id="4-1-全局作用域下的this"><a href="#4-1-全局作用域下的this" class="headerlink" title="4.1 全局作用域下的this"></a>4.1 全局作用域下的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.document === <span class="built_in">document</span>; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">this</span> ==== <span class="built_in">window</span>; <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="keyword">this</span>.a = <span class="number">37</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 37</span></div></pre></td></tr></table></figure>
<h3 id="4-2-一般函数的this"><a href="#4-2-一般函数的this" class="headerlink" title="4.2 一般函数的this"></a>4.2 一般函数的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">f1() === <span class="built_in">window</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="4-3-作为对象方法的函数this"><a href="#4-3-作为对象方法的函数this" class="headerlink" title="4.3 作为对象方法的函数this"></a>4.3 作为对象方法的函数this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CASE 1</span></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">	<span class="attr">prop</span>: <span class="number">37</span>,</div><div class="line">	<span class="attr">f</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.prop;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(o.f()); <span class="comment">// 37</span></div><div class="line"></div><div class="line"><span class="comment">// CASE 2</span></div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">prop</span>: <span class="number">37</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.prop;</div><div class="line">&#125;</div><div class="line">o.f = f;</div><div class="line"><span class="built_in">console</span>.log(o.f()); <span class="comment">// 37</span></div></pre></td></tr></table></figure>
<h3 id="4-4-对象原型链上的this"><a href="#4-4-对象原型链上的this" class="headerlink" title="4.4 对象原型链上的this"></a>4.4 对象原型链上的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">f</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b;</div><div class="line">&#125;&#125;;</div><div class="line"><span class="keyword">var</span> p = <span class="built_in">Object</span>.create(o); <span class="comment">// p 的原型o</span></div><div class="line">p.a = <span class="number">1</span>;</div><div class="line">p.b = <span class="number">4</span>;</div><div class="line"><span class="built_in">console</span>.log(p.f()); <span class="comment">// 调用原型链的f函数，this指向p</span></div></pre></td></tr></table></figure>
<h3 id="4-5-get-set方法与this"><a href="#4-5-get-set方法与this" class="headerlink" title="4.5 get/set方法与this"></a>4.5 get/set方法与this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">modules</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(<span class="keyword">this</span>.re * <span class="keyword">this</span>.re + <span class="keyword">this</span>.im + <span class="keyword">this</span>.im);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = &#123;</div><div class="line">	<span class="attr">re</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">im</span>:<span class="number">-1</span>,</div><div class="line">	get phase() &#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">Math</span>.atan2(<span class="keyword">this</span>.im, <span class="keyword">this</span>.re);</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"modules"</span>, &#123;<span class="attr">get</span>: modules, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(o.phase, o.modules);</div></pre></td></tr></table></figure>
<h3 id="4-6-构造器中的this"><a href="#4-6-构造器中的this" class="headerlink" title="4.6 构造器中的this"></a>4.6 构造器中的this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.a = <span class="number">37</span>; <span class="comment">// 全局变量a</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> MyClass(); <span class="comment">// this 指向o</span></div><div class="line"><span class="built_in">console</span>.log(o.a); <span class="comment">// 37，o的原型链是MyClass</span></div></pre></td></tr></table></figure>
<h3 id="4-7-call-apply方法与this"><a href="#4-7-call-apply方法与this" class="headerlink" title="4.7 call/apply方法与this"></a>4.7 call/apply方法与this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">c, d</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b + c + d;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">3</span>&#125;;</div><div class="line">add.call(o, <span class="number">5</span>, <span class="number">7</span>);</div><div class="line">add.apply(o, [<span class="number">5</span>, <span class="number">7</span>]);</div><div class="line"><span class="comment">// call与apply常见使用方法，即想把某个函数指向某个this</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line">bar.call(<span class="number">7</span>); <span class="comment">// [object Number] this 指向 new Number(7)</span></div></pre></td></tr></table></figure>
<h3 id="4-8-bind方法与this"><a href="#4-8-bind方法与this" class="headerlink" title="4.8 bind方法与this"></a>4.8 bind方法与this</h3><p>ES5才提供，IE9+才支持的函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> g = f.bind(&#123;<span class="attr">a</span>: <span class="string">"test"</span>&#125;); <span class="comment">// f的this指向对象&#123;a:"test"&#125;</span></div><div class="line"><span class="built_in">console</span>.log(g()); <span class="comment">// test</span></div><div class="line"><span class="keyword">var</span> o = &#123;<span class="attr">a</span>: <span class="number">37</span>, <span class="attr">f</span>: f, <span class="attr">g</span>: g&#125;; <span class="comment">// f中的this指向o，而g的this指向为&#123;a:"test"&#125;</span></div><div class="line"><span class="built_in">console</span>.log(o.f(), o.g()); <span class="comment">// 37, test</span></div></pre></td></tr></table></figure>
<h3 id="4-9-函数属性-amp-amp-arguments"><a href="#4-9-函数属性-amp-amp-arguments" class="headerlink" title="4.9 函数属性 &amp;&amp; arguments"></a>4.9 函数属性 &amp;&amp; arguments</h3><ul>
<li><strong>arguments</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line">	<span class="built_in">arguments</span>.length; <span class="comment">// 2</span></div><div class="line">	<span class="built_in">arguments</span>[<span class="number">0</span>]; <span class="comment">// 1</span></div><div class="line">	<span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">10</span>; <span class="comment">// 在use strict模式下，无法赋值，x还是为 1</span></div><div class="line">	x; <span class="comment">// 10</span></div><div class="line"></div><div class="line">	<span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">100</span>;</div><div class="line">	z; <span class="comment">// undefined</span></div><div class="line">	<span class="built_in">arguments</span>.callee === foo; <span class="comment">// true，严格模式下则无法使用callee</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">foo.length; <span class="comment">// 3</span></div><div class="line">foo.name; <span class="comment">// foo</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>apply/call</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(x, y, <span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line">foo.call(<span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 1, 2, Number</span></div><div class="line">foo.apply(<span class="literal">true</span>, [<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// 1, 2, Boolean(true)</span></div><div class="line">foo.apply(<span class="literal">null</span>); <span class="comment">// undefined, undefined, window (严格模式下为null)</span></div><div class="line">foo.apply(<span class="literal">undefined</span>); <span class="comment">// undefined, undefined, window (严格模式下为undefined)</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>bind</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.x = <span class="number">9</span>;</div><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</div><div class="line">	<span class="attr">x</span>: <span class="number">81</span>, </div><div class="line">	<span class="attr">getX</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.x;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 81 this 指向module</span></div><div class="line"><span class="keyword">var</span> getX = <span class="built_in">module</span>.getX;</div><div class="line">getX(); <span class="comment">// 9 this 指向全局变量</span></div><div class="line"><span class="keyword">var</span> boundGetX = getX.bind(<span class="built_in">module</span>); </div><div class="line"><span class="comment">// 使用call/apply，boundGetX会报未定义的错误.</span></div><div class="line"><span class="comment">// 原因是call跟apply没有返回值，但是可以这样，</span></div><div class="line"><span class="comment">// getX.call(module)();</span></div><div class="line"><span class="comment">// getX.apply(module)();</span></div><div class="line">boundGetX(); <span class="comment">// 81 将上文的全局变量指向module</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>bind与函数颗粒化</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b, c</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func = add.bind(<span class="literal">undefined</span>, <span class="number">100</span>);</div><div class="line">func(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 103</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> <code>add.bind(undefined, 100)</code> 先将100传参给add函数的第一个参数，即a；然后<code>func(1, 2)</code>则会传参给函数的b跟c</p>
<ul>
<li><strong>bind与new</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">this</span>.b = <span class="number">100</span>;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.a;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func = foo.bind(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</div><div class="line">func(); <span class="comment">// 1</span></div><div class="line"><span class="keyword">new</span> func(); <span class="comment">// &#123;b: 100&#125;</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> foo函数中返回值除非是<strong>对象</strong>，否则就将<strong>this</strong>作为返回值返回，<strong>this</strong>会被初始化为默认的一个空对象，并且<strong>this</strong>的原型是<em>foo.prototype</em>，该空对象的b属性会赋值为100，然后整个对象会被作为返回值返回并且忽略return的返回值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之五 - 数组]]></title>
      <url>https://lucius0.github.io/2016/08/11//archivers/javascript-array/</url>
      <content type="html"><![CDATA[<p>有序，弱类型(多类型)集合。数组是有长度限制的，即0~2^23 - 1</p>
<p>数组的原型链：<code>[] -&gt; Array.prototype</code>; 对象的原型链：<code>{} -&gt; Object.prototype</code></p>
<p><strong>常用方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.join</div><div class="line"><span class="built_in">Array</span>.prototype.reverse</div><div class="line"><span class="built_in">Array</span>.prototype.sort</div><div class="line"><span class="built_in">Array</span>.prototype.concat</div><div class="line"><span class="built_in">Array</span>.prototype.slice</div><div class="line"><span class="built_in">Array</span>.prototype.splice</div><div class="line"><span class="built_in">Array</span>.prototype.foreach(ES5)</div><div class="line"><span class="built_in">Array</span>.prototype.map(ES5)</div><div class="line"><span class="built_in">Array</span>.prototype.filter(ES5)</div><div class="line"><span class="built_in">Array</span>.prototype.every(ES5)</div><div class="line"><span class="built_in">Array</span>.prototype.some(ES5)</div><div class="line"><span class="built_in">Array</span>.prototype.reduce/reduceRight(ES5)</div><div class="line"><span class="built_in">Array</span>.prototype.indexOf/<span class="built_in">Array</span>.prototype.lastIndexOf(ES5)</div><div class="line"><span class="built_in">Array</span>.isArray(ES5)</div></pre></td></tr></table></figure>
<ul>
<li>reduce</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123; <span class="keyword">return</span> x + y&#125;, <span class="number">0</span>); <span class="comment">// 6</span></div></pre></td></tr></table></figure>
<p><em>解析：</em> reduce接受两个参数，第一个参数则是逻辑函数，第二个参数表明是否要跟首次传入逻辑函数的参数进行逻辑处理，例如上文例子，会先进行 0 + 1 = 1，1 + 2 = 3，3 + 3 = 6</p>
<ul>
<li>isArray</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.isArray([]); <span class="comment">// true</span></div><div class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>; <span class="comment">// true</span></div><div class="line">(&#123;&#125;).toString.apply([]) === [<span class="string">"object Array"</span>]; <span class="comment">// true</span></div><div class="line">[].constructor === <span class="built_in">Array</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之四 - 对象]]></title>
      <url>https://lucius0.github.io/2016/08/09//archivers/javascript-object/</url>
      <content type="html"><![CDATA[<p>对象中包含一系列属性，这些属性是无序的。每个属性都有一个字符串key和对应的value。(无序，key为字符串)</p>
<h2 id="1、对象结构"><a href="#1、对象结构" class="headerlink" title="1、对象结构"></a>1、对象结构</h2><p>拥有<code>[[proto]]、[[class]](属于哪个类)、[[extensible]](是否允许添加新的属性)、writable、enumerable、configurable、value、get/set</code></p>
<h2 id="2、new-原型链"><a href="#2、new-原型链" class="headerlink" title="2、new/原型链"></a>2、new/原型链</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">foo.prototype.z = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</div><div class="line">obj.y = <span class="number">2</span>;</div><div class="line">obj.x = <span class="number">1</span>;</div><div class="line"></div><div class="line">obj.x; <span class="comment">// 1</span></div><div class="line">obj.y; <span class="comment">// 2</span></div><div class="line">obj.z; <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> obj.toString; <span class="comment">// "function"</span></div><div class="line"><span class="string">"z"</span> <span class="keyword">in</span> obj; <span class="comment">// true</span></div><div class="line">obj.hasOwnProperty(<span class="string">"z"</span>); <span class="comment">//false</span></div></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>var obj = new foo();</code> obj的[[proto]]则会指向foo.prototype, 而foo的prototype则会指向Object.prototype，Object.prototype则会指向null</p>
</li>
<li><p><code>foo.prototype.z = 3;</code> 在foo.prototype添加一个属性z</p>
</li>
<li><p><code>obj.z</code> 会先从obj查找是否有z这个属性，然后再查找obj的[[proto]]，即foo.prototype</p>
</li>
<li><p><code>obj.toString</code> 该方法是在Object.prototype中，即Object.prototype.toString();</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">obj.z = <span class="number">5</span>;</div><div class="line"></div><div class="line">obj.hasOwnProperty(<span class="string">"z"</span>); <span class="comment">// true</span></div><div class="line">foo.prototype.z; <span class="comment">// 3</span></div><div class="line">obj.z; <span class="comment">// 5</span></div><div class="line"></div><div class="line">obj.z = <span class="literal">undefined</span>;</div><div class="line">obj.z; <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> obj.z; <span class="comment">// true</span></div><div class="line">obj.z; <span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="keyword">delete</span> obj.z; <span class="comment">// true</span></div><div class="line">obj.z; <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>obj.z = 5;</code> 赋值不会因为obj没有z属性而继续往prototype找是否有这个属性，从而修改prototype的属性，什么意思呢？就是obj没有z属性，则只会在obj添加新的z属性，反而foo.prototype.z的值不会被修改。</p>
</li>
<li><p><code>obj.hasOwnProperty(&quot;z&quot;);    foo.prototype.z;    obj.z;</code> z的属性是添加到obj上的，foo.prototype.z是不会受到影响的，依旧保留。</p>
</li>
<li><p><code>obj.z = undefined;        obj.z;        foo.prototype.z;</code> 同理</p>
</li>
<li><p><code>delete obj.z;        obj.z;        delete obj.z;        obj.z;</code> delete 删除的只是obj的属性，而不会影响foo.prototype的属性，但当obj的z被删除后，obj.z查找步骤又跟之前一样会到foo.prototype原型链去查找。</p>
</li>
</ul>
<h2 id="3、Object-create"><a href="#3、Object-create" class="headerlink" title="3、Object.create"></a>3、Object.create</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</div><div class="line">obj.x; <span class="comment">// 1</span></div><div class="line"><span class="keyword">typeof</span> obj.toString; <span class="comment">// "function"</span></div><div class="line">obj.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</div><div class="line">obj.toString; <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>var obj = Object.create({x:1});</code> 利用Object.create，则会创建一个新的对象，其原型链则指向参数。即<code>obj -&gt; {x:1} -&gt; Object.prototype -&gt; null</code></p>
</li>
<li><p><code>obj.x; // 1</code> 调用原型链上的参数</p>
</li>
</ul>
<h2 id="4、属性操作"><a href="#4、属性操作" class="headerlink" title="4、属性操作"></a>4、属性操作</h2><h3 id="4-1-属性读写"><a href="#4-1-属性读写" class="headerlink" title="4.1 属性读写"></a>4.1 属性读写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</div><div class="line">obj.x; <span class="comment">// 读</span></div><div class="line">obj.x = <span class="number">2</span>; <span class="comment">// 写</span></div></pre></td></tr></table></figure>
<h3 id="4-2-异常"><a href="#4-2-异常" class="headerlink" title="4.2 异常"></a>4.2 异常</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</div><div class="line">obj.y; <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> yx = obj.y.z; <span class="comment">// TypeError : Cannot read property "z" of undefined</span></div><div class="line">obj.y.z = <span class="number">2</span>; <span class="comment">// TypeError : Cannot set property "z" of undefined，假如 obj.y = 1; obj.y.z=2; 则不会报错</span></div></pre></td></tr></table></figure>
<h3 id="4-3-删除"><a href="#4-3-删除" class="headerlink" title="4.3 删除"></a>4.3 删除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="built_in">Object</span>.prototype; <span class="comment">// false, 这是因为Object.prototype的configurable为false</span></div><div class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">Object</span>, <span class="string">"prototype"</span>);</div><div class="line">descriptor.configurable; <span class="comment">// false，这样就无法delete Object.prototype</span></div></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li><p>是无法删除基本类型的，例如：<code>var a = 1;        delete a; // false</code> </p>
</li>
<li><p>是无法删除函数声明的，例如：<code>function func(){};        delete func; // false</code></p>
</li>
<li><p>可以删除隐式的全局变量，例如：<code>a = 1;         window.a; // 1        delete a; //true</code></p>
</li>
<li><p>可以删除eval定义变量，例如：<code>eval(&quot;var x = 1&quot;);        delete x; //true</code></p>
</li>
</ul>
<h3 id="4-4-检测"><a href="#4-4-检测" class="headerlink" title="4.4 检测"></a>4.4 检测</h3><ul>
<li><p><code>&quot;x&quot; in obj;</code> 不仅仅会在该对象找，还会沿原型链上找</p>
</li>
<li><p><code>obj.hasOwnProperty(&quot;x&quot;)</code> 只会在该对象找，不会到沿原型链上找</p>
</li>
<li><p><code>obj.propertyIsEnumeratable</code> 是否可枚举</p>
</li>
<li><p><code>Object.defineProperty(obj, propertyName, propertyArgsObject);</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"x"</span>, &#123;<span class="attr">enumeratable</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">1000</span>&#125;);</div><div class="line">obj.propertyIsEnumerable(<span class="string">"x"</span>); <span class="comment">// false</span></div><div class="line">obj.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="5、getter-setter"><a href="#5、getter-setter" class="headerlink" title="5、getter/setter"></a>5、getter/setter</h2><p>用法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">_x</span>:<span class="number">1</span>,</div><div class="line"></div><div class="line">	get x() &#123;</div><div class="line">		<span class="keyword">return</span> _x;</div><div class="line">	&#125;,</div><div class="line"></div><div class="line">	set x(val) &#123;</div><div class="line">		_x = val;</div><div class="line">	&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>栗子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="built_in">Object</span>.defineProperty(foo.prototype, <span class="string">"z"</span>, &#123;<span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> foo();</div><div class="line">obj.z; <span class="comment">// 1</span></div><div class="line">obj.z = <span class="number">10</span>;</div><div class="line">obj.z; <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"z"</span>, &#123;<span class="attr">value</span>: <span class="number">100</span>, <span class="attr">configurable</span>: <span class="literal">true</span>&#125;);</div><div class="line">obj.z; <span class="comment">// 100</span></div><div class="line"><span class="keyword">delete</span> obj.z; <span class="comment">// true</span></div><div class="line">obj.z; <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>Object.defineProperty(foo.prototype, &quot;z&quot;, {get: function(){return 1;}});</code> 给foo的原型链创建属性z，并给其属性声明get方法</p>
</li>
<li><p><code>obj.z</code> 调用原型链z</p>
</li>
<li><p><code>obj.z = 10</code> 由于原型链有getter方法，表明该属性在原型链上只读不可写，同时也不会给原型链上创建新属性</p>
</li>
<li><p><code>obj.z</code> 依旧调用原型链getter方法</p>
</li>
<li><p><code>Object.defineProperty(obj, &quot;z&quot;, {value: 100, configurable: true});</code> 在obj上创建新属性z，并设置configurable为true，值为100</p>
</li>
<li><p><code>obj.z // 100</code> 调用obj本身的属性z </p>
</li>
<li><p><code>delete obj.z</code> 因为configurable为true，因此可以删除</p>
</li>
<li><p><code>obj.z</code> obj上的z被删除了，所以会重新从原型链上查找z属性</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"x"</span>, &#123;<span class="attr">value</span>: <span class="number">1</span>&#125;); <span class="comment">// writable = false, configurable = false;</span></div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(o);</div></pre></td></tr></table></figure>
<p><em>解析：</em> 没啥解释</p>
<h2 id="6、属性标签"><a href="#6、属性标签" class="headerlink" title="6、属性标签"></a>6、属性标签</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Object.getOwnPropertyDescriptor(obj, propertyName);</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">"name"</span>, &#123;<span class="attr">configurable</span>: <span class="literal">false</span>, <span class="attr">writable</span>: <span class="literal">false</span>, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="string">"Test"</span>&#125;);</div><div class="line"><span class="built_in">Object</span>.keys(person); <span class="comment">// ["name"]</span></div><div class="line">person.name; <span class="comment">// Test;</span></div><div class="line">person.name = <span class="string">"Test2"</span>;</div><div class="line">person.name; <span class="comment">// Test</span></div><div class="line"><span class="keyword">delete</span> person.name; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<p>-<code>Object.keys(person)</code> 获取该对象所有可枚举的属性</p>
<ul>
<li><p><code>Object.getOwnPropertyDescriptor(obj, propertyName)</code> 获取对象描述器，第一个参数是获取描述的对象，第二个参数是该对象的属性，若不存在则返回undefined，反之则返回该对象的属性配置</p>
</li>
<li><p><code>Object.defineProperty(person, &quot;name&quot;, {configurable: false, writable: false, enumerable: true, value: &quot;Test&quot;})</code> 定义属性的配置，第一个参数是对象，第二个属性是不存在于该对象的属性，第三个则定义该对象的属性描述器对象</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">c(configurable)/w(writable)</th>
<th>c:true/w:true</th>
<th>c:true/w:false</th>
<th>c:false/w:true</th>
<th>c:false/w:false</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">修改属性的值</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">通过属性赋值、修改属性的值</td>
<td>√</td>
<td>×</td>
<td>√</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">delete该属性返回true</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">修改getter/setter方法</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td style="text-align:left">修改属性标签(除了writable从true修改为false总是允许)</td>
<td>√</td>
<td>√</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<p> <strong>注意：</strong>假如我们想改属性的值，configurable与writable为false的话就没办法修改了，但是假如writable为false，而configurable为true的话，我们可以变相的通过configurable修改属性的值，如Object.defineProperty(xxx, x, {value: 1})或者通过configurable来修改属性的writable的值使其能被修改，如Object.defineProperty(xxx, x, {writable: true});</p>
<h2 id="7、对象标签"><a href="#7、对象标签" class="headerlink" title="7、对象标签"></a>7、对象标签</h2><p>对象标签有三种：[[proto]]、[[class]]、[[extensible]]</p>
<ul>
<li><p><strong>[[proto]]：</strong> 原型对象</p>
</li>
<li><p><strong>[[class]]：</strong> 表明该对象是哪种类型的类</p>
</li>
<li><p><strong>[[extensible]]：</strong> 对象是否能再被添加新的属性，如AS的dynamic</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>&#125;;</div><div class="line"><span class="built_in">Object</span>.isExtensible(obj); <span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.preventExtensions(obj);</div><div class="line"><span class="built_in">Object</span>.isExtensible(obj); <span class="comment">// false</span></div><div class="line">obj.z = <span class="number">1</span>;</div><div class="line">obj.z; <span class="comment">// undefined，添加失败</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"x"</span>);</div><div class="line"><span class="comment">// Object &#123;value: 1, writable: true, enumerable: true, configurable: true&#125;</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.seal(obj);</div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"x"</span>);</div><div class="line"><span class="comment">// Object &#123;value: 1, writable: true, enumerable: true, configurable: false&#125;</span></div><div class="line"><span class="built_in">Object</span>.isSeal(obj); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.freeze(obj);</div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"x"</span>);</div><div class="line"><span class="comment">// Object &#123;value: 1, writable: false, enumerable: true, configurable: false&#125;</span></div><div class="line"><span class="built_in">Object</span>.isFrozen(obj);</div></pre></td></tr></table></figure>
<p><em>解析：</em></p>
<ul>
<li><p><code>Object.preventExtensions(obj)</code> 阻止obj扩展新属性，但是不会影响到旧的属性</p>
</li>
<li><p><code>Object.seal(obj)</code> 设置configurable为false</p>
</li>
<li><p><code>Object.freeze(obj)</code> 设置configurable跟writable为false</p>
</li>
</ul>
<p><strong>注意：</strong>以上的方法只会限制当前对象，并不会影响到原型链对象，若想影响原型链的对象，就得对原型链对象做同样的操作</p>
<h2 id="8、序列化"><a href="#8、序列化" class="headerlink" title="8、序列化"></a>8、序列化</h2><h3 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="literal">true</span>, <span class="attr">z</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="attr">nullVal</span>: <span class="literal">null</span>&#125;;</div><div class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">// "&#123;"x":1,"y":true,"z":[1,2,3],"nullVal":null&#125;"</span></div><div class="line"></div><div class="line">obj = &#123;<span class="attr">val</span>: <span class="literal">undefined</span>, <span class="attr">a</span>: <span class="literal">NaN</span>, <span class="attr">b</span>: <span class="literal">Infinity</span>, <span class="attr">c</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</div><div class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">// "&#123;"a":null,"b":null,"c":"2016-08-10T15:45:03.197Z"&#125;"</span></div><div class="line"></div><div class="line">obj = <span class="built_in">JSON</span>.parse(<span class="string">"&#123;'x': 1&#125;"</span>);</div><div class="line">obj.x; <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li><p><code>JSON.stringify(obj);</code> 序列化</p>
</li>
<li><p><code>JSON.parse(&quot;{&#39;x&#39;: 1}&quot;)</code> 反序列化，注意属性是以””引起来</p>
</li>
<li><p>undefined 的属性不会被序列化出来</p>
</li>
<li><p>NaN或Infinity 则会被序列化成null</p>
</li>
<li><p>new Date() 则会序列化成UTC时间格式</p>
</li>
</ul>
<h3 id="8-2-自定义"><a href="#8-2-自定义" class="headerlink" title="8.2 自定义"></a>8.2 自定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">	<span class="attr">x</span>: <span class="number">1</span>,</div><div class="line">	<span class="attr">y</span>: <span class="number">2</span>,</div><div class="line">	<span class="attr">z</span>: &#123;</div><div class="line">		<span class="attr">o1</span>: <span class="number">1</span>,</div><div class="line">		<span class="attr">o2</span>: <span class="number">2</span>,</div><div class="line">		<span class="attr">toJSON</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.o1 + <span class="keyword">this</span>.o2;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">JSON</span>.stringify(obj); <span class="comment">// "&#123;"x":1,"y":2,"z":3&#125;"</span></div></pre></td></tr></table></figure>
<p>总结：自定义z属性，其中toJSON为固定写法，若不是toJSON则为<code>&quot;{&quot;x&quot;:1,&quot;y&quot;:2,&quot;z&quot;:{&quot;o1&quot;:1,&quot;o2&quot;:2}}&quot;</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之三 - 语法]]></title>
      <url>https://lucius0.github.io/2016/08/08//archivers/javascript-statement/</url>
      <content type="html"><![CDATA[<h2 id="1、block"><a href="#1、block" class="headerlink" title="1、block"></a>1、block</h2><p>一般就是{}包括起来的代码块，注意的是，js没有块作用域，但是有函数作用域，全局作用域。</p>
<h2 id="2、var"><a href="#2、var" class="headerlink" title="2、var"></a>2、var</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = b = <span class="number">1</span>; <span class="comment">// 相当于创建了b为全局作用域，解决方法：var a = 1, b = 1</span></div></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> a = b = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// "undefined"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">// "number" b为全局变量</span></div></pre></td></tr></table></figure>
<h2 id="3、try-catch"><a href="#3、try-catch" class="headerlink" title="3、try catch"></a>3、try catch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">	<span class="keyword">throw</span> <span class="string">"test"</span>;</div><div class="line">&#125; <span class="keyword">catch</span>(ex) &#123;</div><div class="line">	<span class="built_in">console</span>.log(ex); <span class="comment">// "test"</span></div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"finally"</span>); <span class="comment">// finally</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4、function"><a href="#4、function" class="headerlink" title="4、function"></a>4、function</h2><p><code>function fd() { // do something }; // 函数声明</code></p>
<p><code>var fe = function { // do something }; // 函数表达式</code></p>
<p>区别：函数声明可以在声明前调用，且无报错；而函数表达式不可以在声明前调用，有TypeError </p>
<h2 id="5、for…in"><a href="#5、for…in" class="headerlink" title="5、for…in"></a>5、for…in</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p;</div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>, <span class="attr">y</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">for</span>(p <span class="keyword">in</span> obj) &#123;</div><div class="line">	<span class="comment">// 获取obj的key值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有几点需要注意：</p>
<ul>
<li>顺序不确定</li>
<li>enumerable为false时不显示</li>
<li>for…in 对象属性受到原型链的影响</li>
</ul>
<h2 id="6、严格模式"><a href="#6、严格模式" class="headerlink" title="6、严格模式"></a>6、严格模式</h2><p>严格模式是一种特殊的执行模式，它修复了部分语言上的不足，提供更强的错误检查，并增强安全性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.</span></div><div class="line"><span class="function"><span class="keyword">function</span>  <span class="title">func</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// ps：ie 不认该模式，会自动忽略严格模式</span></div><div class="line">	<span class="comment">// 方法func按照严格模式执行</span></div><div class="line"><span class="meta">	"use strict"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2.</span></div><div class="line"><span class="meta">"use strict"</span> <span class="comment">// 按照严格模式来</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>严格模式：</p>
<ul>
<li>不允许使用with(SyntaxError);</li>
<li>不允许给未声明的变量赋值(RefrenceError);</li>
<li>arguments变为参数的静态变量；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正常状态下</span></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">	<span class="comment">// "use strict";</span></div><div class="line">	<span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">100</span>;</div><div class="line">	<span class="built_in">console</span>.log(a);</div><div class="line">&#125;(<span class="number">1</span>);</div><div class="line"><span class="comment">// ps: 若有传参的话，则arguments[0]可以改变a的值，即a的值为100，</span></div><div class="line"><span class="comment">//     若不传参，即!function(a)&#123;&#125;();则无论是否有arguments的赋值，a都是为undefined</span></div><div class="line"><span class="comment">// 严格模式：</span></div><div class="line"><span class="comment">// 		1) 值传递：传参则1，无传参则undefined</span></div><div class="line"><span class="comment">//		2) 址传递：若在无传参的情况下赋值则会报错</span></div></pre></td></tr></table></figure>
<ul>
<li>严格模式下删除形参会报错(1.configurable为true则报SyntaxError；2.configurable为false则报TypeError)；</li>
<li>对象字面量属性重复报错。<code>var obj = {x:1, x:2}; // SyntaxError</code></li>
<li>禁止八进制字面量 <code>console.log(0123); //SyntaxError</code></li>
<li>eval, arguments变为关键字，不能作为变量、函数名，若违反则报SyntaxError </li>
<li>eval独立作用域</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">eval</span>(<span class="string">"val evalValue = 2;"</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> evalValue);<span class="comment">//number</span></div><div class="line">&#125;();</div><div class="line"></div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">	"use strict"</span>;</div><div class="line">	<span class="built_in">eval</span>(<span class="string">"var evalValue = 2;"</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> evalValue);<span class="comment">//undefined，原因是eval独立作用域</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>严格模式总结：</strong></p>
<ol>
<li>不允许使用with；</li>
<li>所有变量必须声明，赋值给未声明的变量报错，而不是隐式创建全局变量；</li>
<li>eval中的代码不能创建eval所在的作用域变量、函数，而是为eval单独创建一个单独的作用域，并在eval返回时废弃；</li>
<li>函数中的特殊对象arguments是静态副本，而不像非严格模式那样，修改arguments或修改形参会相互影响；</li>
<li>删除configurable为false会报错，而不是选择忽略；</li>
<li>禁止八进制字面量；</li>
<li>eval、arguments为关键字，不能作为变量名或函数名；</li>
<li>一般函数的调用(不是对象方法的调用，也不是用apply/call/bind等修改this指向)，this指向null而不是全局对象；</li>
<li>若使用apply/call，当传入null或者undefined时，this指向null或undefined而不是全局对象；</li>
<li>试图修改不可写属性(writable=false)，在不可扩展的对象上添加属性时报TypeError，而不是忽略；</li>
<li>arguments.caller、arguments.callee被禁用</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之二 - 表达式]]></title>
      <url>https://lucius0.github.io/2016/08/07//archivers/javascript-expression/</url>
      <content type="html"><![CDATA[<h2 id="1-delete"><a href="#1-delete" class="headerlink" title="1. delete"></a>1. <strong>delete</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">x</span>:<span class="number">1</span>&#125;;</div><div class="line">obj.x; <span class="comment">// 1</span></div><div class="line"><span class="keyword">delete</span> obj.x;</div><div class="line">obj.x; <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj1, <span class="string">"x"</span>, &#123;</div><div class="line">	<span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">// configurable为false表示该值无法删除</span></div><div class="line">	value: <span class="number">1</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">delete</span> obj1.x; <span class="comment">// false</span></div><div class="line">obj1.x; <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h2 id="2-in"><a href="#2-in" class="headerlink" title="2. in"></a>2. <strong>in</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.x = <span class="number">1</span>; <span class="comment">//全局变量</span></div><div class="line"><span class="string">"x"</span> <span class="keyword">in</span> <span class="built_in">window</span>; <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="3-new"><a href="#3-new" class="headerlink" title="3. new"></a>3. <strong>new</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Foo.prototype.x = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo();</div><div class="line">obj.x; <span class="comment">// 1</span></div><div class="line">obj.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// false</span></div><div class="line">obj.__proto__.hasOwnProperty(<span class="string">"x"</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h2 id="4-this"><a href="#4-this" class="headerlink" title="4. this"></a>4. <strong>this</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>; <span class="comment">// window</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">fun</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;&#125;;</div><div class="line">obj.func(); <span class="comment">// obj</span></div></pre></td></tr></table></figure>
<h2 id="5-void"><a href="#5-void" class="headerlink" title="5. void"></a>5. <strong>void</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> <span class="number">0</span>; <span class="comment">// undefined</span></div><div class="line"><span class="keyword">void</span> (<span class="number">0</span>); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript之一 - 数据类型]]></title>
      <url>https://lucius0.github.io/2016/08/07//archivers/javascript-data-types/</url>
      <content type="html"><![CDATA[<p>以下笔记是观看<a href="http://www.imooc.com/view/277" target="_blank" rel="external">《深入浅出javascript》</a>所记下的。</p>
<p>javascript 因为是弱类型，所以声明类型可以省略</p>
<h2 id="1-六种基本类型"><a href="#1-六种基本类型" class="headerlink" title="1. 六种基本类型"></a>1. <strong>六种基本类型</strong></h2><p>   基础类型：number、string、boolean、null、undefined</p>
<p>   对象类型：object(Function、Array、Date)</p>
<h2 id="2-隐式转换"><a href="#2-隐式转换" class="headerlink" title="2. 隐式转换"></a>2. <strong>隐式转换</strong></h2><p>   (“num” - 0) -&gt; number; (num + “”) -&gt; string</p>
<ul>
<li><p>等于(会发生隐式转换)</p>
<p>   true：”1.23” == 1.23；0 == false；null == undefined；new Object() == new Object()；[1,2] == [1,2]；new String(“hi”) == “hi”</p>
</li>
<li><p>严格等于(会判断两边的类型，类型不同则为false，反之判断值是否相同)</p>
<p>   true：null === null；undefined === undefined；</p>
<p>   false：NaN === NaN；NaN == NaN；null === undefined；new Object() === new Object()</p>
</li>
</ul>
<h2 id="3-包装对象"><a href="#3-包装对象" class="headerlink" title="3. 包装对象"></a>3. <strong>包装对象</strong></h2><p>   <code>console.log(&quot;string&quot;)</code>跟<code>console.log(new String(&quot;string&quot;))</code>是不同的。</p>
<p>   <code>var a = &quot;string&quot;; console.log(a.length); // 6</code>即表明在访问属性的时候会将a临时封装成对象，但访问完之后，临时对象也会被销毁。<code>a.t = 10;</code>封装a的临时包装对象，赋值结束后，临时对象会被销毁。<code>console.log(a.t);//undefined</code>临时对象被销毁了。</p>
<h2 id="4-类型检测"><a href="#4-类型检测" class="headerlink" title="4. 类型检测"></a>4. <strong>类型检测</strong></h2><pre><code>typeof、instanceof、Object.prototype.toString
</code></pre><ul>
<li><p>typeof</p>
<p>   typeof 100 “number”、typeof true “boolean”、typeof function “function”、typeof undefined “undefined”</p>
<p>   typeof new Object() “object”、typeof[1,2] “object”、typeof NaN “number”、typeof null “object”(注意不是null，而是object)</p>
</li>
<li><p>instanceof(基于原型链判断的操作符，可以判断是否为具体的类型)</p>
<p>   <strong>原理</strong>：<code>object instanceof Object</code>左边的操作数的对象的原型链上是否有右边构造函数的prototype属性</p>
<p>   <code>[1,2] instanceof Array &quot;true&quot;</code>、<code>new Object() instanceof Array &quot;false&quot;</code></p>
<p>   <strong>注意</strong>：不同window或iframe间的对象类型检测不能使用instanceof</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">Student.prototype = <span class="keyword">new</span> Person(); <span class="comment">// Person</span></div><div class="line">Student.prototype.construtor = Student; <span class="comment">// function Student()&#123;&#125;</span></div><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> Student();</div><div class="line">o <span class="keyword">instanceof</span> Student; <span class="comment">// true</span></div><div class="line">o <span class="keyword">instanceof</span> Person; <span class="comment">// true</span></div><div class="line"><span class="keyword">var</span> oo = <span class="keyword">new</span> Person();</div><div class="line">oo <span class="keyword">instanceof</span> Person; <span class="comment">// true</span></div><div class="line">oo <span class="keyword">instanceof</span> Student; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<ul>
<li>Object.prototype.toString</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.apply([]); <span class="comment">// [object Array]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// [object Function]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.apply(<span class="literal">null</span>); <span class="comment">// [object Null]</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.apply(<span class="literal">undefined</span>); <span class="comment">// [object Undefined]</span></div></pre></td></tr></table></figure>
<p> <strong>注意</strong>：IE/6/7/8 <code>Object.prototype.toString.apply(null); // [object Object]</code></p>
<p> <strong>总结：</strong> typeof 适合基本类型及function检测，遇到null失效；Class通过{}.toString拿到，适合内置对象和基本类型，遇到null和undefined失效(IE 6/7/8返回[object Object])；instanceof适用自定义对象，也可以用来检测原生对象，在不同iframe和window间检测时失效。<br> <!-- ![](/images/javascript/JavaScript-data-types-01.png) --></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搬进jekyll]]></title>
      <url>https://lucius0.github.io/2016/08/06//archivers/move-to-jekyll/</url>
      <content type="html"><![CDATA[<p>经过几个下班的时间，终于把jekyll捣弄好了。期间感谢以下几位博客的教程<a href="http://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="external">ezlippi</a>以及<a href="http://blog.csdn.net/dliyuedong/article/details/46848155" target="_blank" rel="external">李跃东</a>，还有一些查找问题的过程中忘记存档下来的博主。</p>
<p><strong>以下记录以下我遇到的问题：</strong></p>
<ol>
<li><p>git的使用跟ruby的安装请参考<a href="http://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="external">ezlippi</a>，但是在安装jekyll的时候，下载速度会很慢以至于经常失败，大家可以使用<a href="https://ruby.taobao.org/" target="_blank" rel="external">淘宝的镜像</a>或者<a href="http://gems.ruby-china.org/" target="_blank" rel="external">Ruby China的镜像</a>(推荐)。在使用镜像安装之前会先卸载自带的镜像<br><code>--remove https://rubygems.org/</code>，但是在添加新的镜像的时候会报找不到该新镜像的错误，一旦有这个问题的解决方法就是到<code>user/your account/.gemrc</code> 将sources的值改为新镜像地址就可以了。 </p>
</li>
<li><p>jekyll 3.2.0有路径查找错误的bug。我是退回到3.1.6就可以了。官方在3.2.1已经修复。若有问题，可以<br><code>gem install -v 3.1.6 jekyll -V</code> 来安装3.1.6版本。</p>
</li>
<li><p><a href="http://jekyllcn.com/" target="_blank" rel="external">jekyllcn</a>是一个很好的中文官方文档，大家可以参考。</p>
</li>
<li><p>评论我是用多说的，只要去多说官网创建一个管理站点就可以了，详细大家可以自行搜索。</p>
</li>
<li><p>站内搜索可以参考<a href="http://blog.csdn.net/dliyuedong/article/details/46848155" target="_blank" rel="external">李跃东</a>。</p>
</li>
</ol>
<p>以上是我的分享，jekyll是我从WordPress搬过来之后感觉很快很爽的一个静态博客网站，希望大家enjoy it！</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>https://lucius0.github.io/404.html</url>
      <content type="html"><![CDATA[<!DOCTYPE HTML>
<html>
<head>
  <meta http-equiv="content-type" content="text/html;charset=utf-8;">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="robots" content="all">
  <meta name="robots" content="index,follow">
</head>
<body>

<script type="text/javascript" src="http://www.qq.com/404/search_children.js" charset="utf-8" homepageurl="/" homepagename="回到我的主页">
</script>

</body>
</html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>https://lucius0.github.io/about/index.html</url>
      <content type="html"><![CDATA[<h1>WElCOME</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>https://lucius0.github.io/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>https://lucius0.github.io/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
